%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig3.pdf
%%Creator: Adobe Acrobat 9.3.3
%%For: Yong
%%CreationDate: 2015-08-07, ¿ÀÈÄ 2:21:40
%%BoundingBox: 0 0 548 331
%%HiResBoundingBox: 0 0 547.2270 330.6983
%%CropBox: 0 0 547.2270 330.6983
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1291 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/"
   pdf:PDFVersion="1.4"
   pdf:Producer="Hancom PDF 1.3.0.404"
   xmp:CreatorTool="Hancom PDF 1.3.0.404"
   xmp:CreateDate="2015-08-07T14:21:23+09:00"
   xmp:ModifyDate="2015-08-07T14:21:34+09:00"
   xmp:MetadataDate="2015-08-07T14:21:34+09:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="838BFF51-FDC5-4B22-8A13-E33105790416"
   xmpMM:InstanceID="uuid:547548dc-6e29-4f25-a65b-8ec375db1703"
   pdfaid:part="1"
   pdfaid:conformance="B">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yong</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-repair">PerformaceEval.xlsx</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:date>
    <rdf:Seq>
     <rdf:li>2015-08-07T14:21:23+09:00</rdf:li>
    </rdf:Seq>
   </dc:date>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -330.698 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 330.698 li
547.227 330.698 li
547.227 0 li
cp
clp
[1 0 0 1 -34.1196 0 ]ct
gsave
50.4 -167.914 mo
561.6 -167.914 li
561.6 514.358 li
50.4 514.358 li
cp
eclp
50.52 330.384 mo
561.6 330.384 li
561.6 16.0602 li
50.52 16.0602 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
124.8 269.937 mo
547.92 269.937 li
547.92 29.8252 li
124.8 29.8252 li
cp
ef
124.68 235.225 mo
547.8 235.225 li
547.8 236.063 li
124.68 236.063 li
124.68 235.225 li
cp
124.68 200.872 mo
547.8 200.872 li
547.8 201.71 li
124.68 201.71 li
124.68 200.872 li
cp
124.68 166.639 mo
547.8 166.639 li
547.8 167.477 li
124.68 167.477 li
124.68 166.639 li
cp
124.68 132.286 mo
547.8 132.286 li
547.8 133.124 li
124.68 133.124 li
124.68 132.286 li
cp
124.68 98.0522 mo
547.8 98.0522 li
547.8 98.8902 li
124.68 98.8902 li
124.68 98.0522 li
cp
124.68 63.6992 mo
547.8 63.6992 li
547.8 64.5372 li
124.68 64.5372 li
124.68 63.6992 li
cp
124.68 29.3462 mo
547.8 29.3462 li
547.8 30.1841 li
124.68 30.1841 li
124.68 29.3462 li
cp
.597832 .603409 .617693 rgb
f
130.44 269.937 mo
138.24 269.937 li
138.24 128.455 li
130.44 128.455 li
cp
1 1 1 rgb
ef
130.08 128.455 mo
130.08 128.336 130.32 128.096 130.44 128.096 cv
138.24 128.096 li
138.48 128.096 138.72 128.336 138.72 128.455 cv
138.72 269.937 li
138.72 270.177 138.48 270.416 138.24 270.416 cv
130.44 270.416 li
130.32 270.416 130.08 270.177 130.08 269.937 cv
cp
130.92 269.937 mo
130.44 269.578 li
138.24 269.578 li
137.88 269.937 li
137.88 128.455 li
138.24 128.934 li
130.44 128.934 li
130.92 128.455 li
cp
.136538 .123054 .126659 rgb
f
172.8 269.937 mo
180.48 269.937 li
180.48 127.617 li
172.8 127.617 li
cp
1 1 1 rgb
ef
172.44 127.617 mo
172.44 127.498 172.68 127.258 172.8 127.258 cv
180.48 127.258 li
180.72 127.258 180.96 127.498 180.96 127.617 cv
180.96 269.937 li
180.96 270.177 180.72 270.416 180.48 270.416 cv
172.8 270.416 li
172.68 270.416 172.44 270.177 172.44 269.937 cv
cp
173.28 269.937 mo
172.8 269.578 li
180.48 269.578 li
180.12 269.937 li
180.12 127.617 li
180.48 128.096 li
172.8 128.096 li
173.28 127.617 li
cp
.136538 .123054 .126659 rgb
f
215.16 269.937 mo
222.84 269.937 li
222.84 126.899 li
215.16 126.899 li
cp
1 1 1 rgb
ef
214.8 126.899 mo
214.8 126.78 215.04 126.54 215.16 126.54 cv
222.84 126.54 li
223.08 126.54 223.32 126.78 223.32 126.899 cv
223.32 269.937 li
223.32 270.177 223.08 270.416 222.84 270.416 cv
215.16 270.416 li
215.04 270.416 214.8 270.177 214.8 269.937 cv
cp
215.64 269.937 mo
215.16 269.578 li
222.84 269.578 li
222.48 269.937 li
222.48 126.899 li
222.84 127.378 li
215.16 127.378 li
215.64 126.899 li
cp
.136538 .123054 .126659 rgb
f
257.4 269.937 mo
265.08 269.937 li
265.08 124.146 li
257.4 124.146 li
cp
1 1 1 rgb
ef
257.04 124.146 mo
257.04 124.027 257.28 123.787 257.4 123.787 cv
265.08 123.787 li
265.32 123.787 265.56 124.027 265.56 124.146 cv
265.56 269.937 li
265.56 270.177 265.32 270.416 265.08 270.416 cv
257.4 270.416 li
257.28 270.416 257.04 270.177 257.04 269.937 cv
cp
257.88 269.937 mo
257.4 269.578 li
265.08 269.578 li
264.72 269.937 li
264.72 124.146 li
265.08 124.625 li
257.4 124.625 li
257.88 124.146 li
cp
.136538 .123054 .126659 rgb
f
299.76 269.937 mo
307.44 269.937 li
307.44 121.273 li
299.76 121.273 li
cp
1 1 1 rgb
ef
299.4 121.274 mo
299.4 121.154 299.64 120.914 299.76 120.914 cv
307.44 120.914 li
307.68 120.914 307.92 121.154 307.92 121.274 cv
307.92 269.937 li
307.92 270.177 307.68 270.416 307.44 270.416 cv
299.76 270.416 li
299.64 270.416 299.4 270.177 299.4 269.937 cv
cp
300.24 269.937 mo
299.76 269.578 li
307.44 269.578 li
307.08 269.937 li
307.08 121.274 li
307.44 121.752 li
299.76 121.752 li
300.24 121.274 li
cp
.136538 .123054 .126659 rgb
f
342 269.937 mo
349.68 269.937 li
349.68 124.385 li
342 124.385 li
cp
1 1 1 rgb
ef
341.64 124.386 mo
341.64 124.266 341.88 124.027 342 124.027 cv
349.68 124.027 li
349.92 124.027 350.16 124.266 350.16 124.386 cv
350.16 269.937 li
350.16 270.177 349.92 270.416 349.68 270.416 cv
342 270.416 li
341.88 270.416 341.64 270.177 341.64 269.937 cv
cp
342.48 269.937 mo
342 269.578 li
349.68 269.578 li
349.32 269.937 li
349.32 124.386 li
349.68 124.864 li
342 124.864 li
342.48 124.386 li
cp
.136538 .123054 .126659 rgb
f
384.36 269.937 mo
392.04 269.937 li
392.04 127.498 li
384.36 127.498 li
cp
1 1 1 rgb
ef
384 127.498 mo
384 127.378 384.24 127.139 384.36 127.139 cv
392.04 127.139 li
392.28 127.139 392.52 127.378 392.52 127.498 cv
392.52 269.937 li
392.52 270.177 392.28 270.416 392.04 270.416 cv
384.36 270.416 li
384.24 270.416 384 270.177 384 269.937 cv
cp
384.84 269.937 mo
384.36 269.578 li
392.04 269.578 li
391.68 269.937 li
391.68 127.498 li
392.04 127.977 li
384.36 127.977 li
384.84 127.498 li
cp
.136538 .123054 .126659 rgb
f
426.6 269.937 mo
434.4 269.937 li
434.4 137.313 li
426.6 137.313 li
cp
1 1 1 rgb
ef
426.24 137.313 mo
426.24 137.193 426.48 136.954 426.6 136.954 cv
434.4 136.954 li
434.64 136.954 434.88 137.193 434.88 137.313 cv
434.88 269.937 li
434.88 270.177 434.64 270.416 434.4 270.416 cv
426.6 270.416 li
426.48 270.416 426.24 270.177 426.24 269.937 cv
cp
427.08 269.937 mo
426.6 269.578 li
434.4 269.578 li
434.04 269.937 li
434.04 137.313 li
434.4 137.792 li
426.6 137.792 li
427.08 137.313 li
cp
.136538 .123054 .126659 rgb
f
468.96 269.937 mo
476.64 269.937 li
476.64 147.008 li
468.96 147.008 li
cp
1 1 1 rgb
ef
468.6 147.008 mo
468.6 146.889 468.84 146.649 468.96 146.649 cv
476.64 146.649 li
476.88 146.649 477.12 146.889 477.12 147.008 cv
477.12 269.937 li
477.12 270.177 476.88 270.416 476.64 270.416 cv
468.96 270.416 li
468.84 270.416 468.6 270.177 468.6 269.937 cv
cp
469.44 269.937 mo
468.96 269.578 li
476.64 269.578 li
476.28 269.937 li
476.28 147.008 li
476.64 147.487 li
468.96 147.487 li
469.44 147.008 li
cp
.136538 .123054 .126659 rgb
f
511.32 269.937 mo
519 269.937 li
519 149.043 li
511.32 149.043 li
cp
1 1 1 rgb
ef
510.96 149.043 mo
510.96 148.924 511.2 148.684 511.32 148.684 cv
519 148.684 li
519.24 148.684 519.48 148.924 519.48 149.043 cv
519.48 269.937 li
519.48 270.177 519.24 270.416 519 270.416 cv
511.32 270.416 li
511.2 270.416 510.96 270.177 510.96 269.937 cv
cp
511.8 269.937 mo
511.32 269.578 li
519 269.578 li
518.64 269.937 li
518.64 149.043 li
519 149.522 li
511.32 149.522 li
511.8 149.043 li
cp
.136538 .123054 .126659 rgb
f
gsave
476.88 207.695 mo
484.44 207.695 li
484.44 209.251 li
476.88 209.251 li
cp
476.88 209.251 mo
484.44 209.251 li
484.44 211.286 li
476.88 211.286 li
cp
519.12 209.251 mo
526.8 209.251 li
526.8 211.286 li
519.12 211.286 li
cp
434.4 211.286 mo
442.2 211.286 li
442.2 214.637 li
434.4 214.637 li
cp
476.88 211.286 mo
484.44 211.286 li
484.44 214.637 li
476.88 214.637 li
cp
519.12 211.286 mo
526.8 211.286 li
526.8 214.637 li
519.12 214.637 li
cp
392.16 214.637 mo
399.96 214.637 li
399.96 217.51 li
392.16 217.51 li
cp
434.4 214.637 mo
442.2 214.637 li
442.2 217.51 li
434.4 217.51 li
cp
476.88 214.637 mo
484.44 214.637 li
484.44 217.51 li
476.88 217.51 li
cp
519.12 214.637 mo
526.8 214.637 li
526.8 217.51 li
519.12 217.51 li
cp
349.92 217.51 mo
357.6 217.51 li
357.6 220.383 li
349.92 220.383 li
cp
392.16 217.51 mo
399.96 217.51 li
399.96 220.383 li
392.16 220.383 li
cp
434.4 217.51 mo
442.2 217.51 li
442.2 220.383 li
434.4 220.383 li
cp
476.88 217.51 mo
484.44 217.51 li
484.44 220.383 li
476.88 220.383 li
cp
519.12 217.51 mo
526.8 217.51 li
526.8 220.383 li
519.12 220.383 li
cp
307.56 220.383 mo
315.24 220.383 li
315.24 227.924 li
307.56 227.924 li
cp
349.92 220.383 mo
357.6 220.383 li
357.6 227.924 li
349.92 227.924 li
cp
392.16 220.383 mo
399.96 220.383 li
399.96 227.924 li
392.16 227.924 li
cp
434.4 220.383 mo
442.2 220.383 li
442.2 227.924 li
434.4 227.924 li
cp
476.88 220.383 mo
484.44 220.383 li
484.44 227.924 li
476.88 227.924 li
cp
519.12 220.383 mo
526.8 220.383 li
526.8 227.924 li
519.12 227.924 li
cp
265.32 227.924 mo
272.88 227.924 li
272.88 235.464 li
265.32 235.464 li
cp
307.56 227.924 mo
315.24 227.924 li
315.24 235.464 li
307.56 235.464 li
cp
349.92 227.924 mo
357.6 227.924 li
357.6 235.464 li
349.92 235.464 li
cp
392.16 227.924 mo
399.96 227.924 li
399.96 235.464 li
392.16 235.464 li
cp
434.4 227.924 mo
442.2 227.924 li
442.2 235.464 li
434.4 235.464 li
cp
476.88 227.924 mo
484.44 227.924 li
484.44 235.464 li
476.88 235.464 li
cp
519.12 227.924 mo
526.8 227.924 li
526.8 235.464 li
519.12 235.464 li
cp
222.84 235.464 mo
230.64 235.464 li
230.64 237.02 li
222.84 237.02 li
cp
265.32 235.464 mo
272.88 235.464 li
272.88 237.02 li
265.32 237.02 li
cp
307.56 235.464 mo
315.24 235.464 li
315.24 237.02 li
307.56 237.02 li
cp
349.92 235.464 mo
357.6 235.464 li
357.6 237.02 li
349.92 237.02 li
cp
392.16 235.464 mo
399.96 235.464 li
399.96 237.02 li
392.16 237.02 li
cp
434.4 235.464 mo
442.2 235.464 li
442.2 237.02 li
434.4 237.02 li
cp
476.88 235.464 mo
484.44 235.464 li
484.44 237.02 li
476.88 237.02 li
cp
519.12 235.464 mo
526.8 235.464 li
526.8 237.02 li
519.12 237.02 li
cp
180.6 237.02 mo
188.4 237.02 li
188.4 238.337 li
180.6 238.337 li
cp
222.84 237.02 mo
230.64 237.02 li
230.64 238.337 li
222.84 238.337 li
cp
265.32 237.02 mo
272.88 237.02 li
272.88 238.337 li
265.32 238.337 li
cp
307.56 237.02 mo
315.24 237.02 li
315.24 238.337 li
307.56 238.337 li
cp
349.92 237.02 mo
357.6 237.02 li
357.6 238.337 li
349.92 238.337 li
cp
392.16 237.02 mo
399.96 237.02 li
399.96 238.337 li
392.16 238.337 li
cp
434.4 237.02 mo
442.2 237.02 li
442.2 238.337 li
434.4 238.337 li
cp
476.88 237.02 mo
484.44 237.02 li
484.44 238.337 li
476.88 238.337 li
cp
519.12 237.02 mo
526.8 237.02 li
526.8 238.337 li
519.12 238.337 li
cp
138.36 238.337 mo
146.04 238.337 li
146.04 270.057 li
138.36 270.057 li
cp
180.6 238.337 mo
188.4 238.337 li
188.4 270.057 li
180.6 270.057 li
cp
222.84 238.337 mo
230.64 238.337 li
230.64 270.057 li
222.84 270.057 li
cp
265.32 238.337 mo
272.88 238.337 li
272.88 270.057 li
265.32 270.057 li
cp
307.56 238.337 mo
315.24 238.337 li
315.24 270.057 li
307.56 270.057 li
cp
349.92 238.337 mo
357.6 238.337 li
357.6 270.057 li
349.92 270.057 li
cp
392.16 238.337 mo
399.96 238.337 li
399.96 270.057 li
392.16 270.057 li
cp
434.4 238.337 mo
442.2 238.337 li
442.2 270.057 li
434.4 270.057 li
cp
476.88 238.337 mo
484.44 238.337 li
484.44 270.057 li
476.88 270.057 li
cp
519.12 238.337 mo
526.8 238.337 li
526.8 270.057 li
519.12 270.057 li
cp
clp
138.24 239.295 mo
527.04 239.295 li
527.04 206.977 li
138.24 206.977 li
cp
gsave
/1 
[/DeviceRGB] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 34.1196 330.698 ]ct
[388.8 0 0 32.318 104.12 91.4031 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 540 
/H 45 
/M[540 0 0 -45 0 45 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 540 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 540 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 540 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K%kn3K%kn3K%kn3K%kn3K%kn3K%kn3U"eQFJf94ZJf94ZJf94ZJf94ZJf94ZJf94Z^`(,ZK("<[K(#B$
K("<[K("<[K("<[K("<[_=,5FJd-f2Jd-f2Jd-f2Jd-f2Jd-f2Jd-f2i!,tQK)1)qK)1)qK)1)qK)2/:
K)1)qK)1)qiVK8ZJe*GDJe*GDJe*GDJe*GDJe*GDJe*GD!"X_EK'%[IK'%[IK'%[IK'%[IK'%[IK'&`g
Jg5jlJg5jlJg5jlJg5jlJg5jlJg5jlTd/REK$f1tK$f1tK$f1tK$f1tK$f1tK$f1t^sU%ZJiJ?AJiKD_
JiJ?AJiJ?AJiJ?AJiJ?A_)T<FK"ZcLK"ZcLK"ZcLK"ZcLK"ZcLK"ZcLi4YmZJkUbiJkUbiJkUbiJkVh2
JkUbiJkUbiiCouEJuF:"JuF:"JuF:"JuF:"JuF:"JuF:"!2tNYJmj7>Jmj7>Jmj7>Jmj7>Jmj7>Jmk<\
Js:kOJs:kOJs:kOJs:kOJs:kOJs:kOTp4PZJouZfJouZfJouZfJouZfJouZfJouZf^idPFJq/H'Jq0ME
Jq/H'Jq/H'Jq/H'Jq/H'_19CZJr,)9Jr,)9Jr,)9Jr,)9Jr,)9Jr,)9i/+4FJo$$TJo$$TJo$$TJo%)r
Jo$$TJo$$TiG>6ZJt7LaJt7LaJt7LaJt7LaJt7LaJt7La!1eaEJlmV,JlmV,JlmV,JlmV,JlmV,Jln[J
K!L!6K!L!6K!L!6K!L!6K!L!6K!L!6TsEZFJjY,WJjY,WJjY,WJjY,WJjY,WJjY,W^dH#ZK#WD^K#XJ'
K#WD^K#WD^K#WD^K#WD^_8a>FJhM^/JhM^/JhM^/JhM^/JhM^/JhM^/i%Lk[K%kn3K%kn3K%kn3K%lsQ
K%kn3K%kn3iS1(FJf94ZJf94ZJf94ZJf94ZJf94ZJf94Z!#gLYK("<[K("<[K("<[K("<[K("<[K(#B$
Jd-f2Jd-f2Jd-f2Jd-f2Jd-f2Jd-f2Ta'NQK)1)qK)1)qK)1)qK)1)qK)1)qK)1)q_"tqZJe*GDJe+Lb
Je*GDJe*GDJe*GDJe*GD_%4EFK'%[IK'%[IK'%[IK'%[IK'%[IK'%[Ii9$dZJg5jlJg5jlJg5jlJg6p5
Jg5jlJg5jli?P)EK$f1tK$f1tK$f1tK$f1tK$f1tK$f1t!7?EYJiJ?AJiJ?AJiJ?AJiJ?AJiJ?AJiKD_
K"ZcLK"ZcLK"ZcLK"ZcLK"ZcLK"ZcLTtTGZJkUbiJkUbiJkUbiJkUbiJkUbiJkUbi^eDYEJuF:"JuG?@
JuF:"JuF:"JuF:"JuF:"_5P4ZJmj7>Jmj7>Jmj7>Jmj7>Jmj7>Jmj7>i*iCFJs:kOJs:kOJs:kOJs;pm
Js:kOJs:kOiKU'ZJouZfJouZfJouZfJouZfJouZfJouZf!-NpEJq/H'Jq/H'Jq/H'Jq/H'Jq/H'Jq0ME
Jr,)9Jr,)9Jr,)9Jr,)9Jr,)9Jr,)9To%cFJo$$TJo$$TJo$$TJo$$TJo$$TJo$$T^hgoZJt7LaJt8R*
Jt7LaJt7LaJt7LaJt7La_4?)~>

%%EndBinary
grestore
np
138.24 271.613 mo
527.04 271.613 li
527.04 239.295 li
138.24 239.295 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 34.1196 330.698 ]ct
[388.8 0 0 32.318 104.12 59.0851 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 540 
/H 45 
/M[540 0 0 -45 0 45 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 540 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 540 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 540 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
JlmV,JlmV,JlmV,JlmV,JlmV,JlmV,Tig<[K!L!6K!L!6K!L!6K!L!6K!L!6K!L!6^p:jFJjY,WJjZ1u
JjY,WJjY,WJjY,WJjY,W_*c)ZK#WD^K#WD^K#WD^K#WD^K#WD^K#WD^i5VNFJhM^/JhM^/JhM^/JhNcM
JhM^/JhM^/i@gq[K%kn3K%kn3K%kn3K%kn3K%kn3K%kn3!8E,EJf94ZJf94ZJf94ZJf94ZJf94ZJf::#
K("<[K("<[K("<[K("<[K("<[K("<[U$ptFJd-f2Jd-f2Jd-f2Jd-f2Jd-f2Jd-f2^]q^QK)1)qK)2/:
K)1)qK)1)qK)1)qK)1)q_>;"ZJe*GDJe*GDJe*GDJe*GDJe*GDJe*GDi")UFK'%[IK'%[IK'%[IK'&`g
K'%[IK'%[IiT?jZJg5jlJg5jlJg5jlJg5jlJg5jlJg5jl!$d-DK$f1tK$f1tK$f1tK$f1tK$f1tK$g7=
JiJ?AJiJ?AJiJ?AJiJ?AJiJ?AJiJ?ATfD&FK"ZcLK"ZcLK"ZcLK"ZcLK"ZcLK"ZcL^qIWZJkUbiJkVh2
JkUbiJkUbiJkUbiJkUbi_+__FJuO@$JuO@$JuO@$JuO@$JuO@$JuO@$i2NJ[Jmj7>Jmj7>Jmj7>Jmk<\
Jmj7>Jmj7>iF/IFJs:kOJs:kOJs:kOJs:kOJs:kOJs:kO!0i+YJouZfJouZfJouZfJouZfJouZfJp!`/
Jq/H'Jq/H'Jq/H'Jq/H'Jq/H'Jq/H'Tn)-ZJr,)9Jr,)9Jr,)9Jr,)9Jr,)9Jr,)9^kosFJo$$TJo%)r
Jo$$TJo$$TJo$$TJo$$T_/-uZJt7LaJt7LaJt7LaJt7LaJt7LaJt7Lai16WFJlmV,JlmV,JlmV,Jln[J
JlmV,JlmV,iE2h[K!L!6K!L!6K!L!6K!L!6K!L!6K!L!6!4%5EJjY,WJjY,WJjY,WJjY,WJjY,WJjZ1u
K#WD^K#WD^K#WD^K#WD^K#WD^K#WD^TuQ(FJhM^/JhM^/JhM^/JhM^/JhM^/JhM^/^b<U[K%kn3K%lsQ
K%kn3K%kn3K%kn3K%kn3_:ugFJf94ZJf94ZJf94ZJf94ZJf94ZJf94Zi#8BZK("<[K("<[K("<[K(#B$
K("<[K("<[iU<KFJd-f2Jd-f2Jd-f2Jd-f2Jd-f2Jd-f2!!\)PK)1)qK)1)qK)1)qK)1)qK)1)qK)2/:
Je*GDJe*GDJe*GDJe*GDJe*GDJe*GDTb$/FK'%[IK'%[IK'%[IK'%[IK'%[IK'%[I^uiNZJg5jlJg6p5
Jg5jlJg5jlJg5jlJg5jl_'?hFK$o8!K$o8!K$o8!K$o8!K$o8!K$o8!i6nA[JiJ?AJiJ?AJiJ?AJiKD_
JiJ?AJiJ?AiAdRFK"ZcLK"ZcLK"ZcLK"ZcLK"ZcLK"ZcL!54"YJkUbiJkUbiJkUbiJkUbiJkUbiJkVh2
JuO@$JuO@$JuO@$JuO@$JuO@$JuO@$TrI$[Jmj7>Jmj7>Jmj7>Jmj7>Jmj7>Jmj7>^gY+\JcLB&JcMGD
JcLB&JcLB&JcLB&JcLB&_#Su~>

%%EndBinary
grestore
np
grestore
137.88 238.337 mo
137.88 238.098 138.12 237.858 138.36 237.858 cv
146.04 237.858 li
146.28 237.858 146.4 238.098 146.4 238.337 cv
146.4 270.057 li
146.4 270.296 146.28 270.536 146.04 270.536 cv
138.36 270.536 li
138.12 270.536 137.88 270.296 137.88 270.057 cv
cp
138.84 270.057 mo
138.36 269.578 li
146.04 269.578 li
145.56 270.057 li
145.56 238.337 li
146.04 238.816 li
138.36 238.816 li
138.84 238.337 li
cp
180.12 237.02 mo
180.12 236.781 180.36 236.542 180.6 236.542 cv
188.4 236.542 li
188.64 236.542 188.88 236.781 188.88 237.02 cv
188.88 270.057 li
188.88 270.296 188.64 270.536 188.4 270.536 cv
180.6 270.536 li
180.36 270.536 180.12 270.296 180.12 270.057 cv
cp
181.08 270.057 mo
180.6 269.578 li
188.4 269.578 li
187.92 270.057 li
187.92 237.02 li
188.4 237.499 li
180.6 237.499 li
181.08 237.02 li
cp
222.36 235.464 mo
222.36 235.225 222.6 235.105 222.84 235.105 cv
230.64 235.105 li
230.88 235.105 231.12 235.225 231.12 235.464 cv
231.12 270.057 li
231.12 270.296 230.88 270.536 230.64 270.536 cv
222.84 270.536 li
222.6 270.536 222.36 270.296 222.36 270.057 cv
cp
223.32 270.057 mo
222.84 269.578 li
230.64 269.578 li
230.16 270.057 li
230.16 235.464 li
230.64 235.943 li
222.84 235.943 li
223.32 235.464 li
cp
264.84 227.924 mo
264.84 227.684 264.96 227.445 265.32 227.445 cv
272.88 227.445 li
273.12 227.445 273.36 227.684 273.36 227.924 cv
273.36 270.057 li
273.36 270.296 273.12 270.536 272.88 270.536 cv
265.32 270.536 li
264.96 270.536 264.84 270.296 264.84 270.057 cv
cp
265.8 270.057 mo
265.32 269.578 li
272.88 269.578 li
272.4 270.057 li
272.4 227.924 li
272.88 228.402 li
265.32 228.402 li
265.8 227.924 li
cp
307.08 220.383 mo
307.08 220.024 307.32 219.904 307.56 219.904 cv
315.24 219.904 li
315.6 219.904 315.72 220.024 315.72 220.383 cv
315.72 270.057 li
315.72 270.296 315.6 270.536 315.24 270.536 cv
307.56 270.536 li
307.32 270.536 307.08 270.296 307.08 270.057 cv
cp
308.04 270.057 mo
307.56 269.578 li
315.24 269.578 li
314.88 270.057 li
314.88 220.383 li
315.24 220.742 li
307.56 220.742 li
308.04 220.383 li
cp
349.44 217.51 mo
349.44 217.27 349.68 217.031 349.92 217.031 cv
357.6 217.031 li
357.84 217.031 357.96 217.27 357.96 217.51 cv
357.96 270.057 li
357.96 270.296 357.84 270.536 357.6 270.536 cv
349.92 270.536 li
349.68 270.536 349.44 270.296 349.44 270.057 cv
cp
350.4 270.057 mo
349.92 269.578 li
357.6 269.578 li
357.12 270.057 li
357.12 217.51 li
357.6 217.989 li
349.92 217.989 li
350.4 217.51 li
cp
391.68 214.637 mo
391.68 214.398 391.92 214.158 392.16 214.158 cv
399.96 214.158 li
400.2 214.158 400.44 214.398 400.44 214.637 cv
400.44 270.057 li
400.44 270.296 400.2 270.536 399.96 270.536 cv
392.16 270.536 li
391.92 270.536 391.68 270.296 391.68 270.057 cv
cp
392.64 270.057 mo
392.16 269.578 li
399.96 269.578 li
399.48 270.057 li
399.48 214.637 li
399.96 215.116 li
392.16 215.116 li
392.64 214.637 li
cp
433.92 211.286 mo
433.92 210.927 434.16 210.807 434.4 210.807 cv
442.2 210.807 li
442.44 210.807 442.68 210.927 442.68 211.286 cv
442.68 270.057 li
442.68 270.296 442.44 270.536 442.2 270.536 cv
434.4 270.536 li
434.16 270.536 433.92 270.296 433.92 270.057 cv
cp
434.88 270.057 mo
434.4 269.578 li
442.2 269.578 li
441.72 270.057 li
441.72 211.286 li
442.2 211.645 li
434.4 211.645 li
434.88 211.286 li
cp
476.4 207.695 mo
476.4 207.455 476.52 207.216 476.88 207.216 cv
484.44 207.216 li
484.68 207.216 484.92 207.455 484.92 207.695 cv
484.92 270.057 li
484.92 270.296 484.68 270.536 484.44 270.536 cv
476.88 270.536 li
476.52 270.536 476.4 270.296 476.4 270.057 cv
cp
477.36 270.057 mo
476.88 269.578 li
484.44 269.578 li
483.96 270.057 li
483.96 207.695 li
484.44 208.174 li
476.88 208.174 li
477.36 207.695 li
cp
518.64 209.251 mo
518.64 209.011 518.88 208.892 519.12 208.892 cv
526.8 208.892 li
527.16 208.892 527.28 209.011 527.28 209.251 cv
527.28 270.057 li
527.28 270.296 527.16 270.536 526.8 270.536 cv
519.12 270.536 li
518.88 270.536 518.64 270.296 518.64 270.057 cv
cp
519.6 270.057 mo
519.12 269.578 li
526.8 269.578 li
526.44 270.057 li
526.44 209.251 li
526.8 209.73 li
519.12 209.73 li
519.6 209.251 li
cp
f
gsave
399.96 221.46 mo
407.52 221.46 li
407.52 222.537 li
399.96 222.537 li
cp
357.6 222.537 mo
365.28 222.537 li
365.28 223.495 li
357.6 223.495 li
cp
399.96 222.537 mo
407.52 222.537 li
407.52 223.495 li
399.96 223.495 li
cp
315.24 223.495 mo
322.92 223.495 li
322.92 224.811 li
315.24 224.811 li
cp
357.6 223.495 mo
365.28 223.495 li
365.28 224.811 li
357.6 224.811 li
cp
399.96 223.495 mo
407.52 223.495 li
407.52 224.811 li
399.96 224.811 li
cp
315.24 224.811 mo
322.92 224.811 li
322.92 224.931 li
315.24 224.931 li
cp
357.6 224.811 mo
365.28 224.811 li
365.28 224.931 li
357.6 224.931 li
cp
399.96 224.811 mo
407.52 224.811 li
407.52 224.931 li
399.96 224.931 li
cp
526.8 224.811 mo
534.48 224.811 li
534.48 224.931 li
526.8 224.931 li
cp
315.24 224.931 mo
322.92 224.931 li
322.92 228.402 li
315.24 228.402 li
cp
357.6 224.931 mo
365.28 224.931 li
365.28 228.402 li
357.6 228.402 li
cp
399.96 224.931 mo
407.52 224.931 li
407.52 228.402 li
399.96 228.402 li
cp
442.2 224.931 mo
449.76 224.931 li
449.76 228.402 li
442.2 228.402 li
cp
526.8 224.931 mo
534.48 224.931 li
534.48 228.402 li
526.8 228.402 li
cp
315.24 228.402 mo
322.92 228.402 li
322.92 230.437 li
315.24 230.437 li
cp
357.6 228.402 mo
365.28 228.402 li
365.28 230.437 li
357.6 230.437 li
cp
399.96 228.402 mo
407.52 228.402 li
407.52 230.437 li
399.96 230.437 li
cp
442.2 228.402 mo
449.76 228.402 li
449.76 230.437 li
442.2 230.437 li
cp
484.44 228.402 mo
492.24 228.402 li
492.24 230.437 li
484.44 230.437 li
cp
526.8 228.402 mo
534.48 228.402 li
534.48 230.437 li
526.8 230.437 li
cp
272.88 230.437 mo
280.68 230.437 li
280.68 237.619 li
272.88 237.619 li
cp
315.24 230.437 mo
322.92 230.437 li
322.92 237.619 li
315.24 237.619 li
cp
357.6 230.437 mo
365.28 230.437 li
365.28 237.619 li
357.6 237.619 li
cp
399.96 230.437 mo
407.52 230.437 li
407.52 237.619 li
399.96 237.619 li
cp
442.2 230.437 mo
449.76 230.437 li
449.76 237.619 li
442.2 237.619 li
cp
484.44 230.437 mo
492.24 230.437 li
492.24 237.619 li
484.44 237.619 li
cp
526.8 230.437 mo
534.48 230.437 li
534.48 237.619 li
526.8 237.619 li
cp
230.64 237.619 mo
238.44 237.619 li
238.44 238.098 li
230.64 238.098 li
cp
272.88 237.619 mo
280.68 237.619 li
280.68 238.098 li
272.88 238.098 li
cp
315.24 237.619 mo
322.92 237.619 li
322.92 238.098 li
315.24 238.098 li
cp
357.6 237.619 mo
365.28 237.619 li
365.28 238.098 li
357.6 238.098 li
cp
399.96 237.619 mo
407.52 237.619 li
407.52 238.098 li
399.96 238.098 li
cp
442.2 237.619 mo
449.76 237.619 li
449.76 238.098 li
442.2 238.098 li
cp
484.44 237.619 mo
492.24 237.619 li
492.24 238.098 li
484.44 238.098 li
cp
526.8 237.619 mo
534.48 237.619 li
534.48 238.098 li
526.8 238.098 li
cp
188.4 238.098 mo
195.96 238.098 li
195.96 238.337 li
188.4 238.337 li
cp
230.64 238.098 mo
238.44 238.098 li
238.44 238.337 li
230.64 238.337 li
cp
272.88 238.098 mo
280.68 238.098 li
280.68 238.337 li
272.88 238.337 li
cp
315.24 238.098 mo
322.92 238.098 li
322.92 238.337 li
315.24 238.337 li
cp
357.6 238.098 mo
365.28 238.098 li
365.28 238.337 li
357.6 238.337 li
cp
399.96 238.098 mo
407.52 238.098 li
407.52 238.337 li
399.96 238.337 li
cp
442.2 238.098 mo
449.76 238.098 li
449.76 238.337 li
442.2 238.337 li
cp
484.44 238.098 mo
492.24 238.098 li
492.24 238.337 li
484.44 238.337 li
cp
526.8 238.098 mo
534.48 238.098 li
534.48 238.337 li
526.8 238.337 li
cp
146.04 238.337 mo
153.72 238.337 li
153.72 270.057 li
146.04 270.057 li
cp
188.4 238.337 mo
195.96 238.337 li
195.96 270.057 li
188.4 270.057 li
cp
230.64 238.337 mo
238.44 238.337 li
238.44 270.057 li
230.64 270.057 li
cp
272.88 238.337 mo
280.68 238.337 li
280.68 270.057 li
272.88 270.057 li
cp
315.24 238.337 mo
322.92 238.337 li
322.92 270.057 li
315.24 270.057 li
cp
357.6 238.337 mo
365.28 238.337 li
365.28 270.057 li
357.6 270.057 li
cp
399.96 238.337 mo
407.52 238.337 li
407.52 270.057 li
399.96 270.057 li
cp
442.2 238.337 mo
449.76 238.337 li
449.76 270.057 li
442.2 270.057 li
cp
484.44 238.337 mo
492.24 238.337 li
492.24 270.057 li
484.44 270.057 li
cp
526.8 238.337 mo
534.48 238.337 li
534.48 270.057 li
526.8 270.057 li
cp
clp
145.44 246.477 mo
534.96 246.477 li
534.96 221.341 li
145.44 221.341 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 34.1196 330.698 ]ct
[389.52 0 0 25.136 111.32 84.221 ]ct
snap_to_device
<<
/T 1
/W 541 
/H 35 
/M[541 0 0 -35 0 35 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [cf /ASCII85Decode fl dup/DCTDecode fl]
/O 2
>>
%%BeginBinary: 1
img
s4IA+!(-_m"pYD="pkP?#RUnF$Omj^%1EXS)\a"u(*FVA+s7mJ+!`6k/0lPs-QaE^4Y8BG2``u\,:buH
5<)"e3BB,!gAjSA$47+L$k4*c%iRAQ+!ij)2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZSs1eUH#QQ(N*<Q<d!!3`5!tbS6_uLYT!<E3%!<E0#zz!!*-'":+tF!'Cem!WiB(!sS
l1"pG/2!<<*#!Ws#;&g7Dl0`VCl,!f'N1,`PU1Q`G>6W/K?1fIn(nR?R&Tu#,'s24mQ!<E3%zzz!!!$$
s24mR&HMn5!<<*"zz!!!$c;?,>M$j-M1!YGMH!'^J[/_j]oF5n6*8^$W"%:;k)<ipjt^U86fH'(b?Un0
QUL-2!6a(-G=g^%!_W4QfsJ5;PH"<TG"rmC=FnNlgBI2c82bNZ'qpZq'D[q#>IPIt`X&`mN:Q,e""5df
^f`OUb$U+D9h-m5aBZ:IGgcc1!<9O-@3d#^<G-FtFZ[V"'p+3ZRo2T?ttM7BF!l%PCV=s8%dO&<(![]`
=&S+]B8BpXk%,WPTZD5'.<:``_Co#\;+3fOaBl5FIO?F]o4ai3D**(fXUjhiPMbH:aqM`9m+3fWn#!_4
">B5ng<LX1LEj,QS+NfD825['^A2V9%f%k&+32:'5^G^R"uXHCHE7QUX]XfMS'Q(U%;-L$44O2hXu*/P
iTQN9HB*2jB!m/!R.!@UQt)c^0u"%<!CnoC0](;`?,`?GL98.D]o!HFYSL>=E0!"]E3GR5?af+?t4b`+
I,C]5uSI(sUOgU3!3nZq3F-Wj7pb`QRB3?;1i\qeEZD8/qp&ZU7Pr\:1dnB%dK7@#=qr8[AAl0I[&g%@
dDB!cM&-s^p@R>J?&]#Wq$\DHY5WUg0?%sXO*4sM6s$AM*INCrug-$b?GCnM>Q?0WG0K'9$nD5-"BZCo
059QN\"HsW@p6:Cl8R_Q;cOHB4(V@IB1'QL+68J9p;5%N7dTP6R/pSs&uDG%2U4Cd>q:C9H0SodV3,>Q
%p@[%C,^L=S3,Z:3\d;Y&D;o't!9S?<X.n<#q<!]VIr_o`H8i^*,a2'*f%Ka^\>bt.Y,=N1WmA)_9#p7
61mMI716cBI=&pK%LibIuq/tRPFL_9#H_pj^3jfYWs7`uD<H:NO+UOH%^NAQJ[H:UF(Bit\??CFGh2Br
JQ/k6"XPJ@Jb,:c:/?c)'*?`!_7ljD/XbA]>,49:O1Ef+1_?c"m=ep7CGpYLH+/dHSn_;SDi?788C.Q?
I?>"#!&[akWK%-BEbm]4-C=nuAQUBE'SP8P+2aF+BIh2kCU#pjCGQ\%LQGQs6tfh@jI5;L?;NG0q[;*W
>`DHC"E:CCl]:*cgsfmnA(96a`j<R"Agd%><,KVXa7\\6mWiG<3MQf=f864kQ=;F!^;OSTaYW#)dF_oR
'oPCmAX0*I(.7'!ANY3\`f0g:9`^GY[l9-N510+Yma%P\![RRJgdokg\L'LD":\o5%9/"Z/cR!^q_GZl
gQY9K;%H\LUrOh-V\XfG$s-m^B7GQE72M"&&T!8Qg?r%Vphb<h$Y]'3KZ&@q5FC`FdZ=QMglGufq[ntr
rSJT9&hD-D%=61D]64l%Fp)!a6+(m7_=AfcSnFH;dUp=jA_`:*g=%!Bd1R*:^?Rj,V)1kXoIVs.i(5*r
c5RQQ:p"1G###o'u*5lAC*ePnH[?VPgMg-!+aL"ufE.Rs9SOFA8L4ZtaVJ=jY<GoSS.iY(EDdRb''R:m
AuY)m?`C*S)T.bN4$*%41m3.0t_Odr8DN>M3_[^=Hl!IZol5C!!r:6iu@BX=<k)<?Z3$<W9`XYbZ-K#Y
h1!&][T7"@K).E&LPLH8\u>$.La3JVe.(6D'`:>jsafj]()#f%!k>WL7h0/Sd[UAf<'6;Y)=>Mlm^fbk
X-#9(XR139b^jh<c-F0;Z&'l(phaYiX[>!TKo57B::Lh)8nI+(t\&cp4irY5eD<qk1SUUZGI#Kl)saUU
d8>NgHZOF0=C1e4s/)F]k]Bf`VOV#hh%`?--mj-,9n-S;UR#Rl"r5U0*Je'rnk3e/;%rYOVMpr<pYEr8
+R=4<@5X'a_em9PS<Prlu2JkW0$94O]46)E\Gg:;i,Z?J?CJ,ft'YO*Di%hosYLXEMW]Y9iFT74M>>BU
;>b_f^i,k8jl1$%H!4!>aWi'P3g7GCk]!dqmV+Si*lAZYfB-?R5O_gMgnXn$8%33-Y.>7peN9nR83N3[
YeV1Lh2GLF"hRj]&b\(J/Dl81qlW!*;>%Zkqa0--3HEUn)'7!S9q4Ku<VPA;dn)C+@n1tX(`(lf^cigI
-M(02/`L"GlY7_9Gi]drqtg6+G"RlcGOS3D<(%ifUCjE,9Ll2oK"l*eCq(jSk@'f'cSUk]S1+usVbJF`
#UMdjs-=&,N=q[!+=^CePM*#W]01f;DGo$5R]>sK$UW1gV!fO-N="S'`XnMabr/ei(HEAGq%^i!q'!0n
jD%B>E:$;qPXaW+%,&E?:)NAT$ur\'Xd^Mh`YZg'Wob@pBL#m83^L`!*62Rh0>`cR(WFL+X@8(><6)E^
e&RaH4[@XimQ5;-oG^:rET`_Uj4EVPa!.26AbZn30lY;LG5PZZ[hU@og2MF65INt7&fM#sB6.3ha)15T
=HC)\Q()Ad^T<?Sp=MT3nSi(-\UkY!]FCTV`?bMR<Qh&B;T#nM<=@-4gn7iIcuOY-@'k"Tj\#*[h\HDm
!]j9/AP2UQL1fhc..9QN\"HsW@p6:Cl8R_Q;cPZ")"d;Y&D;o't!9S?<X.n<#q<!]VIr_o`H9j%uJ1%;
iRKcuK&3[LsAVdNu=8dDJ*YhO2Y6cBI=&pK%LibIuq/tRPFL_9#H_pj^3jfYTr3En&T_'YQ[!m"hUV+j
,u71g1"Uc>(T+38Ql(aK_1,D!5DhuoR4Q)!KFiH3PPdf/!>?rW8o`-pL)i*9sQQ/\Q5,#KDE&HE_M60_
OKP#dQu_97DcddVK]ITMC=J-q;3?riC;ghjHMHN5mW1>E=N:B4o:S>)@F=7D7(9:g[+IJ9C49%[u6"G0
VB%3UM5R5K5<AWmcGdTG.rJ"19/Y-U-J>J$p)**.MiMJ0g5X^oF?BegbsFuNqFZQt[;q7Y[BiG<3MQf=
f864kQ=;F!^;OSTaYW#)dF^e6-8D(c46Prp!>%m-b/$a6S@W[.FJ\A(@.aESXs_sh5)N5.968>Ws?XgL
.jLcn2Y:%m@DORSG]#01sp#nQff='$VPfTU&ZI0o4gC[/p$n,iMD&`Iu1!P-X^pgV_ZQA#q<Fjdj=!_V
XfN@#_WOWG9s9.S)[]H6$WYG?'3!c)Q!CWZrOK_KSU3+K&U/7M1</XUhoC!o1P\(bc&L!OoM@,Wq?a!q
B'b-Z/LPr6[Z$]]tZC=AtV$]Xel_1^4s/Ee+^,oB1Lf%LAjrO/`"[`T>Ahuk)<l^6?[R3YKb7=Q"c#Ks
kXda#d,i1.H?)'\SWF(8o0M&+=B$ZfB?1n_5g^$6>KC$3rOCc7>-`?BFjRS&^VZ(rIs^J@X"p+N=9j^P
T"c^]sb72c=\7]4h+6)_V0@t0rd\KX9?3)GBdE;@sI,<8Cg*,GBK>?Y_FJA8irqo?rXMua.u_jrS=o19
H"0BZ[)713BY^&)_RJ:7c&M.=X;FLf2oYsa+`%dg8J+HW7e_7R=b`9JKC0ZV0VOrV%(9h>aa#;Z&K<%J
Vchcelsi$;iBX;l!sFNMhOPEu"-[Ec@ncrI,!S]S("lI#j;6d(?N4Hmf5&=Q?uA#^(WoItebT^/MT(Zd
].+"`Fr5$&hd89-J+ha?GBKAm*/U-5S;dO_#[8_'U?.21YiGE$-b9W?oBA"md*V<+l6\V!GYG<0Df!"'
,/?]T9gr'3isnG3T$:/+ckIsSl;G-6+Q9?3j"34O]*S@-CJ,U(qK=95A4C=n&4QtZ[F2#Z=c5%G]_5+`
@\CAE.'201t[I4D\lIu:OUNMV4hXEW+&m[GU?]XQP&0^:J`Of/Ed((M*H1=gn1P<*18iP'trf(h2N**'
='XbcsbVST\q*'d6;1M9B4X=DU*YN5P>FtL+M^S^t2K>s=(oTDS&PD7d9a-?\eKtf1.=`^Oh+"j7a_'R
Ak'f'cSUk]S1+usVbJF`#UMdjs-=&,N=qZ)btK\>-MFQ)iL.!Xd7Ij:_0+&E`N:JJ8&E5Tj"4EFd*:"P
0DKc8&Q9XJ<6)k,Kr,tV8BC=7!e;URcL0>qlVLB^ue%2<iU4L;BZQV[gY.O].6Fr1Z%l7:!"B^f44(#t
0>$ri<->Nu:M3^jLl>;X+u!Y`Vr*)5#rj%%=Q1sp+<0:38'g\(:-@jep*\GSqL'T+[l=r*(q7l>E"PZZ
[hU@og2qNq+gNt]C-Zs=GLTAT7$bM/quYI@p>!;_Smc"Q$+:qGjp1D=Q+FcX`'EP:0I;s"3\*q;(3Hq$
Lp'b$3r)O9iW9(N]mfg$\,]@8m@"jokcgI9#dV*U!3Zu\^5HsW@p6:Cl8R_Q;cOHB4(V@IB1'QL+68J9
p<5%N7dTP6R/pSs&uDF2EhnW/Cc4=L\^H-n3gNB74WMGQHNrJ''g74I55(C80K4;+nua@.W=Zuf8)5`4
?XjZ7g3UQr./HkL-ii%0U/b#GPVU54YLdMu,i5EP-b0LTq&-t;,@]IAmT=,;]ToD*Mq4fMP0Oj^nMePX
E@@Qs6On?+Tdar+'ROXQ8^#_3@7+S@868Lm9K@0D;*i,(5o!@K.(B_e_(>r:m>^UDnL'r3RMi+Xrk"!E
9Y'YPF"KQbdKoE>'[]`J[K%do[9_Q37?:lGBRDp&3hM*Bs:X:*Yub[J,pY5uUTj`mY]&?=;TA6+m;oI"
-l5s$bGQ*AtK#m@6c)F5$J12?=Vb9ePnUp70mrr>%/\Qro\4>!Dg30L1lAc_(;/`CjF=#EC<9D97d8kB
s4S)*k2(<2L4IO[b8+VJN9,Qqgq&#!mPJU98u4GSTX3&Wk8n48&I9"MPOm_kSn'Bi4ro3YN$ZCV9KnGF
/#j"LofdOB)>X)1TsU(:+Dds\\Badui*al)q^@l58pNsU\FG`>au@Z@g2g;*MY=P7lG*WTa0R#_Wm+:M
kIJ&<%p9XH4/CT`rOER&rtmY_K9(uri#:a@I*ek!j_Cma6u;l!54<g!]P!26tMIq\6Z61;^;=%^7!55t
W3Z,)i=miB3'"'EQkKe81'kpGPRVSgpWBdJ7Bl4-:dB84tf:JFo5bl7[']CrD)Fd'I1+BTh*B81U;*E'
^d,gsamX6Dkf4/aE'Sn6rk$n[Ff\FPN]Q9H\&mVCQqF4fc&\W_s,39M!80ZlH@hr9.WgTjAr&Min/Q5#
&h^CMdBbn8ST:$Go$5kL]fO32^n)DZ;G()Z(bJ]O)-4&4t,7rPg8!+0WZ.XSs<Lg2p;'FbXH02WG`!#P
WoKmpblT2T&t_o2&C1o-^P`9DVuo_'$gfA!\fT(/0,(s<=Z#Ree>rco43AYZPXFmFC6RXJ%YGbR/1":M
(rZS=LJ9Be[-\>-aoU#eIGI8.=onO>99+#.eaJ*m79Ia>"Z*Vjrt)$qjY9SD-RhsgUCqK@9_k/J"mN+C
AW:h&Mbn!*fYhq->`l:QX/*Z;m_Y3<]Y-J(lS,3.>/or8]l.KJYEAM@ZV@uOu.dRCo)q3'dQgt:N`55&
&?CraDbP5rY/dma01G5,C]ht67Eq`n']'oNCfQ'Ouc@+nDE1ri!f>+7Tqe$B.PVt#B]$B64IP7IDO`5(
W@/O`.mqVP&'I_^rh&i">pjMWe-I#,5]U8sXIhYu>nZ-![QFRfu.qG'^nK*9Uf60T`UrO4#MWu:h#`PB
kEa.![CkD=tY/T2`6ULN\gmrg<QHq9=1WfTY51YZG0gAnf[Uu(p&=Km*d,hQ\X&2@`:h"Uk"C%3;QTtL
L+BDhHZ(tH7/n-F3di`H6^2JA.S4h^^c%l015BRij;B-9+^2qA/i1ObtIl`G(L[s&0Ee&^)q)7C[@ej\
IPD255q+9Olkc6/Ic_il46k[_fF;#6%2%p:eJr7_n3g.+7VbJ@8D0Z\+/Q[Ke?q4?d(hm,W.7(qGfL2$
3c;Ii>8Qo:_>:%+H+)?]-M#b\;mkO?qR"a#MH>dJ-,X?>4?GrN>M[<8UON<,R=,5a/U1Q72A1r$Op0?*
g8I[u1RG)KbKb/kML$HXX71Z_8m^PB>&DjT1:Ig%LBj@F=Pbb6#^YSs[1V7l)!hYfM.'Djmr$>#,QZVU
qgOb/aDWMW<8UDeh,qWZglednW1']nEbPQoj+TbOrcr'0StZg")AjlHo8Z3QVf)qb/j:]#<`2/uA9bW0
>O*LJ8Y:t"'SW;#WBFE\jodiT5K8!5V@8>ZC,7f#TLq1!lhVf%%]BWb^ZbOJ-WOtfBreFoO!mVgkBpTR
T38oZA:,io-2."tMVh[BFSp\fFhp0=b4:l9@c))T@_?mAV79h4dJ2Kl+MI%]^0cZb7d*0l7XQke^NIit
4qMU(PVe"u]h!>P$e*uMM#3CJUR+k'Kl!"\Pen(AVL*`jGnASd^1a,"'J6fIpV_Z'V*ETfIs1Vq:_@V(
9bVC1:iDj.B&07%)UCTjYFA8#pB>^AhmiL0/P7,#1<8cb^DREj@gc"&DuQm)VFVg.V6Bj/e;DCMM^T34
&fI<p2LasDONmL;Ic_g5BV^[jYh!7S1e_PuBM&/Z[1B8/nZ._Pi)6),UrY.$aCm*\N*dHQ:IX-qqSMUU
$Sh/bg@Y5Ns^1G#*W\.PBL(sfF_Ytf]mgsPcHHCi4mkF$S^_[Bs3/j,l:9-4i#pGM?I\a4GpXI\?NJRF
>FSf-<3F\;n.P=m%TYGD54m\qEn7*EV[=Afu>r&glQ1e1rA2l1N-"4D^75:@OJ(G]uWLE,<9VAVm048_
nRHZl5]GRO$LLD8a!U+&Or,+mlp!7A$SfA!ZWcPeQYBGMHFKRq4/f/lajRn%D)rr?DDeAcjT?\i2C0dI
kp.T?0(;e_PXamI]^o\"hE9mL(V'>gEjP#E,D9ABIHVm*@R^>5D[DVVm%N0XM9(FRi6htQL6U@RhBE$P
]*9T<XnFM=*iIkPe3HbDehI*\eifYTaJN1*l6$s]F\nt4,&qYG@?eFek"]O?bPQ:`JjD/F4dIfB:-".o
%I_3:.E0pRYg(Au)4990#PF(9^pqqLC.JcQo1`'UWj_20Mj9'IP[f\,qt'L=2Xq`n']'oNCfQ'Ouc@+n
DE1ri!f>+7Tqe$B.P$KmD9pf$`k)"q-H^OK#9$eTh*SWUJB7P4u%R"d\@OVZZX<HA&-hqPD3is%[^)FK
?.*V1S6J^[q/MRTAHI6&DG=O5t2/d@.B4P5X34A7l2CO#f#)]*oUHa.!(A!A5+l/Wt<oUM;f"pq)UK@3
K5qeeo0TOQ&*\aTT"e)EV-6[Ak4chZs<4sWYSeOUmV)==^SD1Gn>;@C3Iegql2M)H5o60;&#bn(3/XQ0
T>LAJ]tk&8`Fh/rfSNEa#e!/GDT-%I*?Ar-,DgY]2M,Fh%QGD@M244)*5E1uq<bT='+C\bCdTsK"Z]=:
`CSjouHc*7JuZ7bsBCcuOL!#eCU0/pMeONfs^l:d$O;[1`o8\O^"K0Xh<5nk'@J_]b$0*PZU_]\>/]BI
jjbkF<XrJ]oj(ZC4mS7GK"V>\8FIP9I1o^$YoBpXF_6^'-*[%:;>D-+BA[OZ+Y>?)TCIg%LBj@F=Pbb6
#^YSs[1V7l)!hYfM.#[$h;[L@PbOck6rP&+Vl<4OOSH]%OmIAukX_OS94P(RqS-q,_qIh2EulmMLO[M6
n#CZ_9%aWgdWntqg+RZ(tqGO)/M,?*j-MK'\Gb<W#m_+5c)QIJW!^L'X/\HIQLT/bro%$\%&PbB&Krr>
jlG'u2K0B$L;Uhr[?U82ON:\=B?mIP\Zl&U[a,KUf0Uf.8',CLe6r4g"E;n#2EbE^;o&PeOb-CEMG"DW
?6W;^,CcIH*ZPT:kRGR7+kE9*O^Fi=ol-JRL/e%Yh^Y@8s>-9a/'c>naN"@K&grZC%ThloRs]MjXIX>6
TeY::dm"P[XJcKjrJV=`CQ1Vq:_@V(9bVC1:iDj.B&07%)UCTjYF?q.%!Q,i;1>:&O=iYSrJW;YU^J'G
Lq*MNWKVg.V7Bj/e;DCMM^T34&fI<p2Lehf?+Y!!uGnBCXcU,ohO8cb^DREj@gc"&DuRNe,!43#GEJk"
mIA8jl9cjZ]g1*9]cF=cjqU0%&Ki7&\C2l1Vsrr=kDrB"'bAWscN!]1?r)>4cQ.F4fZRQd2O;qbq3Iq\
JjaOSN(g;RdjWp[Ein^i6?eBY@DM,je3-K]PcE1tf5(33,#K6k7r!Md5X760L:4)i'hbtF*GWsN:qHTp
T*[eDqFVi-s&]u,kMCJ6LD\p*qAr:]K?1W2u"FsVhcKs/D:FRqnD$'T[:)pg_r#,Ca\1WGBD=p9X?i?3
.e29s[]k#'n#J(NGZ;Q%/2pk?VCEBqncU@f*onUKcT=6o8-I7nim%hlgQdZRNE-VN4o!2m')I_O?+B=q
gNL,-XZ63?_S2pW\;9XJt=DS9tcbs&)=]MTXT!X7$t=dYa5V=^D'gelqs;"C545,R/HGbZ--"6M43YPl
6)g%@L<^FpF6+XN;.OIKHYrZAni:=#p;pqf-jN1*k7$s]F\nt4,&qYGA`8PhYs_`3HPh&%jlg?Dlg>^I
DR[6fZq5T'6WV@8urEK$u&8@R_'10f&#RiDA-a54u%NL9K>nmE=.>%k[#:>ZH3HiBRdrm2@qKjqoH-"W
61QlRQuRU`'D/PVeIC"\'c;u"1iKgq0`8V_]8@UO<0QD1-rI;c#N^Hb9OM&<`IEafmQ^-l1?d8eB`Dgu
ZGf]<D9\p4Q(I4$?r6%Wen+S:k;IbU":CDm%8`PE-0a.![CkD=tY/T2`6ULN\gmrg<QHq9=1WfTY51YZ
G0gAnf[U_eErXB7VC&o9>g#T1.5mX,!L[.o^d:np:*RK!7MN5d_mmX,'V[.opeJ.7qlek^45]n=P(]:'
iUUKPYI[12e[GKesBhX7u+ngep'U^]GG@j.=N%@q$8o/>6IeUdcX#oqq2Hb;?o$/UD1RtVBOSm_5T@pd
Kc4Umt.$Sq3OjNK@he'#IbGC7_XmI/^On=j7X1.*no0<$]P@8%V;eL(%7)@Z`=B`q75dp2kjA`0_QjNE
k?PKLefWqV^(Z!1:5g8N@fF23a)0f_%KMCUNu\4nWqqg3d_\]pF%SjkcB=_fu,$V2M)8-*qeg?^?EER5
3O=T/Y7KufA;adHDEARIB$/PCH;]tO8blcO&9mVrj#R'MH;"_MS,ifhLb.X@%+7>dgSc0r7L]]-j+>U%
SbN]2jWg!e6uVd>s]?i/``rL"M,T(c__;rLB/-<-,\ddoruW]=C=JB.M?4]P$rG(ISO@;b^F7T8:,`@S
@9B2#KN/0ck48CW,X^QiNQEFF=cE5Z;XAX=8?#n&A>[F@5U55tWMe$HBb3;tHaEIJO\SkR7p%$^sH1i"
&?=!,(4.-p(fkenFs>\K`gKp&5OXHAK+Q6Vk7LOBV;7\q,RfQ:R1Za5O[kJrC-*lt/r9UP@?`l1S=a)j
3'rOZD.@mq.['>gU_)),P)KoBP2,`7V4X\^KsT`Brm&FAbN;nY0[j7%;(`^'^eb7$)3-^J8%j@!PtC4T
=4ljlnuGG?&r54>kGL`h(1^)`s=R-]>g,LD(lZa6rG:@hs_J_b.1E6ps!":[7FY?9Q]DZ+L#^:%qGp>6
n.a278Y=+u^$fMG/%No6I".]YJ@>tH<2-g%kLZYn(1K&km#a5*'g*>m`kX6Ma!J83]:Y,h6-4d\32o64
di/:*9%XR\QMW5q5@HFejFL?qa>SXl=EcZen%cL/+cAO[q]m!/(V>a)0Z=]LC;:dM*+jeW$W<dV04%X3
(Njig"IRF*Rr0)M%RNhlW^Wp)jM]/r)YUcYc>%UT4uAY>UbonhC00ouSh!P^l):\XVMm^>5\*%#qd;kE
U*1_R16aBgjeGgT)uYS;3P-&LH70$_Y>%dW.D-8oY`VH<:D@qq9eP7fr,V7#XirhdfC8aPlj1g9[417'
_+^,0ER[[<A["o<09]n^65A^uXn]P*KnMWn#d-;T?9eAUpPji7-4q@-,EH3G<(5]@]FA)f[O&NlG$XB<
V:+r"_<fi38,9R;"]kPu+<bFud-@8??4.+LL&.#d2[,ck2!QdRo&qgZ(f&&j6LeXm[SLQ)^@_&]($aXN
<BauTSjO4C;nCNak((pK%pA4.*i7uj!/*M!QoZ`?&lJ<6Q&Q9A?533`D6#det4%H=pAFRunSf;GIsrqG
`nB4kZk(pKV+@mj8S98t8tOkJ1S7e*K=?A*jLqLq(489#VO>J1jcPk]MY9.]VddjrJ^#g>=B2':4aj]Z
hN#8tL7qn^0IPKB+qA0<-K\e`mok\0kn!4P_K5Dor??\G2NVI[pU8qK<s23$BAO5:e>Fn?r$@LKNH?Lm
,Eq7J8D+Q[-mC%SYMfX*a(C?dZ)lgDZc&7+J=LjgDdV&E$pnXRV<916gB2<k(O4$+c<hMc-B`56au_W)
sO@*l0;Lnp/1ckWPa:\5bA6inCn`ePXg_^7,E+!+NmKqUW8*,d#G.+;-&StBD:J4$ZK@8?H)6\jLkP7[
p.L_mt9?;hl+#R#GbH?OM%)B97QABT^Z))*1IZ(63\i"L>#HenA$GA"7gZ=-tt\9RdSf?3Tfo%OKX1,7
PtW?kPVf;kkrP@XUBf62(83*=T&Bu3A03)&W6NhIR6[Hd(XrGKqoB4.)d=S$`K+Y7qud&ce%USu7!D0i
dJ^4tuNY+;oTr(&WUX,,G+M&SMt4H,UPlB51J@e\@`C5D\"5cPObll#6:1caCEa-SL`dUttRjLahj@QK
_Hg8h%WWpK/f1c]pcR?iGKbL@nRI)\DgW!<2#*C'Mhm-M<Fm^>5\*%#qd;kEU*1_R16aBgjeGgT)uYS;
3P-&LH70'hOd-8oY`VH<:D@qq9eP7fr,V7#XirhdfC8aPg1]!1VJ1g9[417'_+^,0ER[[<A["o<09]n^
=X]P*KnMWn#d-;T?9eAUpPji7-4q@-,EHRS*X"1,>-^i<bCN:Bk8nmT\G@jr[Z;56Wm;<Tkll01R.!'!
G!.Gc[')Q1Kl&Y*qgQ&Ah/qF<i$Dt`Paljb+q$MUSb0V8jo(oMsI3b+=O+EgW/&eoes?Sbjo=@[_D+pm
b6a%W:hc@q\>eXS9X85]=Y*iqqVFofR;p:*PdiHT8UbHmt7X%p>k0#..q?2HB3@6O%uLo8+V)GI+TZ_=
7Uj&C'4#m$+[$@8_6m-I)qikjO8^l52/abj56Nm=&!5$19_d#k:+Mgm5*N8h_Qi8KL6jNB/2&/#aa$Yu
\_1k#B(gS\[s?uc*HAE*M5*B]aR1`7bL!bg.DE3;EMC/NU0OjStD]XZ?QD[Rj^3E[RFI4RlH/IqUq\rB
<Cqlo;&(M@@pmliQqnFf:!dU^CWju+\m-9Ip):[Qk[UE1hg0V0"5\B0@?1b<,\.3ql7"_rTer<NO'!/G
2t_QS9*TuZ+'ac(fVa-IQNBMU2")p!iX1t;Z*Vq<&`&FW(F3.9[u0b?VFJUBOJjY>EgJ4H:<Ve9XQ_O]
i/LBG-@1?"m\9F)PQB3qjQ"Prq2pO-l6g$QL8LQ@/FI'3o"/[1n3,9=T]P#YP"HFf822G_S7G@o[%P6S
=3Z/b9$KT;"1RFUsN69mDDe^mgth4E('$Qa3P`$LIARMDCN;:K/"2SEB`?UJub=&.&dctBucOCrc=&[J
/E2Kh3.)(nM2,cn#bn#.AZ&b=A$<%C,b`eQXf)"Qf3RS;q2>aKl_N(6cpgJr?h<F)/dXWcMJBQEkQ1G&
auQ`*[-q2BhY:_!7$3e.%]?-nR,%[/3^5"(eP7.SF<R&"c6,2(h)O49BCP$OWF;Ifa[~>
%%EndBinary
grestore
np
145.44 271.613 mo
534.96 271.613 li
534.96 246.477 li
145.44 246.477 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 34.1196 330.698 ]ct
[389.52 0 0 25.136 111.32 59.0851 ]ct
snap_to_device
<<
/T 1
/W 541 
/H 35 
/M[541 0 0 -35 0 35 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [cf /ASCII85Decode fl dup/DCTDecode fl]
/O 2
>>
%%BeginBinary: 1
img
s4IA+!(-_m"pYD="pkP?#RUnF$Omj^%1EXS)\a"u(*FVA+s7mJ+!`6k/0lPs-QaE^4Y8BG2``u\,:buH
5<)"e3BB,!gAjSA$47+L$k4*c%iRAQ+!ij)2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZSs1eUH#QQ(N*<Q<d!!3`5!tbS6_uLYT!<E3%!<E0#zz!!*-'#71@J!'Lkn!<WB*"U,
)5"p"l.!!!!"!Ws#;&ecEC!!NQ@5mJ/L6;\IB1.,K$1K%\e,ZA]FU%#l7@rm7L-ND!a'`e=9zzz!!!!#
s24mO&HMk3zzz!!*&Q!"8r1!!3`7&HG#qoLi&9=Y2en$sTta`HULV,7ZJbLrqV8KEg7ETr40o$?R`+&7
J!oD-@YcQG=aW5l_W$'mGMm_p9:7(r,rRqdIP!2E>@g]Z)mT0h*1U("q>S9K8H1U?UC[XsLH4L:<@A\\
?YQ/@aP*;)T2NOU2033_H:8V,_5H!VZ9::;+>GN"rb#UZ''7iIe?.1UM35.QsVdmCY`;Ks+]7^I1cAlC
Ej=+848=[;s+$fC\#lf3e-R'UIJa,Db&rqY(P__OA]M80KPs(9Anc:0E+H!-hNKMh?m+>t%ZF8m"tR5`
DNfJ0E*d,ip9Q+93$T*'N.@?@KiN@;?K#$9\&NrF;_K^#s\pk-1&#As&FrDp5d?lOf@t'I5G0H5g)2;c
_A2it9fc!;E*l]d$7G&fDit:>4N3[%u/\Hc2]k5tZYF\5HdWSA<@<JgC)bq83+PFH3q[ch)$A8FJ_:(e
Wnp^)2J]8'JIA@l`0NTX(G]`+X:8=DAPET]0BS_Ui1?S1#K`)=!WQ9$JKaVHi"lFRHt-Z<oQLH=D]S`^
#rO29_PZRdVRV-&/R(R/?k6I*5tHldg5:2`'j6De<Y*A,cOf?`[s+^;3o;AP>1u;"38^>gjkF3%$4LJg
TBu,hnRU[k,"BK'c3L-\p.;bVZ[$>$.Vu-O^kA8bd<R.mnH9\W:H6q\oJ7iN[fO[hGmYQ@>%HB[=f_EP
&uDmP"H?Ip>"'BB_E\YS,cc/h*]R%gO^[-d1_JR%-1\-`4-d!o(4:`&.#CioSH@4PIr0@W:KcT"3qq'M
aLs)nXao)?0[Mf*ZX"!9V8a].pq2M;sZ0a':(Fn'Z@dndD;gBcD>%JSs:?dLY?-mns9`)),"jn`E?2&F
p4OIGNP2:?PN+WC'-0O-m@"A+N)oS96+LbP\4rYVCW`Ze%;*l\@3:I:LO,l+-foAn-0/iQU8,q69_9k)
ZTdfFFRgVjuOUG](q716rB:\kWfqPo12YFOr3d(s6iG1kuZ5L6U3m%N'4<!A+@8/d)4_KOkJ>!e[h#hS
[>+C^t([m5SIQ236X)T+ddL`8pF:c!Y8IN%+RgCE4Y$C]tqD8`=jDdn+4"V[M=W5QCj`#g'k;S>.3JMa
\f;T'Nhn<ed`T,JYOu9S;d\@.`b@"LsZOHgn7p0no,8#e#1mJ&LNS`2C3@hhCtrBcSOLAB]OoJSJIB-\
^;qSuoGcRY<E3&j/Y8,TE8`Oq)G&;'[QDP*Xl3UPG:\NT/Yk+&fbD8L->jgnLN63T`r2%uK82]<@(9i@
C;18F_-Sr6(s$ZT1e!iPRh8`V,:ka2QUTc7JdoR/5-'J:tA8_g@rP>2I=J)/a2Wpp!V^';r!$6u6]g.:
K@8e#i)g3)o4(Al;</VcBJ<TEG:s-7p[2ObX?l*uEZ%ENsZb=MIGVm2I"MeifX`mG('eM6,ff02!K55>
5^o6m2`BfjUeB`!LOb`tW)N=^8?a+LXN8#`&H\/b#l3*XQQKn7(414tFB2d26kf6q1%Y(1F\'NSY(BM0
Hp^='a8b,!&+]cNYG8h;H9P!8?nr%R/:E*'saFZV],niWV@WgP@PXTf0"[LeD+g#U"X)JI9$.>YAcG%<
!SaF+(1+=`M*3U22D'+qb3DFHoSP8rd&/mkKgY$rMdm`HHFXdgd^;.(XR^LD:lY`V/.2_8Fm,QsZR7BD
#$8>$F7?^%BdWDc\.eD/-$EE/=9sli#&o;Hn&W*(JD\f=6Kg'\6i)5m_4\[:)<5Em+\\%gdK"rrBL4IB
/YD*l"T[5.^aoSZ8pmpNZ4Rq\+O7X@S9uoA()QNgg0U1gD"sg?L/RdSdrEiWNgA7A*#7!(k=("@)r4&f
E(1#[>GM<n!8m!-Lh_4m1G#8CM0Wo=Yt3=@p<78B]r#k$8YnLrqU]PMV5\$i#"q3lHEloP=XU1.&LA[C
X1g8Z'N%M+Ab@PlNUZUr;FVJXJG96"NbDLsYGNYgb*j6,^X0Ks&5]3)DjI1Y"9,Q./3^oA>+PY$2_$Lb
j.#bCAY1SYL7I?0&ucYgpnf++M7jR;>:iHHs<?"dLk*qa8DI$0@?G^C/L)7V4CYb\=4j_@%i%h;j?Gk"
=d(%[k-n>$MXtr`P_2SsGh7RJ,JrZSU^JrrC%lehj#V@hWo)d`1u<rrBrGqW2TB>CS4&-`4]tD[Qa&QJ
PCJV;&!&=o9j&;UZ;6%$[Rc3>*O_fe(!4MJ;%e_98"`o(jc3-Ot2(l00&mccP<h]>':%4oYLt0C+BLD#
G_3G)=U*@s<85_a!.,iD-$CfF)LD/]9L9iSrtE1-F:5Jmr\s17l&<&f"_=FM@,eD_#cYgSu/Xr)90O5`
*B*$@k<&a<)0C?Al-/]@`]7qoj3"SUUMbC@o^IVDk_65DZYt47)9g0m%hRc*/6TGu)&a&FnQ@:c0Y7`\
I'#`(YVnMmJG>SO%["3OmH*h4tNl//p<cS08b"1*f9PY$gnWrrBA[]oR-pE4pYOI:Mk=eiN/@DL:#\^<
M5Qi-hL2ogZ4`lj",]V\d6AE>2Mh9i,6VLEb(Xcm-Ec5_>[I6?N:$Ukadh0\Y5p/HjS^HaK^O!(oNp3!
N<GA.ETnc\]s7@WH^-k--]5`YA?o23*gM2D-9L?Ml>tbi*q(!\L%4+7VAX!g)YBFk^+N6WV\Ki"=?`62
-QsH?GX-[4[c/_X4m0<ng5@6C6X;*[>H`%F/3M#<4!-Oq^7&,sBkor%I%S8Ehr%-=cu?nGBBSicB?:jt
G.F?\q!&l&Vpk;m6n#g^Ks5RWXVJg/K.m\J,>qLImu"<(R<Wa]-+H&=1laDf[c$>M6<%QKG0=M\Pu<3d
TjT7`=9'4l40ONN1%<eg/Nlq6$+]cV955L-:NSm:eQ4])Jd<V!7T4JD*gt_csgP>Mk6UWRi-6VIK3ZXV
QTj+:Va6BhYBI#VEL.%6U4)9;PBCZRQ=)jf))\Z2akm5QCh'L::`qHTr>$R"lIk=j$YKQ:+,iR*TH(0\
aC_mfk5Z]AgFQY3C]R*?l_9>)YQVe(rs$]+TKmIX@eCj!]_BULT*FD:WG?H!EV46CVs!'N?F0Thu,4!^
Qr#!Djq@Gb,=+n[lVqrrBIa[N'^jC:c1UjtXKaMD4DlY0Pc_@DpCO(J_bc/Yl?']UEufp9t'6`ptU9Yd
Ae681$XN<B"25/M3VZhYLs<\#YXC[e3UI3(/-JFoLNH3JS=jd`(q:+MktIXdEIi->3!H`Sn`6g;Wcg=?
'L`S1+7"rcS@+gN^g!2P#<1`$@%6ZRZXo9124L$369U?n,Q/<edja'K3O[V6lJkUj.G.8m?fhbCCl",Q
](g'30hV]>oiUfUN@%@ROWpT'2fJFP:<p44/O8KU`E,N5#idA^N_EN2'b`L.Ui#(@m^?[,h##F\%$GkL
Zn.dp`q-.9@1k[ob421t^[T.0L2[TE]9JjZ1UoAkg)SHdR8o?c10Oeg'=,ULGEGhL"`GQ-3Zb0a;NVR;
`#CF0HTLAPFh7&F/J`e1!cJ'+/Um]*$"15l`=Z<6UM+Ba'bWk5.NDFp[8nq7d<d'Ll[i"O(S_ADGtlGq
jRq20-@Mhsk4=>7j)+Za$L?T5EV81Ho"br*oV78cA>b#V;s1GENscR4F_:3bJTWBlHJpq.=KdH<V8*$O
,7MhG4ZYgSrk/r%0Htdh@HEPbe4;':#9&`8&D?Z+Z-HnCYIc>D^qgb<JS_Z(I6(j*,thpj<"k?e5d"g%
nHElk(hb9<)^b_njNZan#9VVC)jp$0eN\5dp(gE=G$TGe%kJ*c5IS0fW+":L)+3KbL1u`pWOJL4@/7_j
s$fZ$J%HDXV%Zj6n_S$?c7<SV"M+l$_8ThH&Q=[o>2:pnp4'JJ3c3'``W,O>Bo\j;4'X]<Mj:cD:V@L5
]Ua0l07uk(pW/l:L6,q+P^7@Xeu&Y'8RN%V"Yu``Hu&DL^?,hT*-I3*s=85-apYlQ(-NW%Y.52]<\U["
6GtK4Za"KHhd47#7Bkb[R7\&%R/phSV7I5,QncRSa%fJ<dRX&-<.<GsRgNmFf&=@H./B#;^r)S1iD2a7
$Gd3K-c6!$?Y!WQ2o_$=I'Sq4h'j1U(Wd@H3\\mfkAR;<#4Y>;:mNbf"-U**N_f^JO7<iWQh*gIMsMUG
eePO;-@JP">Y(U.T:lgd-Y?R[8H5M2-^(J!FQ`SS!>WZ#0_%m<eLY\%^U<%CT.]_IhA^M#g.H8MVV>;d
cg>/[Yq@\!*u&^>!T2>Al9bRhF.skYMITeeL*t#q^"q53D]aep"07Jqg[$r&?rhEcOCs`mr%`;Z1H\6^
7K,L"b!(cO,+8+[7\3N6e!cg&c#T.Ke4*g7cYpj\H^F\+40)'Bctpl_[kh;VQ71Hq*G/p$JG&@4c"d,Q
O]lS(:P(,<X%@&:@CFmNLSF(Je#b8Q,pcKHt+Z6kaX.&."I&KS]g\FKAIITAR$d;-)-k/VH(A_3jbcB6
oCmOe0"t$9&'A[eDb<jj@$]g0A'nGQW4%HCW7'P7a@lDIGr7+BWl[oJj8d)S2Fh^^05<M>)YOVb,KTKn
m`F'=bK<%4P9/hWZNj&lt_::'?E4UGWIr["f*94lUa/V5Ec"8G>CL!8Y_g)"d(cf4/\=i2!j#0.iJdfl
E[4aEArfOq(,U!.gA^6S[O*g<8bq*(JteU;Kj)<C"F?MiH#un@0#1#r0t,#Ur'9Qdj2_mDh]_1WqBBfo
>6RB-S:E@Wg9G>&dcc9sMI)E>3R2e#@&tk$XQrA02//!C8_pBEVLk:9)!%;X]C2p2L<<`MX68N=*nk"#
)L$IXhhX^8;e)/j+>5f53=(VD6@sV8G*-jcD+;H3IlH0lU<qFldT=h6i$(59!6.[7oPC+Y"_WO<uP3Br
;\LVPs6Ic7a:A74c%0A"3*Wbiu;sHtVZ<D^qQl79*1MRuqS(gSn<#VatZ>R4+I>H/].qi+4NG'%3@rnF
:PK^3ndo.[e/DK"C2$R4Z4)[ZL*uLP(o&q!r2L$CSf%MRmCH,c6?]Z7)&;l.h!:0iW9tr`NLNPEl)gSt
r9Kfi8]./uN^p")=hS\*DUNa@*hYb:u.X#Fm?3fq`cOmK>Ug6c^@$F1iu$c585L5k&@da]N2A=B"SS`u
Q+i.KZG`-L:is%@NU]cjdP+:n$FEV,Oa#Dn:qNLBDGD+D4?Lc(S(!-3`9Z8-es'>u_N.UYUtjS^`o-]^
':DPat^)3e)K(01:J9AVE8'j)NP[5TIq6:*pI7KP*/3A-n6<aIHQ<S4=#Jl]cX.<Dd.5L8NB5d3llk6'
@?j6F@pr?$0*RG+3P8iSEDnqhRup.lrn-F!P?eENd`[EEftK0t89Eb!O`d6BEq4Bd;IWPN#Jk.OiYl30
HX['X5D&iHH(/8n]]P$f7^&J3q[Uc,)8qk9=skiE0Wg]'_0CXfJH%nVHD8,^[Y#*I>XpXuLWN.,j?Tqb
(T_;',Kk1%.CU23B/CkMk+QWc6=Ih:Ium\!o!6POAbU;^=^/STN""#&d.'V/X&,<)pHVPu*b@Jqo.gjH
45E!W^A6.3JbY+I0CfA^2?>g5Y+O<*r#'Q&-W_csjrt!W^Ct;\2&JYEHeELL,#0VP1CWqeP_W1-YA6Mc
L+j%&PS+&deYKPVZ1Hl5Zn.W(BqOF$+-(>/jSk&HHC=YlIr>$Z,p"G<;t@]ppGf%ViNKYt'lXVku^Qk&
"d(=F58'l^RE^'Y<%e'bM7YeBB'B"@3qu@cF=l6Gih]Xjp80<qE7;)5fZ7CO1Aoo^pTmbhBsK@^_#bfD
!JV=R.K\(*_nlRIDL&a?Eb!($$o$KqL?YloO^IJPMH>dY'$I7EAA='%d<uA:Oq.Wp^Sm@H3\\mfkAR;<
#4Y>;:mNbf"-U<&bN>FmRVh^%gWTCLogb,?B[K&qnJ]3D@Su2_bLQ5&+BshBj9PFoGC)(3Q&AcG:K($Z
<^UlcJ,h\e<ag&tl!XTa?epf`71,!.^e9D=H-mg4_oKak'_RD7B["\!]q7M.o.q-j(a\$CbmcQJb\:f=
t5LHgS9rgLVRF->dHFO;*C:P9OII2N')D%]0$UqM-No_[ElL;4\L"-piAl<uIVhl*LSH>2*/-c1L>'mo
JHP%;LapE.I`EjF=FoWg;D,bMkHdVlsqD;[I4`JKP+Q"Q$GY!?(#d@"[Gf@\>ka]rE'KhGj#sgOCPlYs
*NA5.Y=0XAoLthmEqk<mr<GKK%l+R.6h^HAOPBT!lHB2[$cTLj5W4e($A)<5MMk#oS!8BfA%l!/WC#8<
?0($P*p-LDIage^WOP!?G2`T6NL[FIdTK_cqJX7.TQA(i:lZg,oDKLV6GpjiN>(fs`Z0<^VVST(+qS;U
]lL,^Z26mc70&H?B#LYRn&7$0$.EdfH9pRiC00?iisM6-6p)0pH:DQo;t8?W0MT7ib#6)N?5H"r8apDK
ZPE^jl\^NiIUq8h4d"i2!j#0.iJdflE[4aEArfOq(,U!.gA^6S[OVijXf7@t-W#.-rI^;U^9B_(ali4r
"&!Jo^e9#dj[O=a`uO^>*sN_`Y6^9pje)VK+DY"t*\s'nr"(_`PiXNojO4VK(,*3Qfj]Ao7IO"kc[:UJ
@i&9iGtcSG$q-!QCrIRZ.ZujT@1lSUQ+<MQKfVHc>.a\lPPk?#_UDqB9Hmf:]i6oMB+c0lU<qFldT=h6
rm9O2fVdX]%2ia@_9Yj9^`;KX_^/d[k^QnT*-nI,9]0RDPJG]'1r;dr-_3[ma:nl^O#S(>>`icDO3MC7
-K<(O>!HlJrI)A5OtUe%#jR@]8Rsr3El&-S,&X4\/#O&/N\8G]<.mf,l&.AKau3;it-T`5InlS1L#[Ui
kbd"?UHfa<-"T]dQk*(bcXhn7D^C=CjUlb,Cf/FZY[E)c]dYDq2)&OGSO<QV$J2j/SqSZrCtThW7+U[q
ZI1V:OeUWQ>eTn!>:%r3255Yc$11N]]6]<!>nJ:"T]p)`'5ETGqs4Tf(Ad'_?[2a,]NeF"1TXQo[fPc>
&<Z',p2!3pNZ.m2kV>`9sEL-0JK,gna5"):SK93I2t:Wh<:tgR747mf40Z6?,"ge=`"n,;M'7IY8r(^f
-'JV]Bf9%4\A/$rGI-6CK1pS1$-j-R`#k#7=R@Oi$N<k*44m:)CT95lcV7PFI5<)9tY47Fg!)]9M=pJ`
e#K/VV\'!umPh4lQc3,q'D#SEJph,WKe]]?*PR4La$K6->#X_7>VQ#s#)D,\K=W^CUai,sBk"Dlmk^:^
;qL7@>CW9YfuF,"0*r(6uc)3Dii;8l\2ZiX-_MH]gh#>R1E\+JaN#</RR_#p%iIF\@"cj68bsJ)rFR0B
q(^U-PoF_fLT>Ejhj=[5e&!nV8k`oi[2R#db#;/:\??![V]l)0:S(G,':APo%m:ARH,XSH^WA:`p1Q"Y
g+r6JFb6h9>2gDeBBr6^k/A/5bI.l049C4&E1S)5u>5%TZY1UoEuHShs-C@k/6'5\6ds!*V_,!K+#0:u
taLW$`I\5&>"\I$XEsdlGVsCI1q:gV)3DhhuHMf%e?FLqPF<@0fCJ#guWf'ggmqJD5"HlcS2j3`>!1&>
Gj7+\A%o?k>Ve!$Hlo]NT/\Up4,k;!\#?pFLHPjbj^k(7FY<!6@?,T,$E>+i'D5Y@aW]n&HEc>:L5))R
N?qPU9oYb%=Xn\0^@Va"G'^$sR\G`HUCO@h(;_LsC0'ZkhJHU">LH$$7K%O<m1^D*emY.C&t"OoYSOPh
Y0,K+";/0)K]'%gG)p!%Q*K3m@P8@b_<)g@sl<Dgf(V)f2<EK[$VF&d"/nP%76[VU8ck>A=l`D^Sh+IC
A&B[bbRO2C50pd%Cf2X=A(q&mF$lIEhEMXRB3M"V#4'pi(cYjQ(fqNN7sIV>ApBLFMu8$alj/SeV)N6@
NBF)4rkPZilVu:`l^oeIGLG.X8dH^QU]\T0:mM>r(%>>Adq(Lu!6G]sK(Z-*2t,J/$?DHHM$HB:0'X%u
O[6`&plUl0=aP.UaapKT*Q\_)FAo!0#itOW]?1Q&;7+qt?`+.b\EeY_N'81EJ@]mnkF[1Y12%7c8?Y^!
7gIFB'kMQPaQ\!8^*"V_`AS`+No@Qr,@>(*4j:%P<AXX/Wr)!]mDK54El?krS3.Yk\UbG8AX.V(.rRh'
HG19%6/K^l^@9AtbSMOQ!Aj]MC/E[,*#6*p=^C\J+!ESNaXOD8X"#QM?0qZH=+=;pVua`;@tKa_:_d16
76'4<YYHI8(rC*-DrtC,Drh(g+%_\^D"B^lSgnNiIUq8e!>cVHVkp3]CK==`:1]DbO(i(sE'qY.4ngMV
]h"NVrC(UTgnl926!R"N--?pf%5#$-Vp*+qSJ==/i3:nFN6s+Q,5diU]p?=e)-s##h_P!JQli_`Pu\No
jO4VK(,*3Qfj]Ao7IO"kc[:XKpt@$WSglXrglVe%Ds\g/sW?B+117;'%iN0kk]'33(Ld8%`/JH_kI+A_
.S8hkCm!9mR3-5=HN:<@,4+WeXZd(?',1Q&P!ML=W>eM33"R!%4guPdhD?d[k^QnT*-nI,9]0RDYPH]'
1r;/\lnFORpAFK9iY0jOR3D1P[t*FNdEM9b/[`;(e]o\I4d6W9UYcZFQGP/,JKn8P^e@W[@"::?2lheP
nDEeZcTGM1L/C8a;C"iFK[I,HiJ6+kp`Q5l;:dksD7d_186bK.md-_`Y6AT5/U0khPE!'e<uW?lq(=bf
AjrD9b1qf,[j@SYDm-e8A5F)g7nW3c/bO$Cm540)9NQ5Kc+QW0HZjm!6P;UaRPP>><nKlBE18qq3uU,S
$o[VjlIZ3d56>R8XF1_:!:]k,?LT0s8&.FUhAL\Ru/4^<NWUl"p]OUlkaM$<sJ!-lF-BGtEpj>odoa$?
hn[4Qj&d"nrRu:0)Kc,j%YAN8n9=`Cn`CZ-3[n\uCjS\!t7s&DDr%TVC^-<hr<ZM^"lp+$BQ'eF#'Sq<
r-kB%q7cRFBS8NJm0cN)s>Cj_p;s:n(@s=e(4l7?Q3qo\$Qa;"&,R@eFM:Nc1(q)A%Vnb_R//Z9&!cZ*
F;W\Ak8BR]!X:;p>4Z\Rn:F@#3LB?rZij`\gPrqtoHR`YEPejd?mVZ9Fa.4&4fSeZucWnlDV&F(A3)/N
II,5+=HH$Js7A`kN%Qh^*M>\IhNX@/ArDQ2RV#Nppm;eaJ[.-!)?!AlArd,Rp5$$X_V;)/f^H21+DofM
GOfbbm2o&[JaMr\CUQjf5f3>>bpCX!:=q7a7D(VmQFYWh\Yth^*)("U:6^^sYr@[<K"g1O=tBGC5ZSg(
@bjB.u.Fff_Or2J`ruTuLi@jGs$_T$&\HRFBT#SVc`$N6t#7-[_%P@7?]m3ZaJqm+JUDHVi`\.(L\6a\
=pp+Te(%JXHMk,@@n-QaH`IUnm*$pW5c67D,ZJ-X?#/Rl1EdC&DO0:Wq2TP(od%Gud\OlA_#KVt$)AA@
"e?95Tq/&8@P5B2b60VTkS5T^=h"GBt$^:%D,GWoX=Vb,"mrK<gEBmP1ESj`eg9.^!%*19!IJULqc%8_
SA*dCB(<gZ5&HWojmDaggN*B_q`/Z*Kk+mP1Q:I\Dbl;X<IM="MJ'rr>BFRl1?hVf@\Z>LcGdP*_d<7<
6VA^;U\hY1'o"Wn2#jh]u/^Ro[7+P9V]G7o/$lm+JTVg34C2]iE23-^e.T;YapG*g'uTg&D%N\At6)]s
;pQD82BL:IqcLCtK-_4,d6IMWJc>C/CBt^0-t\Gt!kIp@R#+C#!1jCK6C5P%kmHL%<HD)>(3qrrB=1B#
&o'mP1Z?AuY1g<:`>/Y$$m*fHN4Qp792\:U'`njJg-6F%YP^(8'e&o\$QY<d(%R261;2463M;.d"gLA6
O$",^hROp792\pjCZg/&G<-MIoclf-G1cYUfTGiuR(3>H?X-BM,Eu'[3EbY"0L8rmUYcGVU/;h^-:ZJt
nWC3KNB`Rl1F_C&DOH:!6OTP.%/*GudD'BT89?Vt$$P+"7-a.q/K,1p#gDP&-\Y2@Anf*+nj[,jtIXVm
IYc9[7$Z$*nko%r*(rWZF_"P%j9gc<6]$-HXrI?mi>l1IVg"Sao34Kbe^Qk^#se[:clW1Lc9*CODAqg/
8J2RE-8-%?`UGCtZ$b?IS\lP*;-.h^&[s(@nPoSTD)[;0JSO<&FNd0)6o18[jsql`R2>ZX?UQT>k*KP0
G'D/[eVX6)J3rSPEi^Rn=1>\ArfeBVaN3$!OK.1sDsqY%TmTC^MfD\Aj:?Q/<l)Wk!1Eb,"mrNKg!3EK
(ou\P9e1(Ab1QRV#:74S)(prJd:)"ZL/N@nTYs6Q>*_f?Cb-=d*k)Kc:lr4,dn=hPt@=Pe?bM/!a`%p*
boi2?R6_EJmi"f!i@aW-(##I'Y.h>qD#.^T#kWe%!@SlE3nX4Nc,fQch1PoSXrkc'nh7Vf@b^c[03o2V
W^4cCU//CgUo3@_225.t!OYK\D^^biCS&/<7KSVTkS2hUB!RlIN!Uh^$].+UdD"&2WQ]FoMGOA,W<FNC
?c':N)DoRJ\p_b_pqd&[Q)bWU2d+C7er/pW6?m.d!#>1+b`;,O)M?[-fZNEL#&BP-m!ERj+8_C!/W$o\
$QY<q`*(2>DRMq('<^aGOS.#M15;YO+E1GCsUIYC)ZJQ!BD"R7n]-O>^q-/UqL4A\8lheaJ[]@6mc617
ZDW7`s$*pr^%7QE&ggD+HSUXGo'a)`DL>T%!JWWfNCCh^*)(()g4p"%bCGe_\e8c0?oQh==QABLRZDSA
<JbAG#ccfs!ngTuLi@jGs$_T$&\HRFBT#SVc`$N6t#7-[_%P@7?]m3ZaJqm+JUDHVi`\.(L\6a\=pp+T
e(%JXHMk,@@n-QaH`IUnm*$pW5c67D,ZJ-X?#/Rl1EdC&DO0:Wq2TP(od%Gud\OlA_#KVt$)AA@"e?95
Tq/&^)r2cDNK@9q+$Os4I~>
%%EndBinary
grestore
np
grestore
145.56 238.337 mo
145.56 238.098 145.68 237.858 146.04 237.858 cv
153.72 237.858 li
153.96 237.858 154.2 238.098 154.2 238.337 cv
154.2 270.057 li
154.2 270.296 153.96 270.536 153.72 270.536 cv
146.04 270.536 li
145.68 270.536 145.56 270.296 145.56 270.057 cv
cp
146.4 270.057 mo
146.04 269.578 li
153.72 269.578 li
153.24 270.057 li
153.24 238.337 li
153.72 238.816 li
146.04 238.816 li
146.4 238.337 li
cp
187.92 238.098 mo
187.92 237.739 188.16 237.619 188.4 237.619 cv
195.96 237.619 li
196.32 237.619 196.44 237.739 196.44 238.098 cv
196.44 270.057 li
196.44 270.296 196.32 270.536 195.96 270.536 cv
188.4 270.536 li
188.16 270.536 187.92 270.296 187.92 270.057 cv
cp
188.88 270.057 mo
188.4 269.578 li
195.96 269.578 li
195.48 270.057 li
195.48 238.098 li
195.96 238.457 li
188.4 238.457 li
188.88 238.098 li
cp
230.16 237.619 mo
230.16 237.38 230.4 237.14 230.64 237.14 cv
238.44 237.14 li
238.68 237.14 238.92 237.38 238.92 237.619 cv
238.92 270.057 li
238.92 270.296 238.68 270.536 238.44 270.536 cv
230.64 270.536 li
230.4 270.536 230.16 270.296 230.16 270.057 cv
cp
231.12 270.057 mo
230.64 269.578 li
238.44 269.578 li
237.96 270.057 li
237.96 237.619 li
238.44 238.098 li
230.64 238.098 li
231.12 237.619 li
cp
272.4 230.437 mo
272.4 230.198 272.64 229.958 272.88 229.958 cv
280.68 229.958 li
280.92 229.958 281.16 230.198 281.16 230.437 cv
281.16 270.057 li
281.16 270.296 280.92 270.536 280.68 270.536 cv
272.88 270.536 li
272.64 270.536 272.4 270.296 272.4 270.057 cv
cp
273.36 270.057 mo
272.88 269.578 li
280.68 269.578 li
280.2 270.057 li
280.2 230.437 li
280.68 230.916 li
272.88 230.916 li
273.36 230.437 li
cp
314.88 223.495 mo
314.88 223.136 315 223.016 315.24 223.016 cv
322.92 223.016 li
323.16 223.016 323.4 223.136 323.4 223.495 cv
323.4 270.057 li
323.4 270.296 323.16 270.536 322.92 270.536 cv
315.24 270.536 li
315 270.536 314.88 270.296 314.88 270.057 cv
cp
315.72 270.057 mo
315.24 269.578 li
322.92 269.578 li
322.44 270.057 li
322.44 223.495 li
322.92 223.973 li
315.24 223.973 li
315.72 223.495 li
cp
357.12 222.537 mo
357.12 222.298 357.24 222.058 357.6 222.058 cv
365.28 222.058 li
365.52 222.058 365.76 222.298 365.76 222.537 cv
365.76 270.057 li
365.76 270.296 365.52 270.536 365.28 270.536 cv
357.6 270.536 li
357.24 270.536 357.12 270.296 357.12 270.057 cv
cp
357.96 270.057 mo
357.6 269.578 li
365.28 269.578 li
364.8 270.057 li
364.8 222.537 li
365.28 223.016 li
357.6 223.016 li
357.96 222.537 li
cp
399.48 221.46 mo
399.48 221.22 399.72 221.101 399.96 221.101 cv
407.52 221.101 li
407.76 221.101 408 221.22 408 221.46 cv
408 270.057 li
408 270.296 407.76 270.536 407.52 270.536 cv
399.96 270.536 li
399.72 270.536 399.48 270.296 399.48 270.057 cv
cp
400.44 270.057 mo
399.96 269.578 li
407.52 269.578 li
407.04 270.057 li
407.04 221.46 li
407.52 221.939 li
399.96 221.939 li
400.44 221.46 li
cp
441.72 224.931 mo
441.72 224.692 441.96 224.452 442.2 224.452 cv
449.76 224.452 li
450.12 224.452 450.24 224.692 450.24 224.931 cv
450.24 270.057 li
450.24 270.296 450.12 270.536 449.76 270.536 cv
442.2 270.536 li
441.96 270.536 441.72 270.296 441.72 270.057 cv
cp
442.68 270.057 mo
442.2 269.578 li
449.76 269.578 li
449.4 270.057 li
449.4 224.931 li
449.76 225.41 li
442.2 225.41 li
442.68 224.931 li
cp
483.96 228.402 mo
483.96 228.163 484.2 227.924 484.44 227.924 cv
492.24 227.924 li
492.48 227.924 492.72 228.163 492.72 228.402 cv
492.72 270.057 li
492.72 270.296 492.48 270.536 492.24 270.536 cv
484.44 270.536 li
484.2 270.536 483.96 270.296 483.96 270.057 cv
cp
484.92 270.057 mo
484.44 269.578 li
492.24 269.578 li
491.76 270.057 li
491.76 228.402 li
492.24 228.881 li
484.44 228.881 li
484.92 228.402 li
cp
526.44 224.811 mo
526.44 224.572 526.56 224.333 526.8 224.333 cv
534.48 224.333 li
534.72 224.333 534.96 224.572 534.96 224.811 cv
534.96 270.057 li
534.96 270.296 534.72 270.536 534.48 270.536 cv
526.8 270.536 li
526.56 270.536 526.44 270.296 526.44 270.057 cv
cp
527.28 270.057 mo
526.8 269.578 li
534.48 269.578 li
534 270.057 li
534 224.811 li
534.48 225.29 li
526.8 225.29 li
527.28 224.811 li
cp
f
153.6 269.937 mo
161.28 269.937 li
161.28 238.217 li
153.6 238.217 li
cp
.391045 .393769 .400815 rgb
ef
153.24 238.217 mo
153.24 238.098 153.48 237.858 153.6 237.858 cv
161.28 237.858 li
161.52 237.858 161.76 238.098 161.76 238.217 cv
161.76 269.937 li
161.76 270.177 161.52 270.416 161.28 270.416 cv
153.6 270.416 li
153.48 270.416 153.24 270.177 153.24 269.937 cv
cp
154.08 269.937 mo
153.6 269.578 li
161.28 269.578 li
160.92 269.937 li
160.92 238.217 li
161.28 238.696 li
153.6 238.696 li
154.08 238.217 li
cp
.136538 .123054 .126659 rgb
f
195.84 269.937 mo
203.52 269.937 li
203.52 238.337 li
195.84 238.337 li
cp
.391045 .393769 .400815 rgb
ef
195.48 238.337 mo
195.48 238.217 195.72 237.978 195.84 237.978 cv
203.52 237.978 li
203.76 237.978 204 238.217 204 238.337 cv
204 269.937 li
204 270.177 203.76 270.416 203.52 270.416 cv
195.84 270.416 li
195.72 270.416 195.48 270.177 195.48 269.937 cv
cp
196.32 269.937 mo
195.84 269.578 li
203.52 269.578 li
203.16 269.937 li
203.16 238.337 li
203.52 238.816 li
195.84 238.816 li
196.32 238.337 li
cp
.136538 .123054 .126659 rgb
f
238.2 269.937 mo
245.88 269.937 li
245.88 238.457 li
238.2 238.457 li
cp
.391045 .393769 .400815 rgb
ef
237.84 238.457 mo
237.84 238.337 238.08 238.098 238.2 238.098 cv
245.88 238.098 li
246.12 238.098 246.36 238.337 246.36 238.457 cv
246.36 269.937 li
246.36 270.177 246.12 270.416 245.88 270.416 cv
238.2 270.416 li
238.08 270.416 237.84 270.177 237.84 269.937 cv
cp
238.68 269.937 mo
238.2 269.578 li
245.88 269.578 li
245.52 269.937 li
245.52 238.457 li
245.88 238.936 li
238.2 238.936 li
238.68 238.457 li
cp
.136538 .123054 .126659 rgb
f
280.44 269.937 mo
288.24 269.937 li
288.24 233.908 li
280.44 233.908 li
cp
.391045 .393769 .400815 rgb
ef
280.08 233.908 mo
280.08 233.789 280.32 233.549 280.44 233.549 cv
288.24 233.549 li
288.48 233.549 288.72 233.789 288.72 233.908 cv
288.72 269.937 li
288.72 270.177 288.48 270.416 288.24 270.416 cv
280.44 270.416 li
280.32 270.416 280.08 270.177 280.08 269.937 cv
cp
280.92 269.937 mo
280.44 269.578 li
288.24 269.578 li
287.88 269.937 li
287.88 233.908 li
288.24 234.387 li
280.44 234.387 li
280.92 233.908 li
cp
.136538 .123054 .126659 rgb
f
322.8 269.937 mo
330.48 269.937 li
330.48 229.36 li
322.8 229.36 li
cp
.391045 .393769 .400815 rgb
ef
322.44 229.36 mo
322.44 229.24 322.68 229.001 322.8 229.001 cv
330.48 229.001 li
330.72 229.001 330.96 229.24 330.96 229.36 cv
330.96 269.937 li
330.96 270.177 330.72 270.416 330.48 270.416 cv
322.8 270.416 li
322.68 270.416 322.44 270.177 322.44 269.937 cv
cp
323.28 269.937 mo
322.8 269.578 li
330.48 269.578 li
330.12 269.937 li
330.12 229.36 li
330.48 229.839 li
322.8 229.839 li
323.28 229.36 li
cp
.136538 .123054 .126659 rgb
f
365.16 269.937 mo
372.84 269.937 li
372.84 230.437 li
365.16 230.437 li
cp
.391045 .393769 .400815 rgb
ef
364.8 230.437 mo
364.8 230.317 365.04 230.078 365.16 230.078 cv
372.84 230.078 li
373.08 230.078 373.32 230.317 373.32 230.437 cv
373.32 269.937 li
373.32 270.177 373.08 270.416 372.84 270.416 cv
365.16 270.416 li
365.04 270.416 364.8 270.177 364.8 269.937 cv
cp
365.64 269.937 mo
365.16 269.578 li
372.84 269.578 li
372.48 269.937 li
372.48 230.437 li
372.84 230.916 li
365.16 230.916 li
365.64 230.437 li
cp
.136538 .123054 .126659 rgb
f
407.4 269.937 mo
415.08 269.937 li
415.08 231.275 li
407.4 231.275 li
cp
.391045 .393769 .400815 rgb
ef
407.04 231.275 mo
407.04 231.155 407.28 230.916 407.4 230.916 cv
415.08 230.916 li
415.32 230.916 415.56 231.155 415.56 231.275 cv
415.56 269.937 li
415.56 270.177 415.32 270.416 415.08 270.416 cv
407.4 270.416 li
407.28 270.416 407.04 270.177 407.04 269.937 cv
cp
407.88 269.937 mo
407.4 269.578 li
415.08 269.578 li
414.72 269.937 li
414.72 231.275 li
415.08 231.754 li
407.4 231.754 li
407.88 231.275 li
cp
.136538 .123054 .126659 rgb
f
449.76 269.937 mo
457.44 269.937 li
457.44 235.704 li
449.76 235.704 li
cp
.391045 .393769 .400815 rgb
ef
449.4 235.704 mo
449.4 235.584 449.64 235.345 449.76 235.345 cv
457.44 235.345 li
457.68 235.345 457.92 235.584 457.92 235.704 cv
457.92 269.937 li
457.92 270.177 457.68 270.416 457.44 270.416 cv
449.76 270.416 li
449.64 270.416 449.4 270.177 449.4 269.937 cv
cp
450.24 269.937 mo
449.76 269.578 li
457.44 269.578 li
457.08 269.937 li
457.08 235.704 li
457.44 236.183 li
449.76 236.183 li
450.24 235.704 li
cp
.136538 .123054 .126659 rgb
f
492 269.937 mo
499.68 269.937 li
499.68 240.013 li
492 240.013 li
cp
.391045 .393769 .400815 rgb
ef
491.64 240.013 mo
491.64 239.893 491.88 239.654 492 239.654 cv
499.68 239.654 li
499.92 239.654 500.16 239.893 500.16 240.013 cv
500.16 269.937 li
500.16 270.177 499.92 270.416 499.68 270.416 cv
492 270.416 li
491.88 270.416 491.64 270.177 491.64 269.937 cv
cp
492.48 269.937 mo
492 269.578 li
499.68 269.578 li
499.32 269.937 li
499.32 240.013 li
499.68 240.492 li
492 240.492 li
492.48 240.013 li
cp
.136538 .123054 .126659 rgb
f
534.36 269.937 mo
542.04 269.937 li
542.04 242.766 li
534.36 242.766 li
cp
.391045 .393769 .400815 rgb
ef
534 242.766 mo
534 242.646 534.24 242.407 534.36 242.407 cv
542.04 242.407 li
542.28 242.407 542.52 242.646 542.52 242.766 cv
542.52 269.937 li
542.52 270.177 542.28 270.416 542.04 270.416 cv
534.36 270.416 li
534.24 270.416 534 270.177 534 269.937 cv
cp
534.84 269.937 mo
534.36 269.578 li
542.04 269.578 li
541.68 269.937 li
541.68 242.766 li
542.04 243.245 li
534.36 243.245 li
534.84 242.766 li
cp
.136538 .123054 .126659 rgb
f
124.32 269.937 mo
124.32 29.7051 li
125.16 29.7051 li
125.16 269.937 li
cp
.597832 .603409 .617693 rgb
f
120.84 269.578 mo
124.68 269.578 li
124.68 270.416 li
120.84 270.416 li
120.84 269.578 li
cp
120.84 235.225 mo
124.68 235.225 li
124.68 236.063 li
120.84 236.063 li
120.84 235.225 li
cp
120.84 200.872 mo
124.68 200.872 li
124.68 201.71 li
120.84 201.71 li
120.84 200.872 li
cp
120.84 166.639 mo
124.68 166.639 li
124.68 167.477 li
120.84 167.477 li
120.84 166.639 li
cp
120.84 132.286 mo
124.68 132.286 li
124.68 133.124 li
120.84 133.124 li
120.84 132.286 li
cp
120.84 98.0522 mo
124.68 98.0522 li
124.68 98.8902 li
120.84 98.8902 li
120.84 98.0522 li
cp
120.84 63.6992 mo
124.68 63.6992 li
124.68 64.5372 li
120.84 64.5372 li
120.84 63.6992 li
cp
120.84 29.3462 mo
124.68 29.3462 li
124.68 30.1841 li
120.84 30.1841 li
120.84 29.3462 li
cp
f
124.68 269.578 mo
547.8 269.578 li
547.8 270.416 li
124.68 270.416 li
cp
f
125.16 269.937 mo
125.16 273.887 li
124.32 273.887 li
124.32 269.937 li
125.16 269.937 li
cp
167.52 269.937 mo
167.52 273.887 li
166.68 273.887 li
166.68 269.937 li
167.52 269.937 li
cp
209.88 269.937 mo
209.88 273.887 li
209.04 273.887 li
209.04 269.937 li
209.88 269.937 li
cp
252.12 269.937 mo
252.12 273.887 li
251.28 273.887 li
251.28 269.937 li
252.12 269.937 li
cp
294.48 269.937 mo
294.48 273.887 li
293.64 273.887 li
293.64 269.937 li
294.48 269.937 li
cp
336.72 269.937 mo
336.72 273.887 li
335.88 273.887 li
335.88 269.937 li
336.72 269.937 li
cp
379.08 269.937 mo
379.08 273.887 li
378.24 273.887 li
378.24 269.937 li
379.08 269.937 li
cp
421.32 269.937 mo
421.32 273.887 li
420.48 273.887 li
420.48 269.937 li
421.32 269.937 li
cp
463.68 269.937 mo
463.68 273.887 li
462.84 273.887 li
462.84 269.937 li
463.68 269.937 li
cp
506.04 269.937 mo
506.04 273.887 li
505.2 273.887 li
505.2 269.937 li
506.04 269.937 li
cp
548.28 269.937 mo
548.28 273.887 li
547.44 273.887 li
547.44 269.937 li
548.28 269.937 li
cp
f
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000a000a000a000a63767420687a0000000000ac0000051c6670
676d3e070000000005c80000091a676c7966699d00000000345c00001d30
68656164f7c4000000000ee40000003668686561110b000000000f1c0000
0024686d74787ab0000000000f40000000746c6f63610c33000000000fb4
000000786d617870138800000000102c000000207072657052c400000000
104c00002410676469720000000000000000000000000000079e0000fe93
0000000000000000000000000050006a0073008000800086008d009300bf
00db006200830093009900a000a600a900b000c100c900d7000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe79056d000c03b7000600130000fffaffedfea6
ffedfeb8050e000600130000fffaffedfe93050e00130420000600130000
fffaffedff10ffee050e00130420000600130000fffaffeefe93ff10feb8
0612000a050e0006000d02d2fffafff301fdfffa023f0006000dff36fffa
fff302870006000f0000fffafff1079efeaffea700000000000000000000
000000500051005a005b005c005d006000610062006400680069006a006b
006c006d006e00680069006e00600067006e00660068005f006100630064
00660068006a006b006c006d006e006f0070006f00720074007500760076
007000720073007400750076006f00700071007200730075007700770078
0079007a007b007c007d007b007c007d00770079007a007c0078007a007c
007d0078007d007e007f008000810082007e007f00810082007e007f0080
008100820083008400850086008700880089008300840085008600870088
0089008300840085008600870088008900890086008700880089008a008b
008c008d008e008f008a008b008c008d008e008f008a008b008c008d008e
008f008d008a008b008c008d008e008f0090009000910092009300940095
009600980099009b009c0090009100920093009400950096009700980099
009a009e009f00a60090009100950098009f009000910096009700bc00c6
00b500ae00af00b6006800690063006a006f00700071006f007000710072
0066006c006d00700079007c007f00830086008700880089008a00740075
00760077007a007b007c007d007e008200850086008a0088008900830078
007b00820083008600870088008900760079007a007c007d007e00830085
00880089008a0073007400750077007a007d00880089008a008b008c008d
008e00900094008b008c008d00910092009300940095008c008d00910095
008f009000910092009300940095008b008c008d008e008f009000910092
009300940095008b008c008d008e008f0090009100920093009600970098
0099009c0096009700980099009a009b009c00960099009a009c00960097
00980099009a009b009c009700980099009a009b009c009700980099009a
009b009c0096009d00a000a1009d009e009f00a000a100a2009d009f00a0
00a1009f00a2009d009e009f00a000a100a2009d009e00a000a1009d009e
00a000a2009d00a300a400a500a600a700a300a400a600a700a300a400a5
00a600a700a600a300a700a800a900aa00ab00ac00ac00a800a900aa00ab
00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae00ad00ae00af00b0
00b100b200b300b400b500b600b700b800ad00ae00ad00ae00af00b000b1
00b200b300b400b500b600b700b800ad00ae00af00b000b100b200b300b4
00b500b600b700b800b300ae00af00b000b200b500b600b700b800b900ba
00bb00bc00be00c000c100c200c200b900ba00bb00bc00bd00be00bf00c0
00c100c200c400ba00bb00be00bf00c000c200c300c400b900ba00bf00c0
00c200c600c700c900ca00cb00cc00cf00c500c700ce00c500c700c800cf
00d000d200d300d7010d00d000d100e900d000fd00d005e4000e00410000
05ba009c009c005e005e4047645f5e5d5c5b5a59585554535251504f4e4d
4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c2826
252423221f181411100f0d0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b0042651582320b00d44235921212d2c20204518684420b0016020
45b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b
2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045
b00325456164b050515845441b2121592d2c2045b0004360442d2c01b006
43b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d
2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0052510
23208af500b0016023edec2d2c01b005251023208af500b0016123edec2d
2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001610110
203c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2c4523456023456023456023766818b08062202d2cb00426b004
26b00425b0042545234520b003266062636820b0032661658a2344442d2c
2045b0005458b040442045b04061441b2121592d2c45b1302f4523456160
b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b003
2545695358441b2121591b2121592d2c45b01443b0006063b0016069442d
2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033
ffe0b134201bb3330034005944442d2cb0164358b00326458a586466b01f
601b64b020606620581b21b04059b001615923586559b02923442310b029
e01b2121212121592d2cb0164358b004254564b020606620581b21b04059
b0016123586559b0292344b00425b00725082058021b0359b0052510b004
252046b0042523423cb0072510b006252046b00425b0016023423c205801
1b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0072508
2058021b0359b00425b003254348b00625b00325b0016043481b21592121
21212121212d2cb0164358b004254564b020606620581b21b04059b00161
23581b6559b0292344b00525b00825082058021b0359b0042510b0052520
46b0042523423cb00425b0072508b0072510b006252046b00425b0016023
423c2058011b0059b0042510b00525b029e0b02920456544b0072510b006
25b029e0b00525b00825082058021b0359b00525b003254348b00425b007
2508b00625b00325b0016043481b2159212121212121212d2c02b0042520
2046b004252342b0052508b003254548212121212d2c02b0032520b00425
08b0022543482121212d2c452320451820b00050205823652359236820b0
40505821b04059235865598a60442d2c4b53234b515a5820458a60441b21
21592d2c4b545820458a60441b2121592d2c4b53234b515a58381b212159
2d2cb000214b5458381b2121592d2cb002435458b0462b1b21212121592d
2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121212159
2d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a582338
1b2121592d2c0020b200400325b0062649618b3812342d2c014623466023
466123201020468a61b8ff80628ab140408a704560683a2d2c208a234964
8a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1
020042b123018851b1400188535a58b910000020885458b2020102436042
59b12401885158b920000040885458b2020202436042b12401885458b202
2002436042004b014b5258b2020802436042591bb940000080885458b202
040243604259b94000008063b80100885458b202080243604259b9400001
0063b80200885458b202100243604259b94000020063b80400885458b202
400243604259595959592d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2c204569442d
0000000100000005bae1e039afba5f0f3cf50019080000000000bbeb7ccc
00000000cf7409dbfbfafd8b09ec07b60000000900020001000000000001
00000600fe0001c40aa0fbfafaa009ec0001000000000000000000000000
0000001d040e00000000000000000000040e0048040e0065040e00ae040e
0072040e0067040e0030040e006b040e005201cf000003e800ac050c005b
035d00ac042200ac03e6000f071e003d01d60085043400990273004504ec
00ac06d700ac03ad004704440061054c0063045800ac040e006b040e0052
00000000000001420000014200000142000002a800000412000005800000
06c0000008a800000a3200000a4200000a5200000a5200000b4a00000c98
00000d3400000e2600000ef400001016000011080000122a000012700000
134a000014a40000164800001742000018320000198800001ae400001d30
00010000001d0120001000c3000700020010002f00650000119024100004
0001b2090320b80284b40918014a20b80283b40918014a20b80282b40918
014a20b80281b40918014a20b80280b40918014a20b8027fb40918014a20
b8027eb40918014a20b8027db40918014a20b8027cb40918014a20b8027b
b40918014a20b8027ab40918014a20b80279b40918014a20b80278b40918
014a20b80277b40918014a20b80276b40918014a20b80275b40918014a20
b80274b40918014a20b80273b40918014a20b80271b40918014a20b80270
b40918014a20b8026fb40918014a20b8026eb40918014a20b8026db40918
014a20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20
b80269b40918014a20b80268b40918014a20b80267b40918014a20b80266
b40918014a20b80265b40918014a20b80264b40918014a20b80263b40918
014a20b80262b40918014a20b80261b40918014a20b80260b40918014a20
b8025fb40918014a20b8025eb40918014a20b8025db40918014a20b8025c
b40918014a20b8025bb40918014a20b8025ab40918014a20b80259b40918
014a20b80258b40918014a20b80257b40918014a20b80256b40918014a20
b80255b40918014a20b80254b40918014a20b80253b40918014a20b80252
b40918014a20b80251b40918014a20b80250b40918014a20b8024fb40918
014a20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20
b8024bb40918014a20b8024ab40918014a20b80249b40918014a20b80248
b40918014a20b80247b40918014a20b80246b40918014a20b80245b40918
014a20b80244b40918014a20b80243b40918014a20b80242b40918014a20
b80241b40918014a20b80240b40918014a20b8023fb40918014a20b8023e
b40918014a20b8023db40918014a20b8023cb40918014a20b8023bb40918
014a20b8023ab40918014a20b80239b40918014a20b80238b40918014a20
b80237b40918014a20b80236b40918014a20b80235b40918014a20b80234
b40918014a20b80233b40918014a20b80232b40918014a20b80231b40918
014a20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20
b8022db40918014a20b8022cb40918014a20b8022bb40918014a20b8022a
b40918014a20b80229b40918014a20b80228b40918014a20b80227b40918
014a20b80226b40918014a20b80225b40918014a20b80224b40918014a20
b80223b40918014a20b80222b40918014a20b80221b40918014a20b80220
b40918014a20b8021fb40918014a20b8021eb40918014a20b8021db40918
014a20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20
b80219b40918014a20b80218b40918014a20b80217b40918014a20b80216
b40918014a20b80215b40918014a20b80214b40918014a20b80213b40918
014a20b80212b40918014a20b80211b40918014a20b80210b40918014a20
b8020fb40918014a20b8020eb40918014a20b8020db40918014a20b8020c
b40918014a20b8020bb40918014a20b8020ab40918014a20b80209b40918
014a20b80208b40918014a20b80207b40918014a20b80206b40918014a20
b80205b40918014a20b80204b40918014a20b80203b40918014a20b80202
b40918014a20b80201b40918014a20b80200b40918014a20b801ffb40918
014a20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20
b801fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8
b40918014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918
014a20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20
b801f1b40918014a20b801f0b40918014a20b801efb40918014a20b801ee
b40918014a20b801edb40918014a20b801ecb40918014a20b801ebb40918
014a20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20
b801e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4
b40918014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918
014a20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20
b801ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801da
b40918014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918
014a20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20
b801d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0
b40918014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918
014a20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20
b801c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6
b40918014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918
014a20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20
b801bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bc
b40918014a20b801bbb40918014a20b801bab40918014a20b801b9b40918
014a20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20
b801b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2
b40918014a20b801b1b40918014a20b801b0b40918014a20b801afb40918
014a20b801aeb40918014a20b801adb40918014a20b801acb40918014a20
b801abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8
b40918014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918
014a20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20
b801a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019e
b40918014a20b8019db40918014a20b8019cb40918014a20b8019bb40918
014a20b8019ab40918014a20b80199b40918014a20b80198b40918014a20
b80197b40918014a20b80196b40918014a20b80195b40918014a20b80194
b40918014a20b80193b40918014a20b80192b40918014a20b80191b40918
014a20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20
b8018db40918014a20b8018cb40918014a20b8018bb40918014a20b8018a
b40918014a20b80189b40918014a20b80188b40918014a20b80187b40918
014a20b80186b40918014a20b80185b40918014a20b80184b40918014a20
b80183b40918014a20b80182b40918014a20b80181b40918014a20b80180
b40918014a20b8017fb40918014a20b8017eb40918014a20b8017db40918
014a20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20
b80179b40918014a20b80178b40918014a20b80177b40918014a20b80176
b40918014a20b80175b40918014a20b80174b40918014a20b80173b40918
014a20b80172b40918014a20b80171b40918014a20b80170b40918014a20
b8016fb40918014a20b8016eb40918014a20b8016db40918014a20b8016c
b40918014a20b8016bb40918014a20b8016ab40918014a20b80169b40918
014a20b80168b40918014a20b80167b40918014a20b80166b40918014a20
b80165b40918014a20b80164b40918014a20b80163b40918014a20b80162
b40918014a20b80161b40918014a20b80160b40918014a20b8015fb40918
014a20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20
b8015bb40918014a20b8015ab40918014a20b80159b40918014a20b80158
b40918014a20b80157b40918014a20b80156b40918014a20b80155b40918
014a20b80154b40918014a20b80153b40918014a20b80152b40918014a20
b80150b40918014a20b8014fb40918014a20b8014eb40918014a20b8014c
b40918014a20b8014bb40918014a20b8014ab40918014a20b80149b40918
014a20b80148b40918014a20b80147b40918014a20b80146b40918014a20
b80145b40918014a20b80144b40918014a20b80143b30918014ab80284b2
1e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e
1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8
027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277
b21d431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d
431fb80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421f
b8026eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb802
6ab21c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b2
1c441fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c45
1fb80261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8
025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259
b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c
451fb80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451f
b80250b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb802
4cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b2
1b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c
1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8
023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023b
b21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b
4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1f
b80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb802
2eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab2
1b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b49
1fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb8
0221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021d
b21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a
4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1f
b80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb802
10b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb2
1a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f
1fb80207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb8
0203b219501fb80202b219511fb80201b219511fb80200b219511fb801ff
b219511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219
511fb801fab219501fb801f9b219511fb801f8b219511fb801f7b219511f
b801f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801
f2b218541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb2
18541fb801edb218541fb801ecb218531fb801ebb218531fb801eab21854
1fb801e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb8
01e5b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1
b218541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218
541fb801dcb218541fb801dbb218541fb801dab218531fb801d9b218541f
b801d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801
d4b217571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b2
17561fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb21757
1fb801cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb8
01c7b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3
b217561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217
561fb801beb217561fb801bdb217571fb801bcb217571fb801bbb217571f
b801bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801
b6b217571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2
165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b
1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb8
01a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5
b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b216
5b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1f
b8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb801
98b2163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2
163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b
1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8
018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187
b2165b1fb80186b215611fb80185b215621fb80184b215621fb80183b215
661fb80182b215661fb80181b215551fb80180b215451fb8017fb215361f
b8017eb215361fb8017db215611fb8017cb215621fb8017bb215621fb801
7ab215641fb80179b215661fb80178b215661fb80177b215661fb80176b2
15661fb80175b215661fb80174b215661fb80173b215451fb80172b21562
1fb80171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8
016db215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169
b215621fb80168b215621fb80167b215611fb80166b215641fb80165b215
641fb80164b215661fb80163b215661fb80162b215661fb80161b215661f
b80160b215661fb8015fb215661fb8015eb215551fb8015db215451fb801
5cb215451fb8015bb215361fb8015ab215611fb80159b215621fb80158b2
15621fb80157b215631fb80156b215641fb80155b215661fb80154b21566
1fb80153b215661fb80152b215661fb80151b214401fb80150b214551fb8
014fb214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014b
b214401fb8014ab214411fb80149b214401fb80148b214401fb80147b214
411fb80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801f
b80142b212461fb80141b212461fb80140b212461fb8013fb212461fb801
3eb212441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2
115b1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a
1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb8
0131b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012d
b211591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b211
5b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561f
b80124b211561fb80123b211571fb80122b211581fb80121b211591fb801
20b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2
115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e
1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb8
0113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010f
b2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb210
5e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1f
b80106b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb801
02b2105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f
641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641f
f50f641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f
641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641f
e60e671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e
681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1f
d70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d
2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1f
c80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d
311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c
741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741f
b20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b
7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1f
a30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b
791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f
940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0a
a51f8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d55
7eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a
557955775578ab7755ba028600660285403c5576ab755504751475747503
f47501ab750144750130750102007510752075030c7455725573ab725500
7250728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc040
7c720d104671556f5570ab6f556e666d556a03251f6938675568ab675566
38645565ab645563386255613860555f385d555eab5d555c385a555bab5a
55593858555703251f5638545555ab54555338515552ab51554f384e554e
03251f4d384b554cab4b554a38485549ab4855473846554503381f001c10
1c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb0
1bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf1802
4018292c460f17cf17df17ef1704134017292e460016101620160315b8ff
c0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326
460f15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f
0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d
020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f
0b4f0b02400b3f4346400b2d30460003012001010001100120010308b8ff
c0b301151f46b80100b316010501b80190b154532b2b4bb80800524bb008
505bb00188b02553b00188b040515ab00688b000555a5b58b101018e59b1
01024354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d59
4bb0805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b74
5e732b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e73
2b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f737373
73742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff0284006402830064
028200640281006402800064027f0064027e0064027d0064027c0064027b
0064027a0064027900640278006402770064027600640275006402740064
027300640271006402700064026f0064026e0064026d0064026c0064026b
0064026a0064026900640268006402670064026600640265006402640064
02630064026200640261006402600064025f0064025e0064025d0064025c
0064025b0064025a00640259006402580064025700640256006402550064
0254006402530064025200640251006402500064024f0064024e0064024d
0064024c0064024b0064024a006402490064024800640247006402460064
024500640244006402430064024200640241006402400064023f0064023e
0064023d0064023c0064023b0064023a0064023900640238006402370064
02360064023500640234006402330064023200640231006402300064022f
0064022e0064022d0064022c0064022b0064022a00640229006402280064
022700640226006402250064022400640223006402220064022100640220
0064021f0064021e0064021d0064021c0064021b0064021a006402190064
021800640217006402160064021500640214006402130064021200640211
006402100064020f0064020e0064020d0064020c0064020b0064020a0064
0209006402080064020700640206006402050064020441ff006402030064
02020064020100640200006401ff006401fe006401fd006401fc006401fb
006401fa006401f9006401f8006401f7006401f6006401f5006401f40064
01f3006401f2006401f1006401f0006401ef006401ee006401ed006401ec
006401eb006401ea006401e9006401e8006401e7006401e6006401e50064
01e4006401e3006401e2006401e1006401e0006401df006401de006401dd
006401dc006401db006401da006401d9006401d8006401d7006401d60064
01d5006401d4006401d3006401d2006401d1006401d0006401cf006401ce
006401cd006401cc006401cb006401ca006401c9006401c8006401c70064
01c6006401c5006401c4006401c3006401c2006401c1006401c0006401bf
006401be006401bd006401bc006401bb006401ba006401b9006401b80064
01b7006401b6006401b5006401b4006401b3006401b2006401b1006401b0
006401af006401ae006401ad006401ac006401ab006401aa006401a90064
01a8006401a7006401a6006401a5006401a4006401a3006401a2006401a1
006401a00064019f0064019e0064019d0064019c0064019b0064019a0064
019900640198006401970064019600640195006401940064019300640192
00640191006401900064018f0064018e0064018d0064018c0064018b0064
018a00640189006401880064018700640186006401850064418001840064
01830064018200640181006401800064017f0064017e0064017d0064017c
0064017b0064017a00640179006401780064017700640176006401750064
0174006401730064017200640171006401700064016f0064016e0064016d
0064016c0064016b0064016a006401690064016800640167006401660064
016500640164006401630064016200640161006401600064015f0064015e
0064015d0064015c0064015b0064015a0064015900640158006401570064
015600640155006401540064015300640152006401500064014f0064014e
0064014c0064014b0064014a006401490064014800640147006401460064
0145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[7473 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 322 3 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
1 680 4 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>PBAAAA+Calibri AddT42Char 
1 1042 5 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
1 1408 6 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
1 1728 7 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
1 2216 8 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
1 6536 27 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>PBAAAA+Calibri AddT42Char 
1 2610 9 <ffff006bffed03bd05200206001b0000>PBAAAA+Calibri AddT42Char 
1 6884 28 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>PBAAAA+Calibri AddT42Char 
1 2626 10 <ffff0052ffed03ba05210206001c0000>PBAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
/g8 8 def
/g9 9 def
/g10 10 def
end
PBAAAA+Calibri /Encoding get
dup 32 /g3 put
dup 33 /g4 put
dup 34 /g5 put
dup 35 /g6 put
dup 36 /g7 put
dup 37 /g8 put
dup 38 /g9 put
dup 39 /g10 put
pop
end
%ADOEndSubsetFont
/ZPLSNM+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/ZPLSNM+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 216{/.notdef}rp]
ZPLSNM+Calibri nf
ZPLSNM+Calibri*1 [12.3918 0 0 -12.3605 0 0 ]msf
106.965 273.645 mo
( )sh
94.3493 239.337 mo
(!  )
[6.27022 6.42016 0 ]xsh
88.0414 205.029 mo
("   )
[6.27022 6.42016 6.27022 0 ]xsh
88.0414 170.721 mo
("!  )
[6.27022 6.42016 6.27022 0 ]xsh
88.0414 136.413 mo
(#   )
[6.27022 6.42016 6.27022 0 ]xsh
88.0414 102.105 mo
(#!  )
[6.27022 6.42016 6.27022 0 ]xsh
88.0414 67.797 mo
($   )
[6.27022 6.42016 6.27022 0 ]xsh
88.0414 33.489 mo
($!  )
[6.27022 6.42016 6.27022 0 ]xsh
142.814 289.779 mo
(#)sh
185.122 289.779 mo
(%)sh
227.43 289.779 mo
(&)sh
269.738 289.779 mo
(')sh
308.892 289.779 mo
(" )
[6.2702 0 ]xsh
351.2 289.779 mo
("#)
[6.2702 0 ]xsh
393.509 289.779 mo
("%)
[6.2702 0 ]xsh
435.817 289.779 mo
("&)
[6.2702 0 ]xsh
478.125 289.779 mo
("')
[6.2702 0 ]xsh
520.433 289.779 mo
(# )
[6.2702 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri-Bold
Type42DictBegin
[<00010000000a000a000a000a6376742016df0000000000ac000006086670
676de7920000000006b400000913676c7966245300000000264c00000d26
68656164f7b6000000000fc8000000366868656110c10000000010000000
0024686d747829d9000000001024000000346c6f636105ad000000001058
000000386d6178700ebd00000000109000000020707265701f3800000000
10b00000159c676469720000000000000000000000000000079e0000fe93
0000000000000000000000810081009c00ab00b500ba00c100ca00d300f3
010a0060008500bf00e300ea00f200fb010001070115011c012900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe83056d000d03c0000600170000fffaffe9fea9
ffe90000050e000600170000fffaffe9fe93050e00170426000600170000
fffaffe9ff12ffed050e00170426000600170000fffaffe9fe93feb8fece
060b0010050e0006001002cbfffafff001edfffa023f00060010ff36fffa
fff00287000600100000fffafff0079efeaffe9f00000000000000000000
000000700072007500780079007a007b007d007e007f0083008600870088
00890085007f0086008b008c008d008e008f009000910092009300940095
0096009700980099009a009b009c009d009e009f009200930094009b009c
009e009e00960099009a009d009e00a200a600a900ac00a200a300a400a5
00a700a800a900aa00ab00ac00ae00a300a500a700a800aa00ab00ac00ad
00ae00a000a100a300a600a700a900aa00ac00ad00af00af00b000b100b2
00b300b400b500af00af00b000b200b300b400b500b800c000b600b700b8
00b900ba00bb00bc00bd00be00bf00c000c100c200b900ba00bc00bd00bf
00c000c100c200b600b700b800b900ba00bb00bc00bd00be00bf00c000c1
00c200c000c100c200c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf
00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00c500c8
00c900ca00cb00ce00cf00d000d100d200d300d400d500d600d700d900db
00de00df00e000e200e300ec00d000d100d200d300d400d500d600d700d8
00d900da00db00dd00de00df00e000e100e300e500e900ec00ed00d100d3
00d400d500d800d900da00dc00e000e100e800d000d100d400d600e000e4
010800f5010200fb00ff0108008f00900096009200930099009000910097
0098009a009d00a400a600a700a800a900af009a00a200a300a700a900aa
00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a00aa00ac00ad00ae
00af00b100b900bb00bc00bd00be00c100c200c300c400c500c600c700c8
00c900ca00cb00ce00b300b400b500b600b700b800bc00c200c500c800ca
00cb00cd00ce00cf00d000c700b700b800b900bb00bc00be00c600c700c8
00c900cb00cf00d000b200b600b700c200c400c500c600c700cb00cc00cd
00ce00cf00d000d100d400d500d700d800d900da00db00dc00de00df00e0
00e200e300e500e600d100d300d600d700d800da00db00dc00dd00de00df
00e000e100e200e300e400e500d100d200d400d500da00db00dd00de00df
00e000e100e200e600d200d300d400d700d800dd00de00e000e100e200e3
00e400e500e600d200da00e100e900ea00ec00e800e900ea00eb00ec00ed
00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed00ee00ef00f500ee
00ef00f000f100f200f300f400f500f600ee00f000f200ef00f000f100f2
00f300f400f500f600ee00ef00f000f100f200f300f400f500f600f700f7
00f800f900fa00fb00fc00fd00f700f800f900fa00fb00fd00f700f800f9
00fa00fb00fc00fd00fd00fe00ff010001010102010300fe010001010102
010300fe00ff010001010102010301020103010401050106010701080109
010a010c010d010e010f01100107010401050106010701080109010a010b
010d010e010f01100111010401050106010701080109010a010b010c010d
010e010f0110011101040105010601070109010e010f0112011301140115
01170118011a011b011c011d011e011f0121012201120113011401150117
0119011b011c011d011e0120012101230124012501130114011501160117
01180119011a011b011c011d011f01200117011c011d011e012001210129
013001770129012b012e012f013001310134013501370139012b012d0130
01320134013a012e01300134013a014200500062006c00fa05e802cc0114
011400a000b140465f5e5d5c5b5a59585554535251504f4e4d4c4b4a4948
47464544434241403f3e3d3c3b3a39383736352f2e2d2c2826252423221f
181411100f0d0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b004
2651582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b028
2370b101283e01b0282370b10228453ab10200080d2d2c2045b003254561
64b050515845441b2121592d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c
234445b02b23442d2c4b525845441b2121592d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b08051580c
6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648b
b81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2c
4523456023456023456023766818b08062202d2cb00426b00426b00425b0
042545234520b003266062636820b0032661658a2344442d2c2045b00054
58b040442045b04061441b2121592d2c45b1302f4523456160b001606944
2d2c4b5158b02f2370b01423421b2121592d2c4b515820b0032545695358
441b2121591b2121592d2c45b01443b0006063b0016069442d2cb02f4544
2d2c452320458a60442d2c45234560442d2c4b235158b90033ffe0b13420
1bb3330034005944442d2cb0164358b00326458a586466b01f601b64b020
606620581b21b04059b001615923586559b02923442310b029e01b212121
2121592d2cb0164358b004254564b020606620581b21b04059b001612358
6559b0292344b00425b00725082058021b0359b0052510b004252046b004
2523423cb0072510b006252046b00425b0016023423c2058011b0059b005
2510b00425b029e0b0072510b00625b029e0b00425b00725082058021b03
59b00425b003254348b00625b00325b0016043481b215921212121212121
2d2cb0164358b004254564b020606620581b21b04059b0016123581b6559
b0292344b00525b00825082058021b0359b0042510b005252046b0042523
423cb00425b0072508b0072510b006252046b00425b0016023423c205801
1b0059b0042510b00525b029e0b02920456544b0072510b00625b029e0b0
0525b00825082058021b0359b00525b003254348b00425b0072508b00625
b00325b0016043481b2159212121212121212d2c02b00425202046b00425
2342b0052508b003254548212121212d2c02b0032520b0042508b0022543
482121212d2c452320451820b00050205823652359236820b040505821b0
4059235865598a60442d2c4b53234b515a5820458a60441b2121592d2c4b
545820458a60441b2121592d2c4b53234b515a58381b2121592d2cb00021
4b5458381b2121592d2cb002435458b0462b1b21212121592d2cb0024354
58b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb00243
5458b0492b1b212121592d2c208a08234b538a4b515a5823381b2121592d
2c0020b200400325b0062649618b3812342d2c0146234660234661232010
20468a61b8ff80628ab140408a704560683a2d2c208a2349648a2353583c
1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123
018851b1400188535a58b910000020885458b202010243604259b1240188
5158b920000040885458b2020202436042b12401885458b2022002436042
004b014b5258b2020802436042591bb940000080885458b2020402436042
59b94000008063b80100885458b202080243604259b94000010063b80200
885458b202100243604259b94000020063b80400885458b2024002436042
59595959592d2c451868234b51582320452064b04050587c59688a605944
2d2cb00016b00225b0022501b001233e00b002233eb10102060cb00a2365
42b00b234201b001233f00b002233fb10102060cb006236542b0072342b0
0116012d2c20b82000628a6023622d2cb0072558001b0159b0042510b003
25b0022520b8ffff545821cd1bed5921b006255cb006255a58b0092b5920
b005254ab0042547b004254760b0062547b0806361b00225b0005558b003
25b00725496359b0082558001b0159b00425b0062549b009255cb009255a
58b0092b59b0072546b0806361b0032520b0005558631b2159612320b000
5558b080631b21b08059b0592bb006255c586959b00425202010b0004823
3ab0062658001b0159b0052658b003252f598a12233221212d2cb00625b0
0a2587b00625b009254ab0005358b00625b00a251bb00925b0072559b002
25b00225070cb005256323b00625636020b94000040063535821b00426b0
0426b00a1bb94000040063655158b0042665b0042665b00a1bb00426b004
26b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525
b0052507595920b0005558b00525b0052587b00725b007250bb0092510b0
0b25b0092620b8ffff545821cd1bed59b00525b0052507b00825b00b2549
23b00625b0062587b00a2510b00b25c15920b00051b800522378b00161b0
0225b00725b0072507b00a25b00d254961b08062b00525b005250bb00a25
2338b00625b0062587b00825b008250bb00a2510b00b25c4b00625b00625
07b00925b00c2549b0032554b8ffa723792121212121212121212121212d
2c23b0005458b9400000001bb900004000598ab0005458b9400000001bb9
0000400059b05b2b2d2c08b0005458b9400000001bb900004000590db05b
2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb0
0426b00426080db00426b00426080db05b2b2d00000100000005bae12b0d
afba5f0f3cf50019080000000000bbeb7ccc00000000cf7409dbfbdafd8d
09ec07c5000100090002000100000000000100000600fe0001c40aa0fbda
fa8609ec00010000000000000000000000000000000d040e000000000000
0000000003f30047035900480407004a03d7007e044b007e0331004902c6
00170223007d0370000203fc001c000000000000013c0000013c0000013c
0000031400000440000005d8000006d80000081c000009c200000af00000
0b2600000b8800000d2600010000000d0120001000bd000700020010002f
006000000c63159c00040001b10903b802f9b21e1d1fb802f8b21e2b1fb8
02f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3
b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e
2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1f
b802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802
e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b2
1e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f
1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb8
02d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5
b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d
2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121f
b802ccb21d121fb802cbb21d121fb802cab21d191fb802c9b21d2f1fb802
c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b2
1d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f
1fb802bfb21d121fb802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb8
02bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7
b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d
2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c321fb802afb21c331f
b802aeb21c331fb802adb21c331fb802acb21c331fb802abb21c331fb802
aab21c311fb802a9b21c311fb802a8b21c321fb802a7b21c321fb802a6b2
1c321fb802a5b21c321fb802a4b21c321fb802a3b21c321fb802a2b21c33
1fb802a1b21c331fb802a0b21c331fb8029fb21c331fb8029eb21c331fb8
029db21c331fb8029cb21c311fb8029bb21c311fb8029ab21c321fb80299
b21c321fb80298b21c321fb80297b21c321fb80296b21c321fb80295b21c
331fb80294b21c331fb80293b21c331fb80292b21c331fb80291b21c331f
b80290b21c331fb8028fb21c331fb8028eb21c311fb8028db21c321fb802
8cb21c321fb8028bb21c321fb8028ab21c321fb80289b21c321fb80288b2
1c331fb80287b21c331fb80286b21c331fb80285b21c331fb80284b21c33
1fb80283b21c331fb80282b21b341fb80281b21b341fb80280b21b341fb8
027fb21b341fb8027eb21b341fb8027db21b341fb8027cb21b341fb8027b
b21b341fb8027ab21b341fb80279b21b341fb80278b21b341fb80277b21b
341fb80276b21b341fb80275b21b341fb80274b21b341fb80273b21b341f
b80272b21b341fb80271b21b341fb80270b21b341fb8026fb21a351fb802
6eb21a351fb8026db21a351fb8026cb21a351fb8026bb21a351fb8026ab2
1a351fb80269b21a351fb80268b21a351fb80267b21a351fb80266b21a35
1fb80265b21a351fb80264b21a351fb80263b21a351fb80262b21a351fb8
0261b21a351fb80260b21a351fb8025fb21a351fb8025eb21a351fb8025d
b21a351fb8025cb21a351fb8025bb21a351fb8025ab21a351fb80259b219
371fb80258b219371fb80257b219371fb80256b219371fb80255b219371f
b80254b219371fb80253b219371fb80252b219371fb80251b219371fb802
50b219371fb8024fb219371fb8024eb219371fb8024db219371fb8024cb2
19371fb8024bb219371fb8024ab219371fb80249b219371fb80248b21937
1fb80247b219371fb80246b219371fb80245b219371fb80244b219371fb8
0243b219371fb80242b219371fb80241b219371fb80240b219371fb8023f
b219371fb8023eb219371fb8023db219371fb8023cb219371fb8023bb219
371fb8023ab219371fb80239b218391fb80238b218391fb80237b218391f
b80236b218391fb80235b218391fb80234b218391fb80233b218391fb802
32b218391fb80231b218391fb80230b218391fb80301b2182e1fb8022fb2
18391fb8022eb218391fb8022db218391fb8022cb218391fb8022bb21839
1fb8022ab218391fb80229b218391fb80228b218391fb80227b218391fb8
0226b218391fb80225b2173b1fb80224b2173b1fb80223b217321fb80222
b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2173b1fb8021eb217
3b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1f
b80219b2173b1fb80218b2173b1fb80217b2173b1fb80216b2173b1fb802
15b217321fb80214b2173a1fb80213b2173b1fb80212b2173b1fb80211b2
173b1fb80210b2173b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b
1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1fb80209b217321fb8
0208b217321fb80207b2173b1fb80206b2173b1fb80205b2173b1fb80204
b2173b1fb80203b2173b1fb80202b2173b1fb80201b2173b1fb80200b217
3b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1f
b801fbb2173b1fb801fab2173b1fb801f9b2173b1fb801f8b2173b1fb801
f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2
173b1fb801f2b2173b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b
1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1fb801ebb2173b1fb8
01eab2173b1fb801e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6
b216231fb801e5b216231fb801e4b216371fb801e3b216371fb801e2b216
381fb801e1b216381fb801e0b216431fb801dfb216441fb801deb216441f
b801ddb216441fb801dcb216451fb801dbb216461fb801dab216461fb801
d9b216461fb801d8b216231fb801d7b216231fb801d6b216381fb801d5b2
16431fb801d4b216431fb801d3b216431fb801d2b216441fb801d1b21646
1fb801d0b216461fb801cfb216461fb801ceb216461fb801cdb216461fb8
01ccb216461fb801cbb216431fb801cab216231fb801c9b216231fb801c8
b216371fb801c7b216371fb801c6b216381fb801c5b216421fb801c4b216
431fb801c3b216441fb801c2b216451fb801c1b216461fb801c0b216461f
b801bfb216461fb801beb216461fb801bdb216461fb801bcb216461fb801
bbb216461fb801bab216371fb801b9b216381fb801b8b216421fb801b7b2
16431fb801b6b216431fb801b5b216431fb801b4b216441fb801b3b21644
1fb801b2b216441fb801b1b216451fb801b0b216451fb801afb216451fb8
01aeb216461fb801adb216461fb801acb216461fb801abb216461fb801aa
b216461fb801a9b215341fb801a8b215411fb801a7b215411fb801a6b215
4d1fb801a5b2154e1fb801a4b2154f1fb801a3b215521fb801a2b215401f
b801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8019eb215521fb801
9db2154d1fb8019cb215401fb8019bb2154d1fb8019ab2154e1fb80199b2
154e1fb80198b2154f1fb80197b2154f1fb80196b215501fb80195b21552
1fb80194b215521fb80193b215521fb80192b215411fb80191b2154f1fb8
0190b215501fb8018fb215501fb8018eb215511fb8018db215521fb8018c
b215521fb8018bb215521fb8018ab214581fb80189b214591fb80188b214
5c1fb80187b2145d1fb80186b2144a1fb80185b2145b1fb80184b2145c1f
b80183b214591fb80182b2145d1fb8018140af145d1ff00f451fef0e481f
e00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b
561faf0b561fae0b561fad0b561fac0b561fab0b561faa0b561fa90b561f
a80b561fa70b561fa60b561fa50b561fa40b561fa30b561fa20b561fa10b
561fa00b561f9f0b561f9e0a681f9a0a681f990a681f980a681f970a681f
960a681f950a681f940a681f930a681f920a681f910a681f9009681f8f09
681f8e09681f8d09681f8c09681f410902fc02fa0056001f02fb02fa0068
001f017fb213321fb8017eb212371fb80174b212371fb80173b211421fb8
0172b211421fb80171b211421fb80170b211421fb8016fb211421fb8016e
b211421fb8016db211421fb8016cb211421fb8016bb211421fb8016ab211
421fb8013cb211421fb8013bb210421fb8013ab210421fb80139b210421f
b80138b210421fb80137b210421fb80136b210421fb80135b210421fb801
34b210421fb80133b210421fb80132b20f451fb80131b20f451fb80130b2
0f451fb80112b20f451fb80111b20f451fb80110b20f451fb8010fb20f45
1fb8010eb20f451fb8010db20e481fb8010cb20e481fb8010bb20e481fb8
010ab20e481fb80109b20e481fb80108b20e481fb80107b20d4a1fb80106
405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf
0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b56
1fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c
0a681fb80180b213321fb8017ab211401fb80179b211421fb80178b21142
1fb80177b211421fb80176b211421fb80175b211421fb80143b211421fb8
0142b210421fb80141b210421fb80140b210421fb8013fb210421fb8013e
b210421fb8013db20f451fb80115b20f451fb80114b20f451fb80113b20f
451fb903030302b2401fa4be030200b4030200c4030200030300b213321f
b8017bb213321fb80153b212371fb80152b211401fb80151b211401fb801
50b211401fb8014fb211401fb8014eb211401fb8014db211401fb8014cb2
11401fb8014bb211401fb8014ab211401fb80149b211401fb80148b21140
1fb80147b211401fb80146b211401fb80145b211401fb80144b211401fb8
0122b211401fb80121b210421fb80120b210421fb8011fb210421fb8011e
b210421fb8011db210421fb8011cb210421fb8011bb210421fb8011ab210
421fb80119b210421fb80118b20f451fb80117b20f451fb80116409b0f45
1ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff80e481ff70e481ff6
0e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a
1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb
0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e
1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb40b561fb30b561f9b
0a681fb802fdb212371fb8017db212371fb8017cb212371fb80169b2112e
1fb80168b2112e1fb80167b211401fb80166b211401fb80165b211401fb8
0164b211401fb80163b211401fb80162b211401fb80161b211401fb80160
b211401fb8015fb211401fb8015eb211401fb8015db211401fb8015cb211
401fb8015bb211401fb8015ab211401fb80159b211401fb80158b211401f
b80157b211401fb80156b211401fb80155b211401fb80154b211401fb801
2fb211401fb8012eb210421fb8012db210421fb8012cb210421fb8012bb2
10421fb8012ab210421fb80129b210421fb80128b210421fb80127b21042
1fb80126b210421fb80125b20f451fb80124b20f451fb80123b20f451fb8
0105b20f451fb80104b20f451fb80103b20f451fb80102b20f451fb80101
b20e481fb8010040a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c
4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561f
b90b561f8503251f84032e1f83012e1f8248805581ab80557f487d557eab
7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55
047a147a020a7948775578ab77550b77010c764875555475e475f4750314
755475647574759475d475e47507a475b475c47503b8ffc0401275383b46
807590750214757475020075010fb8ffc04021750b0e467448725573ab72
5504723472023bf47201e07201023072015072607202b8ffc0b372242846
b8ffc0403572161a461072307240720371486f5570ab6f554f6f6f6f7f6f
9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e486d55df6d0100bc02
ff001002ff00c002ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a
03251f692e675568ab6755662e645565ab6455632e6255612e60555f2e5d
555eab5d555c2e5a555bab5a55592e58555703251f562e545555ab545553
2e515552ab51554f2e4e554e03251f4d2e4b554cab4b554a2e485549ab48
55504801472e46554503361f001f01001e01001e701e801ef01e040b601d
701d02701de01df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a02
0f1a8f1a020f191f198f199f19af19050f198f199f19030c701280120270
1180110230114011d011e011040011a011020f8f0f9f0faf0f034f0f5f0f
ef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310
400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246
400d2427463f0c4f0c5f0c039f0c01400c262946ef0aff0a02400a242746
ef09ff0902ff09010003012001010001100120010308b8ffc0b301151f46
b80100b316010501b80190b154532b2b4bb807ff524bb008505bb00188b0
2553b00188b040515ab00688b000555a5b58b101018e59b101024354b014
4b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0805358b0
401d594bb0ff5358b0001db1160042592b5e73757373742b732b73742b2b
73745e732b5e7374757374755e73747573015e7374737475757473745e73
7473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
73745e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373732b
7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[3367 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 2952 12 <0002001cfffa03df05140059005d0097b61e5b5a4904481fb801d2b7292a
34353d04293eb801d3b74811070656045512b801d3b71c1d5c5d4a041c4b
b801d3402d553929481c550b0b551c48293906002e5052563d49d35a3506
5a34075bd41e2a111e5a1e5a1e24435224551755003f3f3f1239392f2f11
333310ed323211333310ed32323f012fc417392f2f2f2f2f2f10ed111739
10ed11173910ed11173910ed111739313001140e0223230333321615140e
022323030e0323222e02371323030e0323222e02371323222635343e0233
3313232226353436333313343e0233321e02150333133e0333321e020703
3332160503331303df060a0f087222621115060a0f087725010917271e20
2714070126e02501091627201f26150702245f1115060a0e097422651115
161178240a18281f1f26140525e022010a1728201f2614050123601115fd
c022df23037618211409fee3272e18221409fec7090d0a04040a0d090139
fec7080e0a04040a0d090139262f18221409011d262f30260124090d0a05
050a0d08fedb0124080e0a05050a0d08fedb2784fee3011d>HIBBAA+Calibri-Bold AddT42Char 
1 1752 7 <0002007efe95040003d7002a003d0096b10102435558b221360abb026000
15002b0285400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b49104f39180b0f014c39b8014ab240054d00183f1a4ded2b3f3f3f
ed2b121739012fd4ed10ed323931301bb60a363521040530b8ffe8b40b0f
014c30b8014b400d264a1b49104f39180b0f014c39b8014ab240054d0018
3f1a4ded2b3f3f3fed2b12173931305901140e0223222e022711140e0223
222e023511343e0233321e0215153e0333321e0205342e0223220e020711
161633323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e
29190a274b4e532f628a5728fefa11294332193133361e35603431452c15
01ed77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a
69283d29144d86b277396952310f223628feda4349325166>HIBBAA+Calibri-Bold AddT42Char 
1 316 3 <00020047ffe9037603d7003300400129b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f
5f5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed32393130
1b400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e
412ab80118401be02201037d228d2202402250226022030f221f22020c04
2222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe840091001
4d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f5f5e5d5d5d5f5ded
1112392f2b5d71ed5d7131305925140606232226263535060623222e0235
343e02333335342e0223220e0223222e0235343e0433321e02150723220e
02151416333236370376142b2a2d2911378d56477757303d79b477571127
41303f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35
592e1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a
26171f241d231e132955865cda122433213840363400>HIBBAA+Calibri-Bold AddT42Char 
1 788 4 <00010048ffea032103d60035009db10102435558b21c0027be0274000e00
18011f001f0024ffe8b40b0f014c24b8011fb2134a04ba01480031ffc040
0b0b014d312c180b0f014c2cb80146b240094d00183f1a4dfd2bd42bed3f
fd2bd4ed012fedc43231301bbc0018011f001f0024ffe8b40b0f014c24b8
011fb2134a04ba01480031ffc0400b0b014d312c180b0f014c2cb80146b2
40094d00183f1a4dfd2bd42bed3ffd2bd4ed31305925140e0623222e0235
343e0233321e0615140623222e0223220615141e0233323e0233321e0203
21030507183a4a572e679f6c374378a462284d4335160905031410112634
483262681a334d33344b38260d090c0704b01a23180f17211a10407db474
86c3803e0e181e160f1823193a2f1c221c9792486e4a251f261f0a1b2a00
>HIBBAA+Calibri-Bold AddT42Char 
1 1496 6 <0001007efffa03bb057000340062b10102435558bf003102600022000c02
600016002302b6b32d2d160ab802b7400e400016220b0528491c46114c05
4c00183f3f3f3f123939012fd41a4ded12392fed10fd32e431301b400b22
0b0528491c46114c054c00183f3f3f3f12393931305925140e0223222e02
270111140e0223222e023511343e0233321e021511013e0333321e021514
06070101161603bb0b1d32282933211207fed70c1d302525301d0c0c1d30
2525301d0c0108081421312625331f0c0f0ffefb012e0c0b210a0f090504
09100d01d6fe280a0f0a05050a0f0a05230a100b06060b100afcf101630c
120a05050a0f0b0f2213fed8fe2d141d>HIBBAA+Calibri-Bold AddT42Char 
1 1088 5 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>HIBBAA+Calibri-Bold AddT42Char 
1 2498 9 <00010017ffec028e04b1003a0093b10102435558b711110d3b2900232db8
025fb2170d2db8ffe8b40b0f014c2db8011fb323481d0db8ffe8b40b0f01
4c0db8011fb2174831b80147b240074d00183f1a4ded3fed2bcd3fed2b01
2f33fd32c4321112392f31301bb9002dffe8b40b0f014c2db8011fb32348
1d0db8ffe8b40b0f014c0db8011fb2174831b80147b240074d00183f1a4d
ed3fed2bcd3fed2b31305925140e0423222e02351123222635343e023333
35343e0233321e02151533321e02151406232311141633323e0233321e02
028e0b12232f371c4b6e48226b1314050a0f0a6a0b1d312425311c0cc20a
0f0a051413c32e3b1420191107060b06057a2c2f130f0b06264f785201c9
2f371d28170ac70a100b05050b100ac70a17281d372ffe5d494907090707
1524>HIBBAA+Calibri-Bold AddT42Char 
1 2076 8 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>HIBBAA+Calibri-Bold AddT42Char 
1 2854 11 <00010002fed1035605cf00150019bc0015024d000b0000024eb20a100500
2f2f012feddded3130130e0323222e0237013e0333321e0207fc05101d2b
2129341b0406025604101c2d202a331a0405fefd0d100a0508101911068f
0d110a0508101911>HIBBAA+Calibri-Bold AddT42Char 
1 2800 10 <0001007dfff301a60128000b0009b209034c003fcd313025140623222635
343633321601a64154544041555340905d403f585e403f00>HIBBAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>HIBBAA+Calibri-Bold AddT42Char 
HIBBAA+Calibri-Bold /CharStrings get begin
/g12 12 def
/g7 7 def
/g3 3 def
/g4 4 def
/g6 6 def
/g5 5 def
/g9 9 def
/g8 8 def
/g11 11 def
/g10 10 def
end
HIBBAA+Calibri-Bold /Encoding get
dup 32 /g12 put
dup 33 /g7 put
dup 34 /g3 put
dup 35 /g4 put
dup 36 /g6 put
dup 37 /g5 put
dup 38 /g9 put
dup 39 /g8 put
dup 40 /g11 put
dup 41 /g10 put
pop
end
%ADOEndSubsetFont
/ZPLSNN+Calibri-Bold /HIBBAA+Calibri-Bold findfont ct_VMDictPut
/ZPLSNN+Calibri-Bold*1 
[32{/.notdef}rp /g12 /g7 /g3 /g4 /g6 /g5 /g9 
/g8 /g11 /g10 214{/.notdef}rp]
ZPLSNN+Calibri-Bold nf
ZPLSNN+Calibri-Bold*1 [0 -14.8922 -14.9299 0 0 0 ]msf
72.9242 185.639 mo
( !"#$%&'\('%#\))
[-7.44611 -8.04169 -7.29703 -6.2547 -6.70145 -7.29726 -5.21213 -5.95679 -5.95679 -5.95679 -7.44609 -6.25471 
0 ]ysh
ZPLSNN+Calibri-Bold*1 [14.9299 0 0 -14.8922 0 0 ]msf
304.291 314.396 mo
('%#\))
[5.97186 7.46494 6.27057 0 ]xsh
385.32 44.5482 mo
392.4 44.5482 li
392.4 37.3661 li
385.32 37.3661 li
cp
1 1 1 rgb
ef
384.96 37.3661 mo
384.96 37.2462 385.2 37.0071 385.32 37.0071 cv
392.4 37.0071 li
392.64 37.0071 392.88 37.2462 392.88 37.3661 cv
392.88 44.5482 li
392.88 44.7872 392.64 45.0272 392.4 45.0272 cv
385.32 45.0272 li
385.2 45.0272 384.96 44.7872 384.96 44.5482 cv
cp
385.8 44.5482 mo
385.32 44.1891 li
392.4 44.1891 li
392.04 44.5482 li
392.04 37.3661 li
392.4 37.8452 li
385.32 37.8452 li
385.8 37.3661 li
cp
.136538 .123054 .126659 rgb
f
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 3380 15 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>PBAAAA+Calibri AddT42Char 
1 4650 20 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>PBAAAA+Calibri AddT42Char 
1 2890 13 <0001005bffee04780520003f00a2401d1c1c0f181810014d18100f014d18
100d014d180a0c014d18100b014d18b80211400d00bf2701202740276027
03270fb8ffe8b310014d0fb8fff0b30f014d0fb8ffecb30d014d0fb8ffee
b30c014d0fb8ffe8b30b014d0fb80232b42f34013418b8010ab42222392f
3ebb010a0005000a0129b2395314b8012cb12f56003fed3ffdd4ed111239
2fed012f5de12b2b2b2b2bd45d5dc4e12b2b2b2b2b12392f313001140e02
23222e0223220e0215141e02333236371121222635343e023321321e0215
11140e0423222e0235343e0233321e04047804080c070c385e835a6baa76
3f457aa9653c7b35fed4111104090c09019b0b16120a123a5c62643196ec
a3565da9ed904a8265451a0a045e131d1308262e264e8abe6f7cc084441d
1d01792224131b110808101c12fe131a261d22180c5dacf0949afab0611a
23291a22>PBAAAA+Calibri AddT42Char 
1 3828 17 <0001003dfffa06e00514003c0067b3263c0132b8fff840430b0c014c2532
012f080b0c014c282f0125100b0c014c25250122180b0c014c2922011820
0b0c014c2d31012d30012d24012d230137522a5223300b03121d52125505
55003f3f3f1217393f3f31305d5d5d5d012b5d2b5d2b5d2b5d2b5d250e03
23222e02270123030e0323222e0227012626363633321e02170133013e03
33321e02170133013e03333216160607058304101c291e1f2b1c0e04fef1
02fa030e1a2920212c1c0f03feaa06011126201f24130702012301011403
0914251e1c21140903012902011d030613231d1e23100105260e11090404
09110e03d1fc2f0e1109040409110e04ab171a0e0403080e0bfbc4043a0b
0f080404080f0bfbc6043b0a0f0804050e1a1700>PBAAAA+Calibri AddT42Char 

1 0 11 <> PBAAAA+Calibri AddT42Char 
1 4118 18 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>PBAAAA+Calibri AddT42Char 
1 4360 19 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>PBAAAA+Calibri AddT42Char 
1 3224 14 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>PBAAAA+Calibri AddT42Char 
1 3622 16 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>PBAAAA+Calibri AddT42Char 
1 2642 12 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g15 15 def
/g20 20 def
/g13 13 def
/g17 17 def
/g11 11 def
/g18 18 def
/g19 19 def
/g14 14 def
/g16 16 def
/g12 12 def
end
PBAAAA+Calibri /Encoding get
dup 40 /g15 put
dup 41 /g20 put
dup 42 /g13 put
dup 43 /g17 put
dup 44 /g11 put
dup 45 /g18 put
dup 46 /g19 put
dup 47 /g14 put
dup 48 /g16 put
dup 49 /g12 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZPLSNM+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g15 /g20 /g13 /g17 /g11 /g18 /g19 
/g14 /g16 /g12 206{/.notdef}rp]
ZPLSNM+Calibri nf
ZPLSNM+Calibri*1 [13.1383 0 0 -13.1051 0 0 ]msf
395.648 44.8427 mo
(\(\)*+,-.,/01)
[6.71909 4.03076 8.21143 11.646 2.98627 2.98648 6.86725 2.98627 5.37494 6.4194 0 ]xsh
gsave
385.44 60.5872 mo
392.64 60.5872 li
392.64 67.7692 li
385.44 67.7692 li
cp
clp
385.2 68.3672 mo
393.12 68.3672 li
393.12 59.7491 li
385.2 59.7491 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 34.1196 330.698 ]ct
[7.92 0 0 8.618 351.08 262.331 ]ct
snap_to_device
<<
/T 1
/W 11 
/H 12 
/M[11 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~:f'tb:f'tb:f'uaUnjf^Unjf^UnhR5AS#FaAS#FaAWW"8OH>QcOH>QcH$O[\H$O[\H$O[_I!g<hI!g<h
I!gp5NK&pWNK&pWNG*!=BP;'mBP;'mTqS0RTqS0RTqS/Y;c?Un;c?Un;cC-5[^NWQ[^NWQ[Qcu@5<h@s
5<h@s~>
<~:f'tb:f'tb:f'uaUnjf^Unjf^UnhR5AS#FaAS#FaAWW"8OH>QcOH>QcH$O[\H$O[\H$O[_I!g<hI!g<h
I!gp5NK&pWNK&pWNG*!=BP;'mBP;'mTqS0RTqS0RTqS/Y;c?Un;c?Un;cC-5[^NWQ[^NWQ[Qcu@5<h@s
5<h@s~>
<~:f'tb:f'tb:f'uaUnjf^Unjf^UnhR5AS#FaAS#FaAWW"8OH>QcOH>QcH$O[\H$O[\H$O[_I!g<hI!g<h
I!gp5NK&pWNK&pWNG*!=BP;'mBP;'mTqS0RTqS0RTqS/Y;c?Un;c?Un;cC-5[^NWQ[^NWQ[Qcu@5<h@s
5<h@s~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
384.96 60.5872 mo
384.96 60.3482 385.2 60.1082 385.44 60.1082 cv
392.64 60.1082 li
392.88 60.1082 393 60.3482 393 60.5872 cv
393 67.7692 li
393 68.0082 392.88 68.2482 392.64 68.2482 cv
385.44 68.2482 li
385.2 68.2482 384.96 68.0082 384.96 67.7692 cv
cp
385.92 67.7692 mo
385.44 67.2902 li
392.64 67.2902 li
392.16 67.7692 li
392.16 60.5872 li
392.64 61.0662 li
385.44 61.0662 li
385.92 60.5872 li
cp
f
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 5284 23 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>PBAAAA+Calibri AddT42Char 
1 4720 21 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>PBAAAA+Calibri AddT42Char 
1 4938 22 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g23 23 def
/g21 21 def
/g22 22 def
end
PBAAAA+Calibri /Encoding get
dup 50 /g23 put
dup 51 /g21 put
dup 52 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZPLSNM+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g15 /g20 /g13 /g17 /g11 /g18 /g19 
/g14 /g16 /g12 /g23 /g21 /g22 203{/.notdef}rp]
ZPLSNM+Calibri nf
ZPLSNM+Calibri*1 [13.1383 0 0 -13.1051 0 0 ]msf
395.648 67.9347 mo
(\(\)1*+,-.,2344)
[6.71909 4.03076 6.4194 8.21143 11.646 2.98627 2.98648 6.86725 2.83652 6.12109 7.91333 11.1979 
0 ]xsh
gsave
385.44 83.6892 mo
392.64 83.6892 li
392.64 90.8702 li
385.44 90.8702 li
cp
clp
385.2 91.3492 mo
393.12 91.3492 li
393.12 83.4492 li
385.2 83.4492 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 34.1196 330.698 ]ct
[7.92 0 0 7.9 351.08 239.349 ]ct
snap_to_device
<<
/T 1
/W 11 
/H 11 
/M[11 0 0 -11 0 11 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~s8W+pH'R^qs8W-!s/Bu(K:2!(s2Fo=Ab#g#Jt(uFIC3/Ns8W-!J=Lf";8N21s8W,HDk-(f7E,-'s4(]'
J=?N<7*#/Y>0m6KK)blN6ci'Qs8W-!s8W,a5KN^$s8W-!s7.o)6cT'(s7ZKh+6rn+7Df'%BE~>
<~s8W,#Kq@Z2s8W-!s0-n=NhYk>s2t8IEq981NMPjaLq@9os8W-!N2;0I@E/6Fs8W,LH_g!'<Qb4=s4MJ>
N2-FQ<6Y3qC"*+^NW9%Y;pJ\$s8W-!s8W,c:sJn;s8W-!s78V?<6P4>s7cQj1[P/A<QG+:FT~>
<~s8W,-PH+'Ns8W-!s140YS?;2Ys3^eZKCo3DS$22-Qc"(Ds8W-!RBVh!FNsdas8W,QMm)OEC=)nYs5&CX
RBHSiC!un<HeAAuS,`NgB[^tVs8W-!s8W,eA^gPVs8W-!s7BIXB[H\Ws7lWk9CMo\C<lhVL&~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
384.96 83.6892 mo
384.96 83.4492 385.2 83.2102 385.44 83.2102 cv
392.64 83.2102 li
392.88 83.2102 393 83.4492 393 83.6892 cv
393 90.8702 li
393 91.1102 392.88 91.3492 392.64 91.3492 cv
385.44 91.3492 li
385.2 91.3492 384.96 91.1102 384.96 90.8702 cv
cp
385.92 90.8702 mo
385.44 90.3922 li
392.64 90.3922 li
392.16 90.8702 li
392.16 83.6892 li
392.64 84.1672 li
385.44 84.1672 li
385.92 83.6892 li
cp
f
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 5704 24 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g24 24 def
end
PBAAAA+Calibri /Encoding get
dup 53 /g24 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZPLSNM+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g15 /g20 /g13 /g17 /g11 /g18 /g19 
/g14 /g16 /g12 /g23 /g21 /g22 /g24 202{/.notdef}rp]
ZPLSNM+Calibri nf
ZPLSNM+Calibri*1 [13.1383 0 0 -13.1051 0 0 ]msf
395.648 91.0267 mo
(\(\)1*+,-.,2344\)\(\(5)
[6.71909 4.03076 6.4194 8.21143 11.646 2.98627 2.98648 6.86725 2.83652 6.12109 7.91333 11.1979 
11.1979 4.03073 6.71912 6.71912 0 ]xsh
385.32 113.733 mo
392.4 113.733 li
392.4 106.671 li
385.32 106.671 li
cp
.391045 .393769 .400815 rgb
ef
384.96 106.67 mo
384.96 106.551 385.2 106.311 385.32 106.311 cv
392.4 106.311 li
392.64 106.311 392.88 106.551 392.88 106.67 cv
392.88 113.733 li
392.88 113.972 392.64 114.211 392.4 114.211 cv
385.32 114.211 li
385.2 114.211 384.96 113.972 384.96 113.733 cv
cp
385.8 113.733 mo
385.32 113.374 li
392.4 113.374 li
392.04 113.733 li
392.04 106.67 li
392.4 107.149 li
385.32 107.149 li
385.8 106.67 li
cp
.136538 .123054 .126659 rgb
f
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 6194 26 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>PBAAAA+Calibri AddT42Char 
1 5954 25 <00020063ffed04e8052100130027007c401a141810014d14100f014d1414
0d014d14120c014d14180b014d14b80233400920003000800003001eb8ff
e8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb30c014d1e
b8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb10556003fed
3fed012fe12b2b2b2b2bd45de12b2b2b2b2b313001140e0223222e023534
3e0233321e0207342e0223220e0215141e0233323e0204e84a93de9492d5
8b444a94de948fd48d45b5275b987070985f29265a9772719a5e2802969d
fcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d548fbc
>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g26 26 def
/g25 25 def
end
PBAAAA+Calibri /Encoding get
dup 54 /g26 put
dup 55 /g25 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZPLSNM+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g15 /g20 /g13 /g17 /g11 /g18 /g19 
/g14 /g16 /g12 /g23 /g21 /g22 /g24 /g26 
/g25 200{/.notdef}rp]
ZPLSNM+Calibri nf
ZPLSNM+Calibri*1 [13.1383 0 0 -13.1051 0 0 ]msf
395.648 114.118 mo
(\(\)1*+,-.,2344\)67\)\(\(5)
[6.71909 4.03076 6.4194 8.21143 11.646 2.98627 2.98648 6.86725 2.83652 6.12109 7.91333 11.1979 
11.1979 4.03073 7.01724 8.65948 4.03076 6.71909 6.71912 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
/ZPLSNN+Calibri-Bold*1 uf
/ZPLSNN+Calibri-Bold uf
/HIBBAA+Calibri-Bold uf
/ZPLSNM+Calibri*1 uf
/ZPLSNM+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
