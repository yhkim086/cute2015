%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig.pdf
%%Creator: Adobe Acrobat 9.3.3
%%For: Yong
%%CreationDate: 2015-08-07, ¿ÀÈÄ 8:19:17
%%BoundingBox: 0 0 666 386
%%HiResBoundingBox: 0 0 665.1746 385.4652
%%CropBox: 0 0 665.1746 385.4652
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1291 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/"
   pdf:PDFVersion="1.4"
   pdf:Producer="Hancom PDF 1.3.0.404"
   xmp:CreatorTool="Hancom PDF 1.3.0.404"
   xmp:CreateDate="2015-08-07T20:18:31+09:00"
   xmp:ModifyDate="2015-08-07T20:19:04+09:00"
   xmp:MetadataDate="2015-08-07T20:19:04+09:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="4ED3F875-5F12-48EB-A462-74FBD022BABB"
   xmpMM:InstanceID="uuid:e760aff0-5335-4129-b74f-3f89b4900563"
   pdfaid:part="1"
   pdfaid:conformance="B">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yong</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-repair">PerformaceEval.xlsx</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:date>
    <rdf:Seq>
     <rdf:li>2015-08-07T20:18:31+09:00</rdf:li>
    </rdf:Seq>
   </dc:date>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -385.465 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 385.465 li
665.175 385.465 li
665.175 0 li
cp
clp
[1 0 0 1 -114.651 0 ]ct
gsave
90.861 -45.8546 mo
790.655 -45.8546 li
790.655 441.203 li
90.861 441.203 li
cp
eclp
gsave
90.861 -10.4736 mo
790.655 -10.4736 li
790.655 405.822 li
90.861 405.822 li
cp
eclp
91.22 405.942 mo
790.655 405.942 li
790.655 -10.2336 li
91.22 -10.2336 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
grestore
190.591 317.789 mo
763.444 317.789 li
763.444 56.8094 li
190.591 56.8094 li
cp
false sop
1 1 1 rgb
ef
190.591 293.442 mo
195.866 293.442 li
195.866 294.762 li
190.591 294.762 li
190.591 293.442 li
cp
199.821 293.442 mo
205.096 293.442 li
205.096 294.762 li
199.821 294.762 li
199.821 293.442 li
cp
209.051 293.442 mo
214.326 293.442 li
214.326 294.762 li
209.051 294.762 li
209.051 293.442 li
cp
218.281 293.442 mo
223.555 293.442 li
223.555 294.762 li
218.281 294.762 li
218.281 293.442 li
cp
227.511 293.442 mo
232.785 293.442 li
232.785 294.762 li
227.511 294.762 li
227.511 293.442 li
cp
236.741 293.442 mo
242.015 293.442 li
242.015 294.762 li
236.741 294.762 li
236.741 293.442 li
cp
245.971 293.442 mo
251.245 293.442 li
251.245 294.762 li
245.971 294.762 li
245.971 293.442 li
cp
255.201 293.442 mo
260.475 293.442 li
260.475 294.762 li
255.201 294.762 li
255.201 293.442 li
cp
264.431 293.442 mo
269.705 293.442 li
269.705 294.762 li
264.431 294.762 li
264.431 293.442 li
cp
273.661 293.442 mo
278.935 293.442 li
278.935 294.762 li
273.661 294.762 li
273.661 293.442 li
cp
282.891 293.442 mo
288.165 293.442 li
288.165 294.762 li
282.891 294.762 li
282.891 293.442 li
cp
292.12 293.442 mo
297.395 293.442 li
297.395 294.762 li
292.12 294.762 li
292.12 293.442 li
cp
301.35 293.442 mo
306.625 293.442 li
306.625 294.762 li
301.35 294.762 li
301.35 293.442 li
cp
310.58 293.442 mo
315.854 293.442 li
315.854 294.762 li
310.58 294.762 li
310.58 293.442 li
cp
319.81 293.442 mo
325.084 293.442 li
325.084 294.762 li
319.81 294.762 li
319.81 293.442 li
cp
329.04 293.442 mo
334.314 293.442 li
334.314 294.762 li
329.04 294.762 li
329.04 293.442 li
cp
338.27 293.442 mo
343.544 293.442 li
343.544 294.762 li
338.27 294.762 li
338.27 293.442 li
cp
347.5 293.442 mo
352.774 293.442 li
352.774 294.762 li
347.5 294.762 li
347.5 293.442 li
cp
356.73 293.442 mo
362.004 293.442 li
362.004 294.762 li
356.73 294.762 li
356.73 293.442 li
cp
365.96 293.442 mo
371.234 293.442 li
371.234 294.762 li
365.96 294.762 li
365.96 293.442 li
cp
375.19 293.442 mo
380.464 293.442 li
380.464 294.762 li
375.19 294.762 li
375.19 293.442 li
cp
384.419 293.442 mo
389.694 293.442 li
389.694 294.762 li
384.419 294.762 li
384.419 293.442 li
cp
393.649 293.442 mo
398.924 293.442 li
398.924 294.762 li
393.649 294.762 li
393.649 293.442 li
cp
402.879 293.442 mo
408.154 293.442 li
408.154 294.762 li
402.879 294.762 li
402.879 293.442 li
cp
412.109 293.442 mo
417.383 293.442 li
417.383 294.762 li
412.109 294.762 li
412.109 293.442 li
cp
421.339 293.442 mo
426.613 293.442 li
426.613 294.762 li
421.339 294.762 li
421.339 293.442 li
cp
430.569 293.442 mo
435.843 293.442 li
435.843 294.762 li
430.569 294.762 li
430.569 293.442 li
cp
439.799 293.442 mo
445.073 293.442 li
445.073 294.762 li
439.799 294.762 li
439.799 293.442 li
cp
449.029 293.442 mo
454.303 293.442 li
454.303 294.762 li
449.029 294.762 li
449.029 293.442 li
cp
458.259 293.442 mo
463.533 293.442 li
463.533 294.762 li
458.259 294.762 li
458.259 293.442 li
cp
467.489 293.442 mo
472.763 293.442 li
472.763 294.762 li
467.489 294.762 li
467.489 293.442 li
cp
476.718 293.442 mo
481.993 293.442 li
481.993 294.762 li
476.718 294.762 li
476.718 293.442 li
cp
485.948 293.442 mo
491.223 293.442 li
491.223 294.762 li
485.948 294.762 li
485.948 293.442 li
cp
495.178 293.442 mo
500.453 293.442 li
500.453 294.762 li
495.178 294.762 li
495.178 293.442 li
cp
504.408 293.442 mo
509.682 293.442 li
509.682 294.762 li
504.408 294.762 li
504.408 293.442 li
cp
513.638 293.442 mo
518.912 293.442 li
518.912 294.762 li
513.638 294.762 li
513.638 293.442 li
cp
522.868 293.442 mo
528.142 293.442 li
528.142 294.762 li
522.868 294.762 li
522.868 293.442 li
cp
532.098 293.442 mo
537.372 293.442 li
537.372 294.762 li
532.098 294.762 li
532.098 293.442 li
cp
541.328 293.442 mo
546.602 293.442 li
546.602 294.762 li
541.328 294.762 li
541.328 293.442 li
cp
550.558 293.442 mo
555.832 293.442 li
555.832 294.762 li
550.558 294.762 li
550.558 293.442 li
cp
559.788 293.442 mo
565.062 293.442 li
565.062 294.762 li
559.788 294.762 li
559.788 293.442 li
cp
569.018 293.442 mo
574.292 293.442 li
574.292 294.762 li
569.018 294.762 li
569.018 293.442 li
cp
578.247 293.442 mo
583.522 293.442 li
583.522 294.762 li
578.247 294.762 li
578.247 293.442 li
cp
587.477 293.442 mo
592.752 293.442 li
592.752 294.762 li
587.477 294.762 li
587.477 293.442 li
cp
596.707 293.442 mo
601.981 293.442 li
601.981 294.762 li
596.707 294.762 li
596.707 293.442 li
cp
605.937 293.442 mo
611.211 293.442 li
611.211 294.762 li
605.937 294.762 li
605.937 293.442 li
cp
615.167 293.442 mo
620.441 293.442 li
620.441 294.762 li
615.167 294.762 li
615.167 293.442 li
cp
624.397 293.442 mo
629.671 293.442 li
629.671 294.762 li
624.397 294.762 li
624.397 293.442 li
cp
633.627 293.442 mo
638.901 293.442 li
638.901 294.762 li
633.627 294.762 li
633.627 293.442 li
cp
642.857 293.442 mo
648.131 293.442 li
648.131 294.762 li
642.857 294.762 li
642.857 293.442 li
cp
652.087 293.442 mo
657.361 293.442 li
657.361 294.762 li
652.087 294.762 li
652.087 293.442 li
cp
661.317 293.442 mo
666.591 293.442 li
666.591 294.762 li
661.317 294.762 li
661.317 293.442 li
cp
670.546 293.442 mo
675.821 293.442 li
675.821 294.762 li
670.546 294.762 li
670.546 293.442 li
cp
679.776 293.442 mo
685.051 293.442 li
685.051 294.762 li
679.776 294.762 li
679.776 293.442 li
cp
689.006 293.442 mo
694.28 293.442 li
694.28 294.762 li
689.006 294.762 li
689.006 293.442 li
cp
698.236 293.442 mo
703.51 293.442 li
703.51 294.762 li
698.236 294.762 li
698.236 293.442 li
cp
707.466 293.442 mo
712.74 293.442 li
712.74 294.762 li
707.466 294.762 li
707.466 293.442 li
cp
716.696 293.442 mo
721.97 293.442 li
721.97 294.762 li
716.696 294.762 li
716.696 293.442 li
cp
725.926 293.442 mo
731.2 293.442 li
731.2 294.762 li
725.926 294.762 li
725.926 293.442 li
cp
735.156 293.442 mo
740.43 293.442 li
740.43 294.762 li
735.156 294.762 li
735.156 293.442 li
cp
744.386 293.442 mo
749.66 293.442 li
749.66 294.762 li
744.386 294.762 li
744.386 293.442 li
cp
753.616 293.442 mo
758.89 293.442 li
758.89 294.762 li
753.616 294.762 li
753.616 293.442 li
cp
762.845 293.442 mo
763.445 293.442 li
763.445 294.762 li
762.845 294.762 li
762.845 293.442 li
cp
190.591 269.695 mo
195.866 269.695 li
195.866 271.015 li
190.591 271.015 li
190.591 269.695 li
cp
199.821 269.695 mo
205.096 269.695 li
205.096 271.015 li
199.821 271.015 li
199.821 269.695 li
cp
209.051 269.695 mo
214.326 269.695 li
214.326 271.015 li
209.051 271.015 li
209.051 269.695 li
cp
218.281 269.695 mo
223.555 269.695 li
223.555 271.015 li
218.281 271.015 li
218.281 269.695 li
cp
227.511 269.695 mo
232.785 269.695 li
232.785 271.015 li
227.511 271.015 li
227.511 269.695 li
cp
236.741 269.695 mo
242.015 269.695 li
242.015 271.015 li
236.741 271.015 li
236.741 269.695 li
cp
245.971 269.695 mo
251.245 269.695 li
251.245 271.015 li
245.971 271.015 li
245.971 269.695 li
cp
255.201 269.695 mo
260.475 269.695 li
260.475 271.015 li
255.201 271.015 li
255.201 269.695 li
cp
264.431 269.695 mo
269.705 269.695 li
269.705 271.015 li
264.431 271.015 li
264.431 269.695 li
cp
273.661 269.695 mo
278.935 269.695 li
278.935 271.015 li
273.661 271.015 li
273.661 269.695 li
cp
282.891 269.695 mo
288.165 269.695 li
288.165 271.015 li
282.891 271.015 li
282.891 269.695 li
cp
292.12 269.695 mo
297.395 269.695 li
297.395 271.015 li
292.12 271.015 li
292.12 269.695 li
cp
301.35 269.695 mo
306.625 269.695 li
306.625 271.015 li
301.35 271.015 li
301.35 269.695 li
cp
310.58 269.695 mo
315.854 269.695 li
315.854 271.015 li
310.58 271.015 li
310.58 269.695 li
cp
319.81 269.695 mo
325.084 269.695 li
325.084 271.015 li
319.81 271.015 li
319.81 269.695 li
cp
329.04 269.695 mo
334.314 269.695 li
334.314 271.015 li
329.04 271.015 li
329.04 269.695 li
cp
338.27 269.695 mo
343.544 269.695 li
343.544 271.015 li
338.27 271.015 li
338.27 269.695 li
cp
347.5 269.695 mo
352.774 269.695 li
352.774 271.015 li
347.5 271.015 li
347.5 269.695 li
cp
356.73 269.695 mo
362.004 269.695 li
362.004 271.015 li
356.73 271.015 li
356.73 269.695 li
cp
365.96 269.695 mo
371.234 269.695 li
371.234 271.015 li
365.96 271.015 li
365.96 269.695 li
cp
375.19 269.695 mo
380.464 269.695 li
380.464 271.015 li
375.19 271.015 li
375.19 269.695 li
cp
384.419 269.695 mo
389.694 269.695 li
389.694 271.015 li
384.419 271.015 li
384.419 269.695 li
cp
393.649 269.695 mo
398.924 269.695 li
398.924 271.015 li
393.649 271.015 li
393.649 269.695 li
cp
402.879 269.695 mo
408.154 269.695 li
408.154 271.015 li
402.879 271.015 li
402.879 269.695 li
cp
412.109 269.695 mo
417.383 269.695 li
417.383 271.015 li
412.109 271.015 li
412.109 269.695 li
cp
421.339 269.695 mo
426.613 269.695 li
426.613 271.015 li
421.339 271.015 li
421.339 269.695 li
cp
430.569 269.695 mo
435.843 269.695 li
435.843 271.015 li
430.569 271.015 li
430.569 269.695 li
cp
439.799 269.695 mo
445.073 269.695 li
445.073 271.015 li
439.799 271.015 li
439.799 269.695 li
cp
449.029 269.695 mo
454.303 269.695 li
454.303 271.015 li
449.029 271.015 li
449.029 269.695 li
cp
458.259 269.695 mo
463.533 269.695 li
463.533 271.015 li
458.259 271.015 li
458.259 269.695 li
cp
467.489 269.695 mo
472.763 269.695 li
472.763 271.015 li
467.489 271.015 li
467.489 269.695 li
cp
476.718 269.695 mo
481.993 269.695 li
481.993 271.015 li
476.718 271.015 li
476.718 269.695 li
cp
485.948 269.695 mo
491.223 269.695 li
491.223 271.015 li
485.948 271.015 li
485.948 269.695 li
cp
495.178 269.695 mo
500.453 269.695 li
500.453 271.015 li
495.178 271.015 li
495.178 269.695 li
cp
504.408 269.695 mo
509.682 269.695 li
509.682 271.015 li
504.408 271.015 li
504.408 269.695 li
cp
513.638 269.695 mo
518.912 269.695 li
518.912 271.015 li
513.638 271.015 li
513.638 269.695 li
cp
522.868 269.695 mo
528.142 269.695 li
528.142 271.015 li
522.868 271.015 li
522.868 269.695 li
cp
532.098 269.695 mo
537.372 269.695 li
537.372 271.015 li
532.098 271.015 li
532.098 269.695 li
cp
541.328 269.695 mo
546.602 269.695 li
546.602 271.015 li
541.328 271.015 li
541.328 269.695 li
cp
550.558 269.695 mo
555.832 269.695 li
555.832 271.015 li
550.558 271.015 li
550.558 269.695 li
cp
559.788 269.695 mo
565.062 269.695 li
565.062 271.015 li
559.788 271.015 li
559.788 269.695 li
cp
569.018 269.695 mo
574.292 269.695 li
574.292 271.015 li
569.018 271.015 li
569.018 269.695 li
cp
578.247 269.695 mo
583.522 269.695 li
583.522 271.015 li
578.247 271.015 li
578.247 269.695 li
cp
587.477 269.695 mo
592.752 269.695 li
592.752 271.015 li
587.477 271.015 li
587.477 269.695 li
cp
596.707 269.695 mo
601.981 269.695 li
601.981 271.015 li
596.707 271.015 li
596.707 269.695 li
cp
605.937 269.695 mo
611.211 269.695 li
611.211 271.015 li
605.937 271.015 li
605.937 269.695 li
cp
615.167 269.695 mo
620.441 269.695 li
620.441 271.015 li
615.167 271.015 li
615.167 269.695 li
cp
624.397 269.695 mo
629.671 269.695 li
629.671 271.015 li
624.397 271.015 li
624.397 269.695 li
cp
633.627 269.695 mo
638.901 269.695 li
638.901 271.015 li
633.627 271.015 li
633.627 269.695 li
cp
642.857 269.695 mo
648.131 269.695 li
648.131 271.015 li
642.857 271.015 li
642.857 269.695 li
cp
652.087 269.695 mo
657.361 269.695 li
657.361 271.015 li
652.087 271.015 li
652.087 269.695 li
cp
661.317 269.695 mo
666.591 269.695 li
666.591 271.015 li
661.317 271.015 li
661.317 269.695 li
cp
670.546 269.695 mo
675.821 269.695 li
675.821 271.015 li
670.546 271.015 li
670.546 269.695 li
cp
679.776 269.695 mo
685.051 269.695 li
685.051 271.015 li
679.776 271.015 li
679.776 269.695 li
cp
689.006 269.695 mo
694.28 269.695 li
694.28 271.015 li
689.006 271.015 li
689.006 269.695 li
cp
698.236 269.695 mo
703.51 269.695 li
703.51 271.015 li
698.236 271.015 li
698.236 269.695 li
cp
707.466 269.695 mo
712.74 269.695 li
712.74 271.015 li
707.466 271.015 li
707.466 269.695 li
cp
716.696 269.695 mo
721.97 269.695 li
721.97 271.015 li
716.696 271.015 li
716.696 269.695 li
cp
725.926 269.695 mo
731.2 269.695 li
731.2 271.015 li
725.926 271.015 li
725.926 269.695 li
cp
735.156 269.695 mo
740.43 269.695 li
740.43 271.015 li
735.156 271.015 li
735.156 269.695 li
cp
744.386 269.695 mo
749.66 269.695 li
749.66 271.015 li
744.386 271.015 li
744.386 269.695 li
cp
753.616 269.695 mo
758.89 269.695 li
758.89 271.015 li
753.616 271.015 li
753.616 269.695 li
cp
762.845 269.695 mo
763.445 269.695 li
763.445 271.015 li
762.845 271.015 li
762.845 269.695 li
cp
190.591 245.948 mo
195.866 245.948 li
195.866 247.267 li
190.591 247.267 li
190.591 245.948 li
cp
199.821 245.948 mo
205.096 245.948 li
205.096 247.267 li
199.821 247.267 li
199.821 245.948 li
cp
209.051 245.948 mo
214.326 245.948 li
214.326 247.267 li
209.051 247.267 li
209.051 245.948 li
cp
218.281 245.948 mo
223.555 245.948 li
223.555 247.267 li
218.281 247.267 li
218.281 245.948 li
cp
227.511 245.948 mo
232.785 245.948 li
232.785 247.267 li
227.511 247.267 li
227.511 245.948 li
cp
236.741 245.948 mo
242.015 245.948 li
242.015 247.267 li
236.741 247.267 li
236.741 245.948 li
cp
245.971 245.948 mo
251.245 245.948 li
251.245 247.267 li
245.971 247.267 li
245.971 245.948 li
cp
255.201 245.948 mo
260.475 245.948 li
260.475 247.267 li
255.201 247.267 li
255.201 245.948 li
cp
264.431 245.948 mo
269.705 245.948 li
269.705 247.267 li
264.431 247.267 li
264.431 245.948 li
cp
273.661 245.948 mo
278.935 245.948 li
278.935 247.267 li
273.661 247.267 li
273.661 245.948 li
cp
282.891 245.948 mo
288.165 245.948 li
288.165 247.267 li
282.891 247.267 li
282.891 245.948 li
cp
292.12 245.948 mo
297.395 245.948 li
297.395 247.267 li
292.12 247.267 li
292.12 245.948 li
cp
301.35 245.948 mo
306.625 245.948 li
306.625 247.267 li
301.35 247.267 li
301.35 245.948 li
cp
310.58 245.948 mo
315.854 245.948 li
315.854 247.267 li
310.58 247.267 li
310.58 245.948 li
cp
319.81 245.948 mo
325.084 245.948 li
325.084 247.267 li
319.81 247.267 li
319.81 245.948 li
cp
329.04 245.948 mo
334.314 245.948 li
334.314 247.267 li
329.04 247.267 li
329.04 245.948 li
cp
338.27 245.948 mo
343.544 245.948 li
343.544 247.267 li
338.27 247.267 li
338.27 245.948 li
cp
347.5 245.948 mo
352.774 245.948 li
352.774 247.267 li
347.5 247.267 li
347.5 245.948 li
cp
356.73 245.948 mo
362.004 245.948 li
362.004 247.267 li
356.73 247.267 li
356.73 245.948 li
cp
365.96 245.948 mo
371.234 245.948 li
371.234 247.267 li
365.96 247.267 li
365.96 245.948 li
cp
375.19 245.948 mo
380.464 245.948 li
380.464 247.267 li
375.19 247.267 li
375.19 245.948 li
cp
384.419 245.948 mo
389.694 245.948 li
389.694 247.267 li
384.419 247.267 li
384.419 245.948 li
cp
393.649 245.948 mo
398.924 245.948 li
398.924 247.267 li
393.649 247.267 li
393.649 245.948 li
cp
402.879 245.948 mo
408.154 245.948 li
408.154 247.267 li
402.879 247.267 li
402.879 245.948 li
cp
412.109 245.948 mo
417.383 245.948 li
417.383 247.267 li
412.109 247.267 li
412.109 245.948 li
cp
421.339 245.948 mo
426.613 245.948 li
426.613 247.267 li
421.339 247.267 li
421.339 245.948 li
cp
430.569 245.948 mo
435.843 245.948 li
435.843 247.267 li
430.569 247.267 li
430.569 245.948 li
cp
439.799 245.948 mo
445.073 245.948 li
445.073 247.267 li
439.799 247.267 li
439.799 245.948 li
cp
449.029 245.948 mo
454.303 245.948 li
454.303 247.267 li
449.029 247.267 li
449.029 245.948 li
cp
458.259 245.948 mo
463.533 245.948 li
463.533 247.267 li
458.259 247.267 li
458.259 245.948 li
cp
467.489 245.948 mo
472.763 245.948 li
472.763 247.267 li
467.489 247.267 li
467.489 245.948 li
cp
476.718 245.948 mo
481.993 245.948 li
481.993 247.267 li
476.718 247.267 li
476.718 245.948 li
cp
485.948 245.948 mo
491.223 245.948 li
491.223 247.267 li
485.948 247.267 li
485.948 245.948 li
cp
495.178 245.948 mo
500.453 245.948 li
500.453 247.267 li
495.178 247.267 li
495.178 245.948 li
cp
504.408 245.948 mo
509.682 245.948 li
509.682 247.267 li
504.408 247.267 li
504.408 245.948 li
cp
513.638 245.948 mo
518.912 245.948 li
518.912 247.267 li
513.638 247.267 li
513.638 245.948 li
cp
522.868 245.948 mo
528.142 245.948 li
528.142 247.267 li
522.868 247.267 li
522.868 245.948 li
cp
532.098 245.948 mo
537.372 245.948 li
537.372 247.267 li
532.098 247.267 li
532.098 245.948 li
cp
541.328 245.948 mo
546.602 245.948 li
546.602 247.267 li
541.328 247.267 li
541.328 245.948 li
cp
550.558 245.948 mo
555.832 245.948 li
555.832 247.267 li
550.558 247.267 li
550.558 245.948 li
cp
559.788 245.948 mo
565.062 245.948 li
565.062 247.267 li
559.788 247.267 li
559.788 245.948 li
cp
569.018 245.948 mo
574.292 245.948 li
574.292 247.267 li
569.018 247.267 li
569.018 245.948 li
cp
578.247 245.948 mo
583.522 245.948 li
583.522 247.267 li
578.247 247.267 li
578.247 245.948 li
cp
587.477 245.948 mo
592.752 245.948 li
592.752 247.267 li
587.477 247.267 li
587.477 245.948 li
cp
596.707 245.948 mo
601.981 245.948 li
601.981 247.267 li
596.707 247.267 li
596.707 245.948 li
cp
605.937 245.948 mo
611.211 245.948 li
611.211 247.267 li
605.937 247.267 li
605.937 245.948 li
cp
615.167 245.948 mo
620.441 245.948 li
620.441 247.267 li
615.167 247.267 li
615.167 245.948 li
cp
624.397 245.948 mo
629.671 245.948 li
629.671 247.267 li
624.397 247.267 li
624.397 245.948 li
cp
633.627 245.948 mo
638.901 245.948 li
638.901 247.267 li
633.627 247.267 li
633.627 245.948 li
cp
642.857 245.948 mo
648.131 245.948 li
648.131 247.267 li
642.857 247.267 li
642.857 245.948 li
cp
652.087 245.948 mo
657.361 245.948 li
657.361 247.267 li
652.087 247.267 li
652.087 245.948 li
cp
661.317 245.948 mo
666.591 245.948 li
666.591 247.267 li
661.317 247.267 li
661.317 245.948 li
cp
670.546 245.948 mo
675.821 245.948 li
675.821 247.267 li
670.546 247.267 li
670.546 245.948 li
cp
679.776 245.948 mo
685.051 245.948 li
685.051 247.267 li
679.776 247.267 li
679.776 245.948 li
cp
689.006 245.948 mo
694.28 245.948 li
694.28 247.267 li
689.006 247.267 li
689.006 245.948 li
cp
698.236 245.948 mo
703.51 245.948 li
703.51 247.267 li
698.236 247.267 li
698.236 245.948 li
cp
707.466 245.948 mo
712.74 245.948 li
712.74 247.267 li
707.466 247.267 li
707.466 245.948 li
cp
716.696 245.948 mo
721.97 245.948 li
721.97 247.267 li
716.696 247.267 li
716.696 245.948 li
cp
725.926 245.948 mo
731.2 245.948 li
731.2 247.267 li
725.926 247.267 li
725.926 245.948 li
cp
735.156 245.948 mo
740.43 245.948 li
740.43 247.267 li
735.156 247.267 li
735.156 245.948 li
cp
744.386 245.948 mo
749.66 245.948 li
749.66 247.267 li
744.386 247.267 li
744.386 245.948 li
cp
753.616 245.948 mo
758.89 245.948 li
758.89 247.267 li
753.616 247.267 li
753.616 245.948 li
cp
762.845 245.948 mo
763.445 245.948 li
763.445 247.267 li
762.845 247.267 li
762.845 245.948 li
cp
190.591 222.201 mo
195.866 222.201 li
195.866 223.52 li
190.591 223.52 li
190.591 222.201 li
cp
199.821 222.201 mo
205.096 222.201 li
205.096 223.52 li
199.821 223.52 li
199.821 222.201 li
cp
209.051 222.201 mo
214.326 222.201 li
214.326 223.52 li
209.051 223.52 li
209.051 222.201 li
cp
218.281 222.201 mo
223.555 222.201 li
223.555 223.52 li
218.281 223.52 li
218.281 222.201 li
cp
227.511 222.201 mo
232.785 222.201 li
232.785 223.52 li
227.511 223.52 li
227.511 222.201 li
cp
236.741 222.201 mo
242.015 222.201 li
242.015 223.52 li
236.741 223.52 li
236.741 222.201 li
cp
245.971 222.201 mo
251.245 222.201 li
251.245 223.52 li
245.971 223.52 li
245.971 222.201 li
cp
255.201 222.201 mo
260.475 222.201 li
260.475 223.52 li
255.201 223.52 li
255.201 222.201 li
cp
264.431 222.201 mo
269.705 222.201 li
269.705 223.52 li
264.431 223.52 li
264.431 222.201 li
cp
273.661 222.201 mo
278.935 222.201 li
278.935 223.52 li
273.661 223.52 li
273.661 222.201 li
cp
282.891 222.201 mo
288.165 222.201 li
288.165 223.52 li
282.891 223.52 li
282.891 222.201 li
cp
292.12 222.201 mo
297.395 222.201 li
297.395 223.52 li
292.12 223.52 li
292.12 222.201 li
cp
301.35 222.201 mo
306.625 222.201 li
306.625 223.52 li
301.35 223.52 li
301.35 222.201 li
cp
310.58 222.201 mo
315.854 222.201 li
315.854 223.52 li
310.58 223.52 li
310.58 222.201 li
cp
319.81 222.201 mo
325.084 222.201 li
325.084 223.52 li
319.81 223.52 li
319.81 222.201 li
cp
329.04 222.201 mo
334.314 222.201 li
334.314 223.52 li
329.04 223.52 li
329.04 222.201 li
cp
338.27 222.201 mo
343.544 222.201 li
343.544 223.52 li
338.27 223.52 li
338.27 222.201 li
cp
347.5 222.201 mo
352.774 222.201 li
352.774 223.52 li
347.5 223.52 li
347.5 222.201 li
cp
356.73 222.201 mo
362.004 222.201 li
362.004 223.52 li
356.73 223.52 li
356.73 222.201 li
cp
365.96 222.201 mo
371.234 222.201 li
371.234 223.52 li
365.96 223.52 li
365.96 222.201 li
cp
375.19 222.201 mo
380.464 222.201 li
380.464 223.52 li
375.19 223.52 li
375.19 222.201 li
cp
384.419 222.201 mo
389.694 222.201 li
389.694 223.52 li
384.419 223.52 li
384.419 222.201 li
cp
393.649 222.201 mo
398.924 222.201 li
398.924 223.52 li
393.649 223.52 li
393.649 222.201 li
cp
402.879 222.201 mo
408.154 222.201 li
408.154 223.52 li
402.879 223.52 li
402.879 222.201 li
cp
412.109 222.201 mo
417.383 222.201 li
417.383 223.52 li
412.109 223.52 li
412.109 222.201 li
cp
421.339 222.201 mo
426.613 222.201 li
426.613 223.52 li
421.339 223.52 li
421.339 222.201 li
cp
430.569 222.201 mo
435.843 222.201 li
435.843 223.52 li
430.569 223.52 li
430.569 222.201 li
cp
439.799 222.201 mo
445.073 222.201 li
445.073 223.52 li
439.799 223.52 li
439.799 222.201 li
cp
449.029 222.201 mo
454.303 222.201 li
454.303 223.52 li
449.029 223.52 li
449.029 222.201 li
cp
458.259 222.201 mo
463.533 222.201 li
463.533 223.52 li
458.259 223.52 li
458.259 222.201 li
cp
467.489 222.201 mo
472.763 222.201 li
472.763 223.52 li
467.489 223.52 li
467.489 222.201 li
cp
476.718 222.201 mo
481.993 222.201 li
481.993 223.52 li
476.718 223.52 li
476.718 222.201 li
cp
485.948 222.201 mo
491.223 222.201 li
491.223 223.52 li
485.948 223.52 li
485.948 222.201 li
cp
495.178 222.201 mo
500.453 222.201 li
500.453 223.52 li
495.178 223.52 li
495.178 222.201 li
cp
504.408 222.201 mo
509.682 222.201 li
509.682 223.52 li
504.408 223.52 li
504.408 222.201 li
cp
513.638 222.201 mo
518.912 222.201 li
518.912 223.52 li
513.638 223.52 li
513.638 222.201 li
cp
522.868 222.201 mo
528.142 222.201 li
528.142 223.52 li
522.868 223.52 li
522.868 222.201 li
cp
532.098 222.201 mo
537.372 222.201 li
537.372 223.52 li
532.098 223.52 li
532.098 222.201 li
cp
541.328 222.201 mo
546.602 222.201 li
546.602 223.52 li
541.328 223.52 li
541.328 222.201 li
cp
550.558 222.201 mo
555.832 222.201 li
555.832 223.52 li
550.558 223.52 li
550.558 222.201 li
cp
559.788 222.201 mo
565.062 222.201 li
565.062 223.52 li
559.788 223.52 li
559.788 222.201 li
cp
569.018 222.201 mo
574.292 222.201 li
574.292 223.52 li
569.018 223.52 li
569.018 222.201 li
cp
578.247 222.201 mo
583.522 222.201 li
583.522 223.52 li
578.247 223.52 li
578.247 222.201 li
cp
587.477 222.201 mo
592.752 222.201 li
592.752 223.52 li
587.477 223.52 li
587.477 222.201 li
cp
596.707 222.201 mo
601.981 222.201 li
601.981 223.52 li
596.707 223.52 li
596.707 222.201 li
cp
605.937 222.201 mo
611.211 222.201 li
611.211 223.52 li
605.937 223.52 li
605.937 222.201 li
cp
615.167 222.201 mo
620.441 222.201 li
620.441 223.52 li
615.167 223.52 li
615.167 222.201 li
cp
624.397 222.201 mo
629.671 222.201 li
629.671 223.52 li
624.397 223.52 li
624.397 222.201 li
cp
633.627 222.201 mo
638.901 222.201 li
638.901 223.52 li
633.627 223.52 li
633.627 222.201 li
cp
642.857 222.201 mo
648.131 222.201 li
648.131 223.52 li
642.857 223.52 li
642.857 222.201 li
cp
652.087 222.201 mo
657.361 222.201 li
657.361 223.52 li
652.087 223.52 li
652.087 222.201 li
cp
661.317 222.201 mo
666.591 222.201 li
666.591 223.52 li
661.317 223.52 li
661.317 222.201 li
cp
670.546 222.201 mo
675.821 222.201 li
675.821 223.52 li
670.546 223.52 li
670.546 222.201 li
cp
679.776 222.201 mo
685.051 222.201 li
685.051 223.52 li
679.776 223.52 li
679.776 222.201 li
cp
689.006 222.201 mo
694.28 222.201 li
694.28 223.52 li
689.006 223.52 li
689.006 222.201 li
cp
698.236 222.201 mo
703.51 222.201 li
703.51 223.52 li
698.236 223.52 li
698.236 222.201 li
cp
707.466 222.201 mo
712.74 222.201 li
712.74 223.52 li
707.466 223.52 li
707.466 222.201 li
cp
716.696 222.201 mo
721.97 222.201 li
721.97 223.52 li
716.696 223.52 li
716.696 222.201 li
cp
725.926 222.201 mo
731.2 222.201 li
731.2 223.52 li
725.926 223.52 li
725.926 222.201 li
cp
735.156 222.201 mo
740.43 222.201 li
740.43 223.52 li
735.156 223.52 li
735.156 222.201 li
cp
744.386 222.201 mo
749.66 222.201 li
749.66 223.52 li
744.386 223.52 li
744.386 222.201 li
cp
753.616 222.201 mo
758.89 222.201 li
758.89 223.52 li
753.616 223.52 li
753.616 222.201 li
cp
762.845 222.201 mo
763.445 222.201 li
763.445 223.52 li
762.845 223.52 li
762.845 222.201 li
cp
190.591 198.454 mo
195.866 198.454 li
195.866 199.773 li
190.591 199.773 li
190.591 198.454 li
cp
199.821 198.454 mo
205.096 198.454 li
205.096 199.773 li
199.821 199.773 li
199.821 198.454 li
cp
209.051 198.454 mo
214.326 198.454 li
214.326 199.773 li
209.051 199.773 li
209.051 198.454 li
cp
218.281 198.454 mo
223.555 198.454 li
223.555 199.773 li
218.281 199.773 li
218.281 198.454 li
cp
227.511 198.454 mo
232.785 198.454 li
232.785 199.773 li
227.511 199.773 li
227.511 198.454 li
cp
236.741 198.454 mo
242.015 198.454 li
242.015 199.773 li
236.741 199.773 li
236.741 198.454 li
cp
245.971 198.454 mo
251.245 198.454 li
251.245 199.773 li
245.971 199.773 li
245.971 198.454 li
cp
255.201 198.454 mo
260.475 198.454 li
260.475 199.773 li
255.201 199.773 li
255.201 198.454 li
cp
264.431 198.454 mo
269.705 198.454 li
269.705 199.773 li
264.431 199.773 li
264.431 198.454 li
cp
273.661 198.454 mo
278.935 198.454 li
278.935 199.773 li
273.661 199.773 li
273.661 198.454 li
cp
282.891 198.454 mo
288.165 198.454 li
288.165 199.773 li
282.891 199.773 li
282.891 198.454 li
cp
292.12 198.454 mo
297.395 198.454 li
297.395 199.773 li
292.12 199.773 li
292.12 198.454 li
cp
301.35 198.454 mo
306.625 198.454 li
306.625 199.773 li
301.35 199.773 li
301.35 198.454 li
cp
310.58 198.454 mo
315.854 198.454 li
315.854 199.773 li
310.58 199.773 li
310.58 198.454 li
cp
319.81 198.454 mo
325.084 198.454 li
325.084 199.773 li
319.81 199.773 li
319.81 198.454 li
cp
329.04 198.454 mo
334.314 198.454 li
334.314 199.773 li
329.04 199.773 li
329.04 198.454 li
cp
338.27 198.454 mo
343.544 198.454 li
343.544 199.773 li
338.27 199.773 li
338.27 198.454 li
cp
347.5 198.454 mo
352.774 198.454 li
352.774 199.773 li
347.5 199.773 li
347.5 198.454 li
cp
356.73 198.454 mo
362.004 198.454 li
362.004 199.773 li
356.73 199.773 li
356.73 198.454 li
cp
365.96 198.454 mo
371.234 198.454 li
371.234 199.773 li
365.96 199.773 li
365.96 198.454 li
cp
375.19 198.454 mo
380.464 198.454 li
380.464 199.773 li
375.19 199.773 li
375.19 198.454 li
cp
384.419 198.454 mo
389.694 198.454 li
389.694 199.773 li
384.419 199.773 li
384.419 198.454 li
cp
393.649 198.454 mo
398.924 198.454 li
398.924 199.773 li
393.649 199.773 li
393.649 198.454 li
cp
402.879 198.454 mo
408.154 198.454 li
408.154 199.773 li
402.879 199.773 li
402.879 198.454 li
cp
412.109 198.454 mo
417.383 198.454 li
417.383 199.773 li
412.109 199.773 li
412.109 198.454 li
cp
421.339 198.454 mo
426.613 198.454 li
426.613 199.773 li
421.339 199.773 li
421.339 198.454 li
cp
430.569 198.454 mo
435.843 198.454 li
435.843 199.773 li
430.569 199.773 li
430.569 198.454 li
cp
439.799 198.454 mo
445.073 198.454 li
445.073 199.773 li
439.799 199.773 li
439.799 198.454 li
cp
449.029 198.454 mo
454.303 198.454 li
454.303 199.773 li
449.029 199.773 li
449.029 198.454 li
cp
458.259 198.454 mo
463.533 198.454 li
463.533 199.773 li
458.259 199.773 li
458.259 198.454 li
cp
467.489 198.454 mo
472.763 198.454 li
472.763 199.773 li
467.489 199.773 li
467.489 198.454 li
cp
476.718 198.454 mo
481.993 198.454 li
481.993 199.773 li
476.718 199.773 li
476.718 198.454 li
cp
485.948 198.454 mo
491.223 198.454 li
491.223 199.773 li
485.948 199.773 li
485.948 198.454 li
cp
495.178 198.454 mo
500.453 198.454 li
500.453 199.773 li
495.178 199.773 li
495.178 198.454 li
cp
504.408 198.454 mo
509.682 198.454 li
509.682 199.773 li
504.408 199.773 li
504.408 198.454 li
cp
513.638 198.454 mo
518.912 198.454 li
518.912 199.773 li
513.638 199.773 li
513.638 198.454 li
cp
522.868 198.454 mo
528.142 198.454 li
528.142 199.773 li
522.868 199.773 li
522.868 198.454 li
cp
532.098 198.454 mo
537.372 198.454 li
537.372 199.773 li
532.098 199.773 li
532.098 198.454 li
cp
541.328 198.454 mo
546.602 198.454 li
546.602 199.773 li
541.328 199.773 li
541.328 198.454 li
cp
550.558 198.454 mo
555.832 198.454 li
555.832 199.773 li
550.558 199.773 li
550.558 198.454 li
cp
559.788 198.454 mo
565.062 198.454 li
565.062 199.773 li
559.788 199.773 li
559.788 198.454 li
cp
569.018 198.454 mo
574.292 198.454 li
574.292 199.773 li
569.018 199.773 li
569.018 198.454 li
cp
578.247 198.454 mo
583.522 198.454 li
583.522 199.773 li
578.247 199.773 li
578.247 198.454 li
cp
587.477 198.454 mo
592.752 198.454 li
592.752 199.773 li
587.477 199.773 li
587.477 198.454 li
cp
596.707 198.454 mo
601.981 198.454 li
601.981 199.773 li
596.707 199.773 li
596.707 198.454 li
cp
605.937 198.454 mo
611.211 198.454 li
611.211 199.773 li
605.937 199.773 li
605.937 198.454 li
cp
615.167 198.454 mo
620.441 198.454 li
620.441 199.773 li
615.167 199.773 li
615.167 198.454 li
cp
624.397 198.454 mo
629.671 198.454 li
629.671 199.773 li
624.397 199.773 li
624.397 198.454 li
cp
633.627 198.454 mo
638.901 198.454 li
638.901 199.773 li
633.627 199.773 li
633.627 198.454 li
cp
642.857 198.454 mo
648.131 198.454 li
648.131 199.773 li
642.857 199.773 li
642.857 198.454 li
cp
652.087 198.454 mo
657.361 198.454 li
657.361 199.773 li
652.087 199.773 li
652.087 198.454 li
cp
661.317 198.454 mo
666.591 198.454 li
666.591 199.773 li
661.317 199.773 li
661.317 198.454 li
cp
670.546 198.454 mo
675.821 198.454 li
675.821 199.773 li
670.546 199.773 li
670.546 198.454 li
cp
679.776 198.454 mo
685.051 198.454 li
685.051 199.773 li
679.776 199.773 li
679.776 198.454 li
cp
689.006 198.454 mo
694.28 198.454 li
694.28 199.773 li
689.006 199.773 li
689.006 198.454 li
cp
698.236 198.454 mo
703.51 198.454 li
703.51 199.773 li
698.236 199.773 li
698.236 198.454 li
cp
707.466 198.454 mo
712.74 198.454 li
712.74 199.773 li
707.466 199.773 li
707.466 198.454 li
cp
716.696 198.454 mo
721.97 198.454 li
721.97 199.773 li
716.696 199.773 li
716.696 198.454 li
cp
725.926 198.454 mo
731.2 198.454 li
731.2 199.773 li
725.926 199.773 li
725.926 198.454 li
cp
735.156 198.454 mo
740.43 198.454 li
740.43 199.773 li
735.156 199.773 li
735.156 198.454 li
cp
744.386 198.454 mo
749.66 198.454 li
749.66 199.773 li
744.386 199.773 li
744.386 198.454 li
cp
753.616 198.454 mo
758.89 198.454 li
758.89 199.773 li
753.616 199.773 li
753.616 198.454 li
cp
762.845 198.454 mo
763.445 198.454 li
763.445 199.773 li
762.845 199.773 li
762.845 198.454 li
cp
190.591 174.826 mo
195.866 174.826 li
195.866 176.146 li
190.591 176.146 li
190.591 174.826 li
cp
199.821 174.826 mo
205.096 174.826 li
205.096 176.146 li
199.821 176.146 li
199.821 174.826 li
cp
209.051 174.826 mo
214.326 174.826 li
214.326 176.146 li
209.051 176.146 li
209.051 174.826 li
cp
218.281 174.826 mo
223.555 174.826 li
223.555 176.146 li
218.281 176.146 li
218.281 174.826 li
cp
227.511 174.826 mo
232.785 174.826 li
232.785 176.146 li
227.511 176.146 li
227.511 174.826 li
cp
236.741 174.826 mo
242.015 174.826 li
242.015 176.146 li
236.741 176.146 li
236.741 174.826 li
cp
245.971 174.826 mo
251.245 174.826 li
251.245 176.146 li
245.971 176.146 li
245.971 174.826 li
cp
255.201 174.826 mo
260.475 174.826 li
260.475 176.146 li
255.201 176.146 li
255.201 174.826 li
cp
264.431 174.826 mo
269.705 174.826 li
269.705 176.146 li
264.431 176.146 li
264.431 174.826 li
cp
273.661 174.826 mo
278.935 174.826 li
278.935 176.146 li
273.661 176.146 li
273.661 174.826 li
cp
282.891 174.826 mo
288.165 174.826 li
288.165 176.146 li
282.891 176.146 li
282.891 174.826 li
cp
292.12 174.826 mo
297.395 174.826 li
297.395 176.146 li
292.12 176.146 li
292.12 174.826 li
cp
301.35 174.826 mo
306.625 174.826 li
306.625 176.146 li
301.35 176.146 li
301.35 174.826 li
cp
310.58 174.826 mo
315.854 174.826 li
315.854 176.146 li
310.58 176.146 li
310.58 174.826 li
cp
319.81 174.826 mo
325.084 174.826 li
325.084 176.146 li
319.81 176.146 li
319.81 174.826 li
cp
329.04 174.826 mo
334.314 174.826 li
334.314 176.146 li
329.04 176.146 li
329.04 174.826 li
cp
338.27 174.826 mo
343.544 174.826 li
343.544 176.146 li
338.27 176.146 li
338.27 174.826 li
cp
347.5 174.826 mo
352.774 174.826 li
352.774 176.146 li
347.5 176.146 li
347.5 174.826 li
cp
356.73 174.826 mo
362.004 174.826 li
362.004 176.146 li
356.73 176.146 li
356.73 174.826 li
cp
365.96 174.826 mo
371.234 174.826 li
371.234 176.146 li
365.96 176.146 li
365.96 174.826 li
cp
375.19 174.826 mo
380.464 174.826 li
380.464 176.146 li
375.19 176.146 li
375.19 174.826 li
cp
384.419 174.826 mo
389.694 174.826 li
389.694 176.146 li
384.419 176.146 li
384.419 174.826 li
cp
393.649 174.826 mo
398.924 174.826 li
398.924 176.146 li
393.649 176.146 li
393.649 174.826 li
cp
402.879 174.826 mo
408.154 174.826 li
408.154 176.146 li
402.879 176.146 li
402.879 174.826 li
cp
412.109 174.826 mo
417.383 174.826 li
417.383 176.146 li
412.109 176.146 li
412.109 174.826 li
cp
421.339 174.826 mo
426.613 174.826 li
426.613 176.146 li
421.339 176.146 li
421.339 174.826 li
cp
430.569 174.826 mo
435.843 174.826 li
435.843 176.146 li
430.569 176.146 li
430.569 174.826 li
cp
439.799 174.826 mo
445.073 174.826 li
445.073 176.146 li
439.799 176.146 li
439.799 174.826 li
cp
449.029 174.826 mo
454.303 174.826 li
454.303 176.146 li
449.029 176.146 li
449.029 174.826 li
cp
458.259 174.826 mo
463.533 174.826 li
463.533 176.146 li
458.259 176.146 li
458.259 174.826 li
cp
467.489 174.826 mo
472.763 174.826 li
472.763 176.146 li
467.489 176.146 li
467.489 174.826 li
cp
476.718 174.826 mo
481.993 174.826 li
481.993 176.146 li
476.718 176.146 li
476.718 174.826 li
cp
485.948 174.826 mo
491.223 174.826 li
491.223 176.146 li
485.948 176.146 li
485.948 174.826 li
cp
495.178 174.826 mo
500.453 174.826 li
500.453 176.146 li
495.178 176.146 li
495.178 174.826 li
cp
504.408 174.826 mo
509.682 174.826 li
509.682 176.146 li
504.408 176.146 li
504.408 174.826 li
cp
513.638 174.826 mo
518.912 174.826 li
518.912 176.146 li
513.638 176.146 li
513.638 174.826 li
cp
522.868 174.826 mo
528.142 174.826 li
528.142 176.146 li
522.868 176.146 li
522.868 174.826 li
cp
532.098 174.826 mo
537.372 174.826 li
537.372 176.146 li
532.098 176.146 li
532.098 174.826 li
cp
541.328 174.826 mo
546.602 174.826 li
546.602 176.146 li
541.328 176.146 li
541.328 174.826 li
cp
550.558 174.826 mo
555.832 174.826 li
555.832 176.146 li
550.558 176.146 li
550.558 174.826 li
cp
559.788 174.826 mo
565.062 174.826 li
565.062 176.146 li
559.788 176.146 li
559.788 174.826 li
cp
569.018 174.826 mo
574.292 174.826 li
574.292 176.146 li
569.018 176.146 li
569.018 174.826 li
cp
578.247 174.826 mo
583.522 174.826 li
583.522 176.146 li
578.247 176.146 li
578.247 174.826 li
cp
587.477 174.826 mo
592.752 174.826 li
592.752 176.146 li
587.477 176.146 li
587.477 174.826 li
cp
596.707 174.826 mo
601.981 174.826 li
601.981 176.146 li
596.707 176.146 li
596.707 174.826 li
cp
605.937 174.826 mo
611.211 174.826 li
611.211 176.146 li
605.937 176.146 li
605.937 174.826 li
cp
615.167 174.826 mo
620.441 174.826 li
620.441 176.146 li
615.167 176.146 li
615.167 174.826 li
cp
624.397 174.826 mo
629.671 174.826 li
629.671 176.146 li
624.397 176.146 li
624.397 174.826 li
cp
633.627 174.826 mo
638.901 174.826 li
638.901 176.146 li
633.627 176.146 li
633.627 174.826 li
cp
642.857 174.826 mo
648.131 174.826 li
648.131 176.146 li
642.857 176.146 li
642.857 174.826 li
cp
652.087 174.826 mo
657.361 174.826 li
657.361 176.146 li
652.087 176.146 li
652.087 174.826 li
cp
661.317 174.826 mo
666.591 174.826 li
666.591 176.146 li
661.317 176.146 li
661.317 174.826 li
cp
670.546 174.826 mo
675.821 174.826 li
675.821 176.146 li
670.546 176.146 li
670.546 174.826 li
cp
679.776 174.826 mo
685.051 174.826 li
685.051 176.146 li
679.776 176.146 li
679.776 174.826 li
cp
689.006 174.826 mo
694.28 174.826 li
694.28 176.146 li
689.006 176.146 li
689.006 174.826 li
cp
698.236 174.826 mo
703.51 174.826 li
703.51 176.146 li
698.236 176.146 li
698.236 174.826 li
cp
707.466 174.826 mo
712.74 174.826 li
712.74 176.146 li
707.466 176.146 li
707.466 174.826 li
cp
716.696 174.826 mo
721.97 174.826 li
721.97 176.146 li
716.696 176.146 li
716.696 174.826 li
cp
725.926 174.826 mo
731.2 174.826 li
731.2 176.146 li
725.926 176.146 li
725.926 174.826 li
cp
735.156 174.826 mo
740.43 174.826 li
740.43 176.146 li
735.156 176.146 li
735.156 174.826 li
cp
744.386 174.826 mo
749.66 174.826 li
749.66 176.146 li
744.386 176.146 li
744.386 174.826 li
cp
753.616 174.826 mo
758.89 174.826 li
758.89 176.146 li
753.616 176.146 li
753.616 174.826 li
cp
762.845 174.826 mo
763.445 174.826 li
763.445 176.146 li
762.845 176.146 li
762.845 174.826 li
cp
190.591 151.079 mo
195.866 151.079 li
195.866 152.398 li
190.591 152.398 li
190.591 151.079 li
cp
199.821 151.079 mo
205.096 151.079 li
205.096 152.398 li
199.821 152.398 li
199.821 151.079 li
cp
209.051 151.079 mo
214.326 151.079 li
214.326 152.398 li
209.051 152.398 li
209.051 151.079 li
cp
218.281 151.079 mo
223.555 151.079 li
223.555 152.398 li
218.281 152.398 li
218.281 151.079 li
cp
227.511 151.079 mo
232.785 151.079 li
232.785 152.398 li
227.511 152.398 li
227.511 151.079 li
cp
236.741 151.079 mo
242.015 151.079 li
242.015 152.398 li
236.741 152.398 li
236.741 151.079 li
cp
245.971 151.079 mo
251.245 151.079 li
251.245 152.398 li
245.971 152.398 li
245.971 151.079 li
cp
255.201 151.079 mo
260.475 151.079 li
260.475 152.398 li
255.201 152.398 li
255.201 151.079 li
cp
264.431 151.079 mo
269.705 151.079 li
269.705 152.398 li
264.431 152.398 li
264.431 151.079 li
cp
273.661 151.079 mo
278.935 151.079 li
278.935 152.398 li
273.661 152.398 li
273.661 151.079 li
cp
282.891 151.079 mo
288.165 151.079 li
288.165 152.398 li
282.891 152.398 li
282.891 151.079 li
cp
292.12 151.079 mo
297.395 151.079 li
297.395 152.398 li
292.12 152.398 li
292.12 151.079 li
cp
301.35 151.079 mo
306.625 151.079 li
306.625 152.398 li
301.35 152.398 li
301.35 151.079 li
cp
310.58 151.079 mo
315.854 151.079 li
315.854 152.398 li
310.58 152.398 li
310.58 151.079 li
cp
319.81 151.079 mo
325.084 151.079 li
325.084 152.398 li
319.81 152.398 li
319.81 151.079 li
cp
329.04 151.079 mo
334.314 151.079 li
334.314 152.398 li
329.04 152.398 li
329.04 151.079 li
cp
338.27 151.079 mo
343.544 151.079 li
343.544 152.398 li
338.27 152.398 li
338.27 151.079 li
cp
347.5 151.079 mo
352.774 151.079 li
352.774 152.398 li
347.5 152.398 li
347.5 151.079 li
cp
356.73 151.079 mo
362.004 151.079 li
362.004 152.398 li
356.73 152.398 li
356.73 151.079 li
cp
365.96 151.079 mo
371.234 151.079 li
371.234 152.398 li
365.96 152.398 li
365.96 151.079 li
cp
375.19 151.079 mo
380.464 151.079 li
380.464 152.398 li
375.19 152.398 li
375.19 151.079 li
cp
384.419 151.079 mo
389.694 151.079 li
389.694 152.398 li
384.419 152.398 li
384.419 151.079 li
cp
393.649 151.079 mo
398.924 151.079 li
398.924 152.398 li
393.649 152.398 li
393.649 151.079 li
cp
402.879 151.079 mo
408.154 151.079 li
408.154 152.398 li
402.879 152.398 li
402.879 151.079 li
cp
412.109 151.079 mo
417.383 151.079 li
417.383 152.398 li
412.109 152.398 li
412.109 151.079 li
cp
421.339 151.079 mo
426.613 151.079 li
426.613 152.398 li
421.339 152.398 li
421.339 151.079 li
cp
430.569 151.079 mo
435.843 151.079 li
435.843 152.398 li
430.569 152.398 li
430.569 151.079 li
cp
439.799 151.079 mo
445.073 151.079 li
445.073 152.398 li
439.799 152.398 li
439.799 151.079 li
cp
449.029 151.079 mo
454.303 151.079 li
454.303 152.398 li
449.029 152.398 li
449.029 151.079 li
cp
458.259 151.079 mo
463.533 151.079 li
463.533 152.398 li
458.259 152.398 li
458.259 151.079 li
cp
467.489 151.079 mo
472.763 151.079 li
472.763 152.398 li
467.489 152.398 li
467.489 151.079 li
cp
476.718 151.079 mo
481.993 151.079 li
481.993 152.398 li
476.718 152.398 li
476.718 151.079 li
cp
485.948 151.079 mo
491.223 151.079 li
491.223 152.398 li
485.948 152.398 li
485.948 151.079 li
cp
495.178 151.079 mo
500.453 151.079 li
500.453 152.398 li
495.178 152.398 li
495.178 151.079 li
cp
504.408 151.079 mo
509.682 151.079 li
509.682 152.398 li
504.408 152.398 li
504.408 151.079 li
cp
513.638 151.079 mo
518.912 151.079 li
518.912 152.398 li
513.638 152.398 li
513.638 151.079 li
cp
522.868 151.079 mo
528.142 151.079 li
528.142 152.398 li
522.868 152.398 li
522.868 151.079 li
cp
532.098 151.079 mo
537.372 151.079 li
537.372 152.398 li
532.098 152.398 li
532.098 151.079 li
cp
541.328 151.079 mo
546.602 151.079 li
546.602 152.398 li
541.328 152.398 li
541.328 151.079 li
cp
550.558 151.079 mo
555.832 151.079 li
555.832 152.398 li
550.558 152.398 li
550.558 151.079 li
cp
559.788 151.079 mo
565.062 151.079 li
565.062 152.398 li
559.788 152.398 li
559.788 151.079 li
cp
569.018 151.079 mo
574.292 151.079 li
574.292 152.398 li
569.018 152.398 li
569.018 151.079 li
cp
578.247 151.079 mo
583.522 151.079 li
583.522 152.398 li
578.247 152.398 li
578.247 151.079 li
cp
587.477 151.079 mo
592.752 151.079 li
592.752 152.398 li
587.477 152.398 li
587.477 151.079 li
cp
596.707 151.079 mo
601.981 151.079 li
601.981 152.398 li
596.707 152.398 li
596.707 151.079 li
cp
605.937 151.079 mo
611.211 151.079 li
611.211 152.398 li
605.937 152.398 li
605.937 151.079 li
cp
615.167 151.079 mo
620.441 151.079 li
620.441 152.398 li
615.167 152.398 li
615.167 151.079 li
cp
624.397 151.079 mo
629.671 151.079 li
629.671 152.398 li
624.397 152.398 li
624.397 151.079 li
cp
633.627 151.079 mo
638.901 151.079 li
638.901 152.398 li
633.627 152.398 li
633.627 151.079 li
cp
642.857 151.079 mo
648.131 151.079 li
648.131 152.398 li
642.857 152.398 li
642.857 151.079 li
cp
652.087 151.079 mo
657.361 151.079 li
657.361 152.398 li
652.087 152.398 li
652.087 151.079 li
cp
661.317 151.079 mo
666.591 151.079 li
666.591 152.398 li
661.317 152.398 li
661.317 151.079 li
cp
670.546 151.079 mo
675.821 151.079 li
675.821 152.398 li
670.546 152.398 li
670.546 151.079 li
cp
679.776 151.079 mo
685.051 151.079 li
685.051 152.398 li
679.776 152.398 li
679.776 151.079 li
cp
689.006 151.079 mo
694.28 151.079 li
694.28 152.398 li
689.006 152.398 li
689.006 151.079 li
cp
698.236 151.079 mo
703.51 151.079 li
703.51 152.398 li
698.236 152.398 li
698.236 151.079 li
cp
707.466 151.079 mo
712.74 151.079 li
712.74 152.398 li
707.466 152.398 li
707.466 151.079 li
cp
716.696 151.079 mo
721.97 151.079 li
721.97 152.398 li
716.696 152.398 li
716.696 151.079 li
cp
725.926 151.079 mo
731.2 151.079 li
731.2 152.398 li
725.926 152.398 li
725.926 151.079 li
cp
735.156 151.079 mo
740.43 151.079 li
740.43 152.398 li
735.156 152.398 li
735.156 151.079 li
cp
744.386 151.079 mo
749.66 151.079 li
749.66 152.398 li
744.386 152.398 li
744.386 151.079 li
cp
753.616 151.079 mo
758.89 151.079 li
758.89 152.398 li
753.616 152.398 li
753.616 151.079 li
cp
762.845 151.079 mo
763.445 151.079 li
763.445 152.398 li
762.845 152.398 li
762.845 151.079 li
cp
190.591 127.332 mo
195.866 127.332 li
195.866 128.651 li
190.591 128.651 li
190.591 127.332 li
cp
199.821 127.332 mo
205.096 127.332 li
205.096 128.651 li
199.821 128.651 li
199.821 127.332 li
cp
209.051 127.332 mo
214.326 127.332 li
214.326 128.651 li
209.051 128.651 li
209.051 127.332 li
cp
218.281 127.332 mo
223.555 127.332 li
223.555 128.651 li
218.281 128.651 li
218.281 127.332 li
cp
227.511 127.332 mo
232.785 127.332 li
232.785 128.651 li
227.511 128.651 li
227.511 127.332 li
cp
236.741 127.332 mo
242.015 127.332 li
242.015 128.651 li
236.741 128.651 li
236.741 127.332 li
cp
245.971 127.332 mo
251.245 127.332 li
251.245 128.651 li
245.971 128.651 li
245.971 127.332 li
cp
255.201 127.332 mo
260.475 127.332 li
260.475 128.651 li
255.201 128.651 li
255.201 127.332 li
cp
264.431 127.332 mo
269.705 127.332 li
269.705 128.651 li
264.431 128.651 li
264.431 127.332 li
cp
273.661 127.332 mo
278.935 127.332 li
278.935 128.651 li
273.661 128.651 li
273.661 127.332 li
cp
282.891 127.332 mo
288.165 127.332 li
288.165 128.651 li
282.891 128.651 li
282.891 127.332 li
cp
292.12 127.332 mo
297.395 127.332 li
297.395 128.651 li
292.12 128.651 li
292.12 127.332 li
cp
301.35 127.332 mo
306.625 127.332 li
306.625 128.651 li
301.35 128.651 li
301.35 127.332 li
cp
310.58 127.332 mo
315.854 127.332 li
315.854 128.651 li
310.58 128.651 li
310.58 127.332 li
cp
319.81 127.332 mo
325.084 127.332 li
325.084 128.651 li
319.81 128.651 li
319.81 127.332 li
cp
329.04 127.332 mo
334.314 127.332 li
334.314 128.651 li
329.04 128.651 li
329.04 127.332 li
cp
338.27 127.332 mo
343.544 127.332 li
343.544 128.651 li
338.27 128.651 li
338.27 127.332 li
cp
347.5 127.332 mo
352.774 127.332 li
352.774 128.651 li
347.5 128.651 li
347.5 127.332 li
cp
356.73 127.332 mo
362.004 127.332 li
362.004 128.651 li
356.73 128.651 li
356.73 127.332 li
cp
365.96 127.332 mo
371.234 127.332 li
371.234 128.651 li
365.96 128.651 li
365.96 127.332 li
cp
375.19 127.332 mo
380.464 127.332 li
380.464 128.651 li
375.19 128.651 li
375.19 127.332 li
cp
384.419 127.332 mo
389.694 127.332 li
389.694 128.651 li
384.419 128.651 li
384.419 127.332 li
cp
393.649 127.332 mo
398.924 127.332 li
398.924 128.651 li
393.649 128.651 li
393.649 127.332 li
cp
402.879 127.332 mo
408.154 127.332 li
408.154 128.651 li
402.879 128.651 li
402.879 127.332 li
cp
412.109 127.332 mo
417.383 127.332 li
417.383 128.651 li
412.109 128.651 li
412.109 127.332 li
cp
421.339 127.332 mo
426.613 127.332 li
426.613 128.651 li
421.339 128.651 li
421.339 127.332 li
cp
430.569 127.332 mo
435.843 127.332 li
435.843 128.651 li
430.569 128.651 li
430.569 127.332 li
cp
439.799 127.332 mo
445.073 127.332 li
445.073 128.651 li
439.799 128.651 li
439.799 127.332 li
cp
449.029 127.332 mo
454.303 127.332 li
454.303 128.651 li
449.029 128.651 li
449.029 127.332 li
cp
458.259 127.332 mo
463.533 127.332 li
463.533 128.651 li
458.259 128.651 li
458.259 127.332 li
cp
467.489 127.332 mo
472.763 127.332 li
472.763 128.651 li
467.489 128.651 li
467.489 127.332 li
cp
476.718 127.332 mo
481.993 127.332 li
481.993 128.651 li
476.718 128.651 li
476.718 127.332 li
cp
485.948 127.332 mo
491.223 127.332 li
491.223 128.651 li
485.948 128.651 li
485.948 127.332 li
cp
495.178 127.332 mo
500.453 127.332 li
500.453 128.651 li
495.178 128.651 li
495.178 127.332 li
cp
504.408 127.332 mo
509.682 127.332 li
509.682 128.651 li
504.408 128.651 li
504.408 127.332 li
cp
513.638 127.332 mo
518.912 127.332 li
518.912 128.651 li
513.638 128.651 li
513.638 127.332 li
cp
522.868 127.332 mo
528.142 127.332 li
528.142 128.651 li
522.868 128.651 li
522.868 127.332 li
cp
532.098 127.332 mo
537.372 127.332 li
537.372 128.651 li
532.098 128.651 li
532.098 127.332 li
cp
541.328 127.332 mo
546.602 127.332 li
546.602 128.651 li
541.328 128.651 li
541.328 127.332 li
cp
550.558 127.332 mo
555.832 127.332 li
555.832 128.651 li
550.558 128.651 li
550.558 127.332 li
cp
559.788 127.332 mo
565.062 127.332 li
565.062 128.651 li
559.788 128.651 li
559.788 127.332 li
cp
569.018 127.332 mo
574.292 127.332 li
574.292 128.651 li
569.018 128.651 li
569.018 127.332 li
cp
578.247 127.332 mo
583.522 127.332 li
583.522 128.651 li
578.247 128.651 li
578.247 127.332 li
cp
587.477 127.332 mo
592.752 127.332 li
592.752 128.651 li
587.477 128.651 li
587.477 127.332 li
cp
596.707 127.332 mo
601.981 127.332 li
601.981 128.651 li
596.707 128.651 li
596.707 127.332 li
cp
605.937 127.332 mo
611.211 127.332 li
611.211 128.651 li
605.937 128.651 li
605.937 127.332 li
cp
615.167 127.332 mo
620.441 127.332 li
620.441 128.651 li
615.167 128.651 li
615.167 127.332 li
cp
624.397 127.332 mo
629.671 127.332 li
629.671 128.651 li
624.397 128.651 li
624.397 127.332 li
cp
633.627 127.332 mo
638.901 127.332 li
638.901 128.651 li
633.627 128.651 li
633.627 127.332 li
cp
642.857 127.332 mo
648.131 127.332 li
648.131 128.651 li
642.857 128.651 li
642.857 127.332 li
cp
652.087 127.332 mo
657.361 127.332 li
657.361 128.651 li
652.087 128.651 li
652.087 127.332 li
cp
661.317 127.332 mo
666.591 127.332 li
666.591 128.651 li
661.317 128.651 li
661.317 127.332 li
cp
670.546 127.332 mo
675.821 127.332 li
675.821 128.651 li
670.546 128.651 li
670.546 127.332 li
cp
679.776 127.332 mo
685.051 127.332 li
685.051 128.651 li
679.776 128.651 li
679.776 127.332 li
cp
689.006 127.332 mo
694.28 127.332 li
694.28 128.651 li
689.006 128.651 li
689.006 127.332 li
cp
698.236 127.332 mo
703.51 127.332 li
703.51 128.651 li
698.236 128.651 li
698.236 127.332 li
cp
707.466 127.332 mo
712.74 127.332 li
712.74 128.651 li
707.466 128.651 li
707.466 127.332 li
cp
716.696 127.332 mo
721.97 127.332 li
721.97 128.651 li
716.696 128.651 li
716.696 127.332 li
cp
725.926 127.332 mo
731.2 127.332 li
731.2 128.651 li
725.926 128.651 li
725.926 127.332 li
cp
735.156 127.332 mo
740.43 127.332 li
740.43 128.651 li
735.156 128.651 li
735.156 127.332 li
cp
744.386 127.332 mo
749.66 127.332 li
749.66 128.651 li
744.386 128.651 li
744.386 127.332 li
cp
753.616 127.332 mo
758.89 127.332 li
758.89 128.651 li
753.616 128.651 li
753.616 127.332 li
cp
762.845 127.332 mo
763.445 127.332 li
763.445 128.651 li
762.845 128.651 li
762.845 127.332 li
cp
190.591 103.585 mo
195.866 103.585 li
195.866 104.904 li
190.591 104.904 li
190.591 103.585 li
cp
199.821 103.585 mo
205.096 103.585 li
205.096 104.904 li
199.821 104.904 li
199.821 103.585 li
cp
209.051 103.585 mo
214.326 103.585 li
214.326 104.904 li
209.051 104.904 li
209.051 103.585 li
cp
218.281 103.585 mo
223.555 103.585 li
223.555 104.904 li
218.281 104.904 li
218.281 103.585 li
cp
227.511 103.585 mo
232.785 103.585 li
232.785 104.904 li
227.511 104.904 li
227.511 103.585 li
cp
236.741 103.585 mo
242.015 103.585 li
242.015 104.904 li
236.741 104.904 li
236.741 103.585 li
cp
245.971 103.585 mo
251.245 103.585 li
251.245 104.904 li
245.971 104.904 li
245.971 103.585 li
cp
255.201 103.585 mo
260.475 103.585 li
260.475 104.904 li
255.201 104.904 li
255.201 103.585 li
cp
264.431 103.585 mo
269.705 103.585 li
269.705 104.904 li
264.431 104.904 li
264.431 103.585 li
cp
273.661 103.585 mo
278.935 103.585 li
278.935 104.904 li
273.661 104.904 li
273.661 103.585 li
cp
282.891 103.585 mo
288.165 103.585 li
288.165 104.904 li
282.891 104.904 li
282.891 103.585 li
cp
292.12 103.585 mo
297.395 103.585 li
297.395 104.904 li
292.12 104.904 li
292.12 103.585 li
cp
301.35 103.585 mo
306.625 103.585 li
306.625 104.904 li
301.35 104.904 li
301.35 103.585 li
cp
310.58 103.585 mo
315.854 103.585 li
315.854 104.904 li
310.58 104.904 li
310.58 103.585 li
cp
319.81 103.585 mo
325.084 103.585 li
325.084 104.904 li
319.81 104.904 li
319.81 103.585 li
cp
329.04 103.585 mo
334.314 103.585 li
334.314 104.904 li
329.04 104.904 li
329.04 103.585 li
cp
338.27 103.585 mo
343.544 103.585 li
343.544 104.904 li
338.27 104.904 li
338.27 103.585 li
cp
347.5 103.585 mo
352.774 103.585 li
352.774 104.904 li
347.5 104.904 li
347.5 103.585 li
cp
356.73 103.585 mo
362.004 103.585 li
362.004 104.904 li
356.73 104.904 li
356.73 103.585 li
cp
365.96 103.585 mo
371.234 103.585 li
371.234 104.904 li
365.96 104.904 li
365.96 103.585 li
cp
375.19 103.585 mo
380.464 103.585 li
380.464 104.904 li
375.19 104.904 li
375.19 103.585 li
cp
384.419 103.585 mo
389.694 103.585 li
389.694 104.904 li
384.419 104.904 li
384.419 103.585 li
cp
393.649 103.585 mo
398.924 103.585 li
398.924 104.904 li
393.649 104.904 li
393.649 103.585 li
cp
402.879 103.585 mo
408.154 103.585 li
408.154 104.904 li
402.879 104.904 li
402.879 103.585 li
cp
412.109 103.585 mo
417.383 103.585 li
417.383 104.904 li
412.109 104.904 li
412.109 103.585 li
cp
421.339 103.585 mo
426.613 103.585 li
426.613 104.904 li
421.339 104.904 li
421.339 103.585 li
cp
430.569 103.585 mo
435.843 103.585 li
435.843 104.904 li
430.569 104.904 li
430.569 103.585 li
cp
439.799 103.585 mo
445.073 103.585 li
445.073 104.904 li
439.799 104.904 li
439.799 103.585 li
cp
449.029 103.585 mo
454.303 103.585 li
454.303 104.904 li
449.029 104.904 li
449.029 103.585 li
cp
458.259 103.585 mo
463.533 103.585 li
463.533 104.904 li
458.259 104.904 li
458.259 103.585 li
cp
467.489 103.585 mo
472.763 103.585 li
472.763 104.904 li
467.489 104.904 li
467.489 103.585 li
cp
476.718 103.585 mo
481.993 103.585 li
481.993 104.904 li
476.718 104.904 li
476.718 103.585 li
cp
485.948 103.585 mo
491.223 103.585 li
491.223 104.904 li
485.948 104.904 li
485.948 103.585 li
cp
495.178 103.585 mo
500.453 103.585 li
500.453 104.904 li
495.178 104.904 li
495.178 103.585 li
cp
504.408 103.585 mo
509.682 103.585 li
509.682 104.904 li
504.408 104.904 li
504.408 103.585 li
cp
513.638 103.585 mo
518.912 103.585 li
518.912 104.904 li
513.638 104.904 li
513.638 103.585 li
cp
522.868 103.585 mo
528.142 103.585 li
528.142 104.904 li
522.868 104.904 li
522.868 103.585 li
cp
532.098 103.585 mo
537.372 103.585 li
537.372 104.904 li
532.098 104.904 li
532.098 103.585 li
cp
541.328 103.585 mo
546.602 103.585 li
546.602 104.904 li
541.328 104.904 li
541.328 103.585 li
cp
550.558 103.585 mo
555.832 103.585 li
555.832 104.904 li
550.558 104.904 li
550.558 103.585 li
cp
559.788 103.585 mo
565.062 103.585 li
565.062 104.904 li
559.788 104.904 li
559.788 103.585 li
cp
569.018 103.585 mo
574.292 103.585 li
574.292 104.904 li
569.018 104.904 li
569.018 103.585 li
cp
578.247 103.585 mo
583.522 103.585 li
583.522 104.904 li
578.247 104.904 li
578.247 103.585 li
cp
587.477 103.585 mo
592.752 103.585 li
592.752 104.904 li
587.477 104.904 li
587.477 103.585 li
cp
596.707 103.585 mo
601.981 103.585 li
601.981 104.904 li
596.707 104.904 li
596.707 103.585 li
cp
605.937 103.585 mo
611.211 103.585 li
611.211 104.904 li
605.937 104.904 li
605.937 103.585 li
cp
615.167 103.585 mo
620.441 103.585 li
620.441 104.904 li
615.167 104.904 li
615.167 103.585 li
cp
624.397 103.585 mo
629.671 103.585 li
629.671 104.904 li
624.397 104.904 li
624.397 103.585 li
cp
633.627 103.585 mo
638.901 103.585 li
638.901 104.904 li
633.627 104.904 li
633.627 103.585 li
cp
642.857 103.585 mo
648.131 103.585 li
648.131 104.904 li
642.857 104.904 li
642.857 103.585 li
cp
652.087 103.585 mo
657.361 103.585 li
657.361 104.904 li
652.087 104.904 li
652.087 103.585 li
cp
661.317 103.585 mo
666.591 103.585 li
666.591 104.904 li
661.317 104.904 li
661.317 103.585 li
cp
670.546 103.585 mo
675.821 103.585 li
675.821 104.904 li
670.546 104.904 li
670.546 103.585 li
cp
679.776 103.585 mo
685.051 103.585 li
685.051 104.904 li
679.776 104.904 li
679.776 103.585 li
cp
689.006 103.585 mo
694.28 103.585 li
694.28 104.904 li
689.006 104.904 li
689.006 103.585 li
cp
698.236 103.585 mo
703.51 103.585 li
703.51 104.904 li
698.236 104.904 li
698.236 103.585 li
cp
707.466 103.585 mo
712.74 103.585 li
712.74 104.904 li
707.466 104.904 li
707.466 103.585 li
cp
716.696 103.585 mo
721.97 103.585 li
721.97 104.904 li
716.696 104.904 li
716.696 103.585 li
cp
725.926 103.585 mo
731.2 103.585 li
731.2 104.904 li
725.926 104.904 li
725.926 103.585 li
cp
735.156 103.585 mo
740.43 103.585 li
740.43 104.904 li
735.156 104.904 li
735.156 103.585 li
cp
744.386 103.585 mo
749.66 103.585 li
749.66 104.904 li
744.386 104.904 li
744.386 103.585 li
cp
753.616 103.585 mo
758.89 103.585 li
758.89 104.904 li
753.616 104.904 li
753.616 103.585 li
cp
762.845 103.585 mo
763.445 103.585 li
763.445 104.904 li
762.845 104.904 li
762.845 103.585 li
cp
190.591 79.9574 mo
195.866 79.9574 li
195.866 81.2774 li
190.591 81.2774 li
190.591 79.9574 li
cp
199.821 79.9574 mo
205.096 79.9574 li
205.096 81.2774 li
199.821 81.2774 li
199.821 79.9574 li
cp
209.051 79.9574 mo
214.326 79.9574 li
214.326 81.2774 li
209.051 81.2774 li
209.051 79.9574 li
cp
218.281 79.9574 mo
223.555 79.9574 li
223.555 81.2774 li
218.281 81.2774 li
218.281 79.9574 li
cp
227.511 79.9574 mo
232.785 79.9574 li
232.785 81.2774 li
227.511 81.2774 li
227.511 79.9574 li
cp
236.741 79.9574 mo
242.015 79.9574 li
242.015 81.2774 li
236.741 81.2774 li
236.741 79.9574 li
cp
245.971 79.9574 mo
251.245 79.9574 li
251.245 81.2774 li
245.971 81.2774 li
245.971 79.9574 li
cp
255.201 79.9574 mo
260.475 79.9574 li
260.475 81.2774 li
255.201 81.2774 li
255.201 79.9574 li
cp
264.431 79.9574 mo
269.705 79.9574 li
269.705 81.2774 li
264.431 81.2774 li
264.431 79.9574 li
cp
273.661 79.9574 mo
278.935 79.9574 li
278.935 81.2774 li
273.661 81.2774 li
273.661 79.9574 li
cp
282.891 79.9574 mo
288.165 79.9574 li
288.165 81.2774 li
282.891 81.2774 li
282.891 79.9574 li
cp
292.12 79.9574 mo
297.395 79.9574 li
297.395 81.2774 li
292.12 81.2774 li
292.12 79.9574 li
cp
301.35 79.9574 mo
306.625 79.9574 li
306.625 81.2774 li
301.35 81.2774 li
301.35 79.9574 li
cp
310.58 79.9574 mo
315.854 79.9574 li
315.854 81.2774 li
310.58 81.2774 li
310.58 79.9574 li
cp
319.81 79.9574 mo
325.084 79.9574 li
325.084 81.2774 li
319.81 81.2774 li
319.81 79.9574 li
cp
329.04 79.9574 mo
334.314 79.9574 li
334.314 81.2774 li
329.04 81.2774 li
329.04 79.9574 li
cp
338.27 79.9574 mo
343.544 79.9574 li
343.544 81.2774 li
338.27 81.2774 li
338.27 79.9574 li
cp
347.5 79.9574 mo
352.774 79.9574 li
352.774 81.2774 li
347.5 81.2774 li
347.5 79.9574 li
cp
356.73 79.9574 mo
362.004 79.9574 li
362.004 81.2774 li
356.73 81.2774 li
356.73 79.9574 li
cp
365.96 79.9574 mo
371.234 79.9574 li
371.234 81.2774 li
365.96 81.2774 li
365.96 79.9574 li
cp
375.19 79.9574 mo
380.464 79.9574 li
380.464 81.2774 li
375.19 81.2774 li
375.19 79.9574 li
cp
384.419 79.9574 mo
389.694 79.9574 li
389.694 81.2774 li
384.419 81.2774 li
384.419 79.9574 li
cp
393.649 79.9574 mo
398.924 79.9574 li
398.924 81.2774 li
393.649 81.2774 li
393.649 79.9574 li
cp
402.879 79.9574 mo
408.154 79.9574 li
408.154 81.2774 li
402.879 81.2774 li
402.879 79.9574 li
cp
412.109 79.9574 mo
417.383 79.9574 li
417.383 81.2774 li
412.109 81.2774 li
412.109 79.9574 li
cp
421.339 79.9574 mo
426.613 79.9574 li
426.613 81.2774 li
421.339 81.2774 li
421.339 79.9574 li
cp
430.569 79.9574 mo
435.843 79.9574 li
435.843 81.2774 li
430.569 81.2774 li
430.569 79.9574 li
cp
439.799 79.9574 mo
445.073 79.9574 li
445.073 81.2774 li
439.799 81.2774 li
439.799 79.9574 li
cp
449.029 79.9574 mo
454.303 79.9574 li
454.303 81.2774 li
449.029 81.2774 li
449.029 79.9574 li
cp
458.259 79.9574 mo
463.533 79.9574 li
463.533 81.2774 li
458.259 81.2774 li
458.259 79.9574 li
cp
467.489 79.9574 mo
472.763 79.9574 li
472.763 81.2774 li
467.489 81.2774 li
467.489 79.9574 li
cp
476.718 79.9574 mo
481.993 79.9574 li
481.993 81.2774 li
476.718 81.2774 li
476.718 79.9574 li
cp
485.948 79.9574 mo
491.223 79.9574 li
491.223 81.2774 li
485.948 81.2774 li
485.948 79.9574 li
cp
495.178 79.9574 mo
500.453 79.9574 li
500.453 81.2774 li
495.178 81.2774 li
495.178 79.9574 li
cp
504.408 79.9574 mo
509.682 79.9574 li
509.682 81.2774 li
504.408 81.2774 li
504.408 79.9574 li
cp
513.638 79.9574 mo
518.912 79.9574 li
518.912 81.2774 li
513.638 81.2774 li
513.638 79.9574 li
cp
522.868 79.9574 mo
528.142 79.9574 li
528.142 81.2774 li
522.868 81.2774 li
522.868 79.9574 li
cp
532.098 79.9574 mo
537.372 79.9574 li
537.372 81.2774 li
532.098 81.2774 li
532.098 79.9574 li
cp
541.328 79.9574 mo
546.602 79.9574 li
546.602 81.2774 li
541.328 81.2774 li
541.328 79.9574 li
cp
550.558 79.9574 mo
555.832 79.9574 li
555.832 81.2774 li
550.558 81.2774 li
550.558 79.9574 li
cp
559.788 79.9574 mo
565.062 79.9574 li
565.062 81.2774 li
559.788 81.2774 li
559.788 79.9574 li
cp
569.018 79.9574 mo
574.292 79.9574 li
574.292 81.2774 li
569.018 81.2774 li
569.018 79.9574 li
cp
578.247 79.9574 mo
583.522 79.9574 li
583.522 81.2774 li
578.247 81.2774 li
578.247 79.9574 li
cp
587.477 79.9574 mo
592.752 79.9574 li
592.752 81.2774 li
587.477 81.2774 li
587.477 79.9574 li
cp
596.707 79.9574 mo
601.981 79.9574 li
601.981 81.2774 li
596.707 81.2774 li
596.707 79.9574 li
cp
605.937 79.9574 mo
611.211 79.9574 li
611.211 81.2774 li
605.937 81.2774 li
605.937 79.9574 li
cp
615.167 79.9574 mo
620.441 79.9574 li
620.441 81.2774 li
615.167 81.2774 li
615.167 79.9574 li
cp
624.397 79.9574 mo
629.671 79.9574 li
629.671 81.2774 li
624.397 81.2774 li
624.397 79.9574 li
cp
633.627 79.9574 mo
638.901 79.9574 li
638.901 81.2774 li
633.627 81.2774 li
633.627 79.9574 li
cp
642.857 79.9574 mo
648.131 79.9574 li
648.131 81.2774 li
642.857 81.2774 li
642.857 79.9574 li
cp
652.087 79.9574 mo
657.361 79.9574 li
657.361 81.2774 li
652.087 81.2774 li
652.087 79.9574 li
cp
661.317 79.9574 mo
666.591 79.9574 li
666.591 81.2774 li
661.317 81.2774 li
661.317 79.9574 li
cp
670.546 79.9574 mo
675.821 79.9574 li
675.821 81.2774 li
670.546 81.2774 li
670.546 79.9574 li
cp
679.776 79.9574 mo
685.051 79.9574 li
685.051 81.2774 li
679.776 81.2774 li
679.776 79.9574 li
cp
689.006 79.9574 mo
694.28 79.9574 li
694.28 81.2774 li
689.006 81.2774 li
689.006 79.9574 li
cp
698.236 79.9574 mo
703.51 79.9574 li
703.51 81.2774 li
698.236 81.2774 li
698.236 79.9574 li
cp
707.466 79.9574 mo
712.74 79.9574 li
712.74 81.2774 li
707.466 81.2774 li
707.466 79.9574 li
cp
716.696 79.9574 mo
721.97 79.9574 li
721.97 81.2774 li
716.696 81.2774 li
716.696 79.9574 li
cp
725.926 79.9574 mo
731.2 79.9574 li
731.2 81.2774 li
725.926 81.2774 li
725.926 79.9574 li
cp
735.156 79.9574 mo
740.43 79.9574 li
740.43 81.2774 li
735.156 81.2774 li
735.156 79.9574 li
cp
744.386 79.9574 mo
749.66 79.9574 li
749.66 81.2774 li
744.386 81.2774 li
744.386 79.9574 li
cp
753.616 79.9574 mo
758.89 79.9574 li
758.89 81.2774 li
753.616 81.2774 li
753.616 79.9574 li
cp
762.845 79.9574 mo
763.445 79.9574 li
763.445 81.2774 li
762.845 81.2774 li
762.845 79.9574 li
cp
190.591 56.2104 mo
195.866 56.2104 li
195.866 57.5294 li
190.591 57.5294 li
190.591 56.2104 li
cp
199.821 56.2104 mo
205.096 56.2104 li
205.096 57.5294 li
199.821 57.5294 li
199.821 56.2104 li
cp
209.051 56.2104 mo
214.326 56.2104 li
214.326 57.5294 li
209.051 57.5294 li
209.051 56.2104 li
cp
218.281 56.2104 mo
223.555 56.2104 li
223.555 57.5294 li
218.281 57.5294 li
218.281 56.2104 li
cp
227.511 56.2104 mo
232.785 56.2104 li
232.785 57.5294 li
227.511 57.5294 li
227.511 56.2104 li
cp
236.741 56.2104 mo
242.015 56.2104 li
242.015 57.5294 li
236.741 57.5294 li
236.741 56.2104 li
cp
245.971 56.2104 mo
251.245 56.2104 li
251.245 57.5294 li
245.971 57.5294 li
245.971 56.2104 li
cp
255.201 56.2104 mo
260.475 56.2104 li
260.475 57.5294 li
255.201 57.5294 li
255.201 56.2104 li
cp
264.431 56.2104 mo
269.705 56.2104 li
269.705 57.5294 li
264.431 57.5294 li
264.431 56.2104 li
cp
273.661 56.2104 mo
278.935 56.2104 li
278.935 57.5294 li
273.661 57.5294 li
273.661 56.2104 li
cp
282.891 56.2104 mo
288.165 56.2104 li
288.165 57.5294 li
282.891 57.5294 li
282.891 56.2104 li
cp
292.12 56.2104 mo
297.395 56.2104 li
297.395 57.5294 li
292.12 57.5294 li
292.12 56.2104 li
cp
301.35 56.2104 mo
306.625 56.2104 li
306.625 57.5294 li
301.35 57.5294 li
301.35 56.2104 li
cp
310.58 56.2104 mo
315.854 56.2104 li
315.854 57.5294 li
310.58 57.5294 li
310.58 56.2104 li
cp
319.81 56.2104 mo
325.084 56.2104 li
325.084 57.5294 li
319.81 57.5294 li
319.81 56.2104 li
cp
329.04 56.2104 mo
334.314 56.2104 li
334.314 57.5294 li
329.04 57.5294 li
329.04 56.2104 li
cp
338.27 56.2104 mo
343.544 56.2104 li
343.544 57.5294 li
338.27 57.5294 li
338.27 56.2104 li
cp
347.5 56.2104 mo
352.774 56.2104 li
352.774 57.5294 li
347.5 57.5294 li
347.5 56.2104 li
cp
356.73 56.2104 mo
362.004 56.2104 li
362.004 57.5294 li
356.73 57.5294 li
356.73 56.2104 li
cp
365.96 56.2104 mo
371.234 56.2104 li
371.234 57.5294 li
365.96 57.5294 li
365.96 56.2104 li
cp
375.19 56.2104 mo
380.464 56.2104 li
380.464 57.5294 li
375.19 57.5294 li
375.19 56.2104 li
cp
384.419 56.2104 mo
389.694 56.2104 li
389.694 57.5294 li
384.419 57.5294 li
384.419 56.2104 li
cp
393.649 56.2104 mo
398.924 56.2104 li
398.924 57.5294 li
393.649 57.5294 li
393.649 56.2104 li
cp
402.879 56.2104 mo
408.154 56.2104 li
408.154 57.5294 li
402.879 57.5294 li
402.879 56.2104 li
cp
412.109 56.2104 mo
417.383 56.2104 li
417.383 57.5294 li
412.109 57.5294 li
412.109 56.2104 li
cp
421.339 56.2104 mo
426.613 56.2104 li
426.613 57.5294 li
421.339 57.5294 li
421.339 56.2104 li
cp
430.569 56.2104 mo
435.843 56.2104 li
435.843 57.5294 li
430.569 57.5294 li
430.569 56.2104 li
cp
439.799 56.2104 mo
445.073 56.2104 li
445.073 57.5294 li
439.799 57.5294 li
439.799 56.2104 li
cp
449.029 56.2104 mo
454.303 56.2104 li
454.303 57.5294 li
449.029 57.5294 li
449.029 56.2104 li
cp
458.259 56.2104 mo
463.533 56.2104 li
463.533 57.5294 li
458.259 57.5294 li
458.259 56.2104 li
cp
467.489 56.2104 mo
472.763 56.2104 li
472.763 57.5294 li
467.489 57.5294 li
467.489 56.2104 li
cp
476.718 56.2104 mo
481.993 56.2104 li
481.993 57.5294 li
476.718 57.5294 li
476.718 56.2104 li
cp
485.948 56.2104 mo
491.223 56.2104 li
491.223 57.5294 li
485.948 57.5294 li
485.948 56.2104 li
cp
495.178 56.2104 mo
500.453 56.2104 li
500.453 57.5294 li
495.178 57.5294 li
495.178 56.2104 li
cp
504.408 56.2104 mo
509.682 56.2104 li
509.682 57.5294 li
504.408 57.5294 li
504.408 56.2104 li
cp
513.638 56.2104 mo
518.912 56.2104 li
518.912 57.5294 li
513.638 57.5294 li
513.638 56.2104 li
cp
522.868 56.2104 mo
528.142 56.2104 li
528.142 57.5294 li
522.868 57.5294 li
522.868 56.2104 li
cp
532.098 56.2104 mo
537.372 56.2104 li
537.372 57.5294 li
532.098 57.5294 li
532.098 56.2104 li
cp
541.328 56.2104 mo
546.602 56.2104 li
546.602 57.5294 li
541.328 57.5294 li
541.328 56.2104 li
cp
550.558 56.2104 mo
555.832 56.2104 li
555.832 57.5294 li
550.558 57.5294 li
550.558 56.2104 li
cp
559.788 56.2104 mo
565.062 56.2104 li
565.062 57.5294 li
559.788 57.5294 li
559.788 56.2104 li
cp
569.018 56.2104 mo
574.292 56.2104 li
574.292 57.5294 li
569.018 57.5294 li
569.018 56.2104 li
cp
578.247 56.2104 mo
583.522 56.2104 li
583.522 57.5294 li
578.247 57.5294 li
578.247 56.2104 li
cp
587.477 56.2104 mo
592.752 56.2104 li
592.752 57.5294 li
587.477 57.5294 li
587.477 56.2104 li
cp
596.707 56.2104 mo
601.981 56.2104 li
601.981 57.5294 li
596.707 57.5294 li
596.707 56.2104 li
cp
605.937 56.2104 mo
611.211 56.2104 li
611.211 57.5294 li
605.937 57.5294 li
605.937 56.2104 li
cp
615.167 56.2104 mo
620.441 56.2104 li
620.441 57.5294 li
615.167 57.5294 li
615.167 56.2104 li
cp
624.397 56.2104 mo
629.671 56.2104 li
629.671 57.5294 li
624.397 57.5294 li
624.397 56.2104 li
cp
633.627 56.2104 mo
638.901 56.2104 li
638.901 57.5294 li
633.627 57.5294 li
633.627 56.2104 li
cp
642.857 56.2104 mo
648.131 56.2104 li
648.131 57.5294 li
642.857 57.5294 li
642.857 56.2104 li
cp
652.087 56.2104 mo
657.361 56.2104 li
657.361 57.5294 li
652.087 57.5294 li
652.087 56.2104 li
cp
661.317 56.2104 mo
666.591 56.2104 li
666.591 57.5294 li
661.317 57.5294 li
661.317 56.2104 li
cp
670.546 56.2104 mo
675.821 56.2104 li
675.821 57.5294 li
670.546 57.5294 li
670.546 56.2104 li
cp
679.776 56.2104 mo
685.051 56.2104 li
685.051 57.5294 li
679.776 57.5294 li
679.776 56.2104 li
cp
689.006 56.2104 mo
694.28 56.2104 li
694.28 57.5294 li
689.006 57.5294 li
689.006 56.2104 li
cp
698.236 56.2104 mo
703.51 56.2104 li
703.51 57.5294 li
698.236 57.5294 li
698.236 56.2104 li
cp
707.466 56.2104 mo
712.74 56.2104 li
712.74 57.5294 li
707.466 57.5294 li
707.466 56.2104 li
cp
716.696 56.2104 mo
721.97 56.2104 li
721.97 57.5294 li
716.696 57.5294 li
716.696 56.2104 li
cp
725.926 56.2104 mo
731.2 56.2104 li
731.2 57.5294 li
725.926 57.5294 li
725.926 56.2104 li
cp
735.156 56.2104 mo
740.43 56.2104 li
740.43 57.5294 li
735.156 57.5294 li
735.156 56.2104 li
cp
744.386 56.2104 mo
749.66 56.2104 li
749.66 57.5294 li
744.386 57.5294 li
744.386 56.2104 li
cp
753.616 56.2104 mo
758.89 56.2104 li
758.89 57.5294 li
753.616 57.5294 li
753.616 56.2104 li
cp
762.845 56.2104 mo
763.445 56.2104 li
763.445 57.5294 li
762.845 57.5294 li
762.845 56.2104 li
cp
.597832 .603409 .617693 rgb
f
189.992 317.669 mo
189.992 56.8104 li
191.311 56.8104 li
191.311 317.669 li
cp
f
184.478 317.07 mo
190.591 317.07 li
190.591 318.389 li
184.478 318.389 li
184.478 317.07 li
cp
184.478 293.442 mo
190.591 293.442 li
190.591 294.762 li
184.478 294.762 li
184.478 293.442 li
cp
184.478 269.695 mo
190.591 269.695 li
190.591 271.015 li
184.478 271.015 li
184.478 269.695 li
cp
184.478 245.948 mo
190.591 245.948 li
190.591 247.267 li
184.478 247.267 li
184.478 245.948 li
cp
184.478 222.201 mo
190.591 222.201 li
190.591 223.52 li
184.478 223.52 li
184.478 222.201 li
cp
184.478 198.454 mo
190.591 198.454 li
190.591 199.773 li
184.478 199.773 li
184.478 198.454 li
cp
184.478 174.826 mo
190.591 174.826 li
190.591 176.146 li
184.478 176.146 li
184.478 174.826 li
cp
184.478 151.079 mo
190.591 151.079 li
190.591 152.398 li
184.478 152.398 li
184.478 151.079 li
cp
184.478 127.332 mo
190.591 127.332 li
190.591 128.651 li
184.478 128.651 li
184.478 127.332 li
cp
184.478 103.585 mo
190.591 103.585 li
190.591 104.904 li
184.478 104.904 li
184.478 103.585 li
cp
184.478 79.9574 mo
190.591 79.9574 li
190.591 81.2774 li
184.478 81.2774 li
184.478 79.9574 li
cp
184.478 56.2104 mo
190.591 56.2104 li
190.591 57.5294 li
184.478 57.5294 li
184.478 56.2104 li
cp
f
190.591 317.07 mo
763.445 317.07 li
763.445 318.389 li
190.591 318.389 li
cp
f
191.311 317.669 mo
191.311 323.786 li
189.992 323.786 li
189.992 317.669 li
191.311 317.669 li
cp
196.945 317.669 mo
196.945 323.786 li
195.626 323.786 li
195.626 317.669 li
196.945 317.669 li
cp
202.578 317.669 mo
202.578 323.786 li
201.26 323.786 li
201.26 317.669 li
202.578 317.669 li
cp
208.332 317.669 mo
208.332 323.786 li
207.014 323.786 li
207.014 317.669 li
208.332 317.669 li
cp
213.966 317.669 mo
213.966 323.786 li
212.647 323.786 li
212.647 317.669 li
213.966 317.669 li
cp
219.6 317.669 mo
219.6 323.786 li
218.281 323.786 li
218.281 317.669 li
219.6 317.669 li
cp
225.353 317.669 mo
225.353 323.786 li
224.035 323.786 li
224.035 317.669 li
225.353 317.669 li
cp
230.987 317.669 mo
230.987 323.786 li
229.669 323.786 li
229.669 317.669 li
230.987 317.669 li
cp
236.621 317.669 mo
236.621 323.786 li
235.303 323.786 li
235.303 317.669 li
236.621 317.669 li
cp
242.375 317.669 mo
242.375 323.786 li
241.056 323.786 li
241.056 317.669 li
242.375 317.669 li
cp
248.009 317.669 mo
248.009 323.786 li
246.69 323.786 li
246.69 317.669 li
248.009 317.669 li
cp
253.643 317.669 mo
253.643 323.786 li
252.324 323.786 li
252.324 317.669 li
253.643 317.669 li
cp
f
259.396 317.669 mo
259.396 323.786 li
258.078 323.786 li
258.078 317.669 li
259.396 317.669 li
cp
265.03 317.669 mo
265.03 323.786 li
263.712 323.786 li
263.712 317.669 li
265.03 317.669 li
cp
270.664 317.669 mo
270.664 323.786 li
269.345 323.786 li
269.345 317.669 li
270.664 317.669 li
cp
276.418 317.669 mo
276.418 323.786 li
275.099 323.786 li
275.099 317.669 li
276.418 317.669 li
cp
282.051 317.669 mo
282.051 323.786 li
280.733 323.786 li
280.733 317.669 li
282.051 317.669 li
cp
287.685 317.669 mo
287.685 323.786 li
286.367 323.786 li
286.367 317.669 li
287.685 317.669 li
cp
293.319 317.669 mo
293.319 323.786 li
292.001 323.786 li
292.001 317.669 li
293.319 317.669 li
cp
299.073 317.669 mo
299.073 323.786 li
297.754 323.786 li
297.754 317.669 li
299.073 317.669 li
cp
304.707 317.669 mo
304.707 323.786 li
303.388 323.786 li
303.388 317.669 li
304.707 317.669 li
cp
310.34 317.669 mo
310.34 323.786 li
309.022 323.786 li
309.022 317.669 li
310.34 317.669 li
cp
316.094 317.669 mo
316.094 323.786 li
314.776 323.786 li
314.776 317.669 li
316.094 317.669 li
cp
321.728 317.669 mo
321.728 323.786 li
320.409 323.786 li
320.409 317.669 li
321.728 317.669 li
cp
f
327.362 317.669 mo
327.362 323.786 li
326.043 323.786 li
326.043 317.669 li
327.362 317.669 li
cp
333.116 317.669 mo
333.116 323.786 li
331.797 323.786 li
331.797 317.669 li
333.116 317.669 li
cp
338.749 317.669 mo
338.749 323.786 li
337.431 323.786 li
337.431 317.669 li
338.749 317.669 li
cp
344.383 317.669 mo
344.383 323.786 li
343.065 323.786 li
343.065 317.669 li
344.383 317.669 li
cp
350.137 317.669 mo
350.137 323.786 li
348.818 323.786 li
348.818 317.669 li
350.137 317.669 li
cp
355.771 317.669 mo
355.771 323.786 li
354.452 323.786 li
354.452 317.669 li
355.771 317.669 li
cp
361.405 317.669 mo
361.405 323.786 li
360.086 323.786 li
360.086 317.669 li
361.405 317.669 li
cp
367.158 317.669 mo
367.158 323.786 li
365.84 323.786 li
365.84 317.669 li
367.158 317.669 li
cp
372.792 317.669 mo
372.792 323.786 li
371.474 323.786 li
371.474 317.669 li
372.792 317.669 li
cp
378.426 317.669 mo
378.426 323.786 li
377.107 323.786 li
377.107 317.669 li
378.426 317.669 li
cp
384.06 317.669 mo
384.06 323.786 li
382.741 323.786 li
382.741 317.669 li
384.06 317.669 li
cp
389.814 317.669 mo
389.814 323.786 li
388.495 323.786 li
388.495 317.669 li
389.814 317.669 li
cp
f
395.447 317.669 mo
395.447 323.786 li
394.129 323.786 li
394.129 317.669 li
395.447 317.669 li
cp
401.081 317.669 mo
401.081 323.786 li
399.763 323.786 li
399.763 317.669 li
401.081 317.669 li
cp
406.835 317.669 mo
406.835 323.786 li
405.516 323.786 li
405.516 317.669 li
406.835 317.669 li
cp
412.469 317.669 mo
412.469 323.786 li
411.15 323.786 li
411.15 317.669 li
412.469 317.669 li
cp
418.103 317.669 mo
418.103 323.786 li
416.784 323.786 li
416.784 317.669 li
418.103 317.669 li
cp
423.856 317.669 mo
423.856 323.786 li
422.538 323.786 li
422.538 317.669 li
423.856 317.669 li
cp
429.49 317.669 mo
429.49 323.786 li
428.172 323.786 li
428.172 317.669 li
429.49 317.669 li
cp
435.124 317.669 mo
435.124 323.786 li
433.805 323.786 li
433.805 317.669 li
435.124 317.669 li
cp
440.878 317.669 mo
440.878 323.786 li
439.559 323.786 li
439.559 317.669 li
440.878 317.669 li
cp
446.512 317.669 mo
446.512 323.786 li
445.193 323.786 li
445.193 317.669 li
446.512 317.669 li
cp
452.145 317.669 mo
452.145 323.786 li
450.827 323.786 li
450.827 317.669 li
452.145 317.669 li
cp
457.899 317.669 mo
457.899 323.786 li
456.581 323.786 li
456.581 317.669 li
457.899 317.669 li
cp
f
463.533 317.669 mo
463.533 323.786 li
462.214 323.786 li
462.214 317.669 li
463.533 317.669 li
cp
469.167 317.669 mo
469.167 323.786 li
467.848 323.786 li
467.848 317.669 li
469.167 317.669 li
cp
474.92 317.669 mo
474.92 323.786 li
473.602 323.786 li
473.602 317.669 li
474.92 317.669 li
cp
480.554 317.669 mo
480.554 323.786 li
479.236 323.786 li
479.236 317.669 li
480.554 317.669 li
cp
486.188 317.669 mo
486.188 323.786 li
484.87 323.786 li
484.87 317.669 li
486.188 317.669 li
cp
491.822 317.669 mo
491.822 323.786 li
490.503 323.786 li
490.503 317.669 li
491.822 317.669 li
cp
497.576 317.669 mo
497.576 323.786 li
496.257 323.786 li
496.257 317.669 li
497.576 317.669 li
cp
503.21 317.669 mo
503.21 323.786 li
501.891 323.786 li
501.891 317.669 li
503.21 317.669 li
cp
508.843 317.669 mo
508.843 323.786 li
507.525 323.786 li
507.525 317.669 li
508.843 317.669 li
cp
514.597 317.669 mo
514.597 323.786 li
513.279 323.786 li
513.279 317.669 li
514.597 317.669 li
cp
520.231 317.669 mo
520.231 323.786 li
518.912 323.786 li
518.912 317.669 li
520.231 317.669 li
cp
525.865 317.669 mo
525.865 323.786 li
524.546 323.786 li
524.546 317.669 li
525.865 317.669 li
cp
f
531.618 317.669 mo
531.618 323.786 li
530.3 323.786 li
530.3 317.669 li
531.618 317.669 li
cp
537.252 317.669 mo
537.252 323.786 li
535.934 323.786 li
535.934 317.669 li
537.252 317.669 li
cp
542.886 317.669 mo
542.886 323.786 li
541.568 323.786 li
541.568 317.669 li
542.886 317.669 li
cp
548.64 317.669 mo
548.64 323.786 li
547.321 323.786 li
547.321 317.669 li
548.64 317.669 li
cp
554.274 317.669 mo
554.274 323.786 li
552.955 323.786 li
552.955 317.669 li
554.274 317.669 li
cp
559.907 317.669 mo
559.907 323.786 li
558.589 323.786 li
558.589 317.669 li
559.907 317.669 li
cp
565.661 317.669 mo
565.661 323.786 li
564.343 323.786 li
564.343 317.669 li
565.661 317.669 li
cp
571.295 317.669 mo
571.295 323.786 li
569.976 323.786 li
569.976 317.669 li
571.295 317.669 li
cp
576.929 317.669 mo
576.929 323.786 li
575.61 323.786 li
575.61 317.669 li
576.929 317.669 li
cp
582.563 317.669 mo
582.563 323.786 li
581.244 323.786 li
581.244 317.669 li
582.563 317.669 li
cp
588.316 317.669 mo
588.316 323.786 li
586.998 323.786 li
586.998 317.669 li
588.316 317.669 li
cp
593.95 317.669 mo
593.95 323.786 li
592.632 323.786 li
592.632 317.669 li
593.95 317.669 li
cp
f
599.584 317.669 mo
599.584 323.786 li
598.266 323.786 li
598.266 317.669 li
599.584 317.669 li
cp
605.338 317.669 mo
605.338 323.786 li
604.019 323.786 li
604.019 317.669 li
605.338 317.669 li
cp
610.972 317.669 mo
610.972 323.786 li
609.653 323.786 li
609.653 317.669 li
610.972 317.669 li
cp
616.605 317.669 mo
616.605 323.786 li
615.287 323.786 li
615.287 317.669 li
616.605 317.669 li
cp
622.359 317.669 mo
622.359 323.786 li
621.041 323.786 li
621.041 317.669 li
622.359 317.669 li
cp
627.993 317.669 mo
627.993 323.786 li
626.674 323.786 li
626.674 317.669 li
627.993 317.669 li
cp
633.627 317.669 mo
633.627 323.786 li
632.308 323.786 li
632.308 317.669 li
633.627 317.669 li
cp
639.381 317.669 mo
639.381 323.786 li
638.062 323.786 li
638.062 317.669 li
639.381 317.669 li
cp
645.014 317.669 mo
645.014 323.786 li
643.696 323.786 li
643.696 317.669 li
645.014 317.669 li
cp
650.648 317.669 mo
650.648 323.786 li
649.33 323.786 li
649.33 317.669 li
650.648 317.669 li
cp
656.402 317.669 mo
656.402 323.786 li
655.083 323.786 li
655.083 317.669 li
656.402 317.669 li
cp
662.036 317.669 mo
662.036 323.786 li
660.717 323.786 li
660.717 317.669 li
662.036 317.669 li
cp
f
667.67 317.669 mo
667.67 323.786 li
666.351 323.786 li
666.351 317.669 li
667.67 317.669 li
cp
673.303 317.669 mo
673.303 323.786 li
671.985 323.786 li
671.985 317.669 li
673.303 317.669 li
cp
679.057 317.669 mo
679.057 323.786 li
677.739 323.786 li
677.739 317.669 li
679.057 317.669 li
cp
684.691 317.669 mo
684.691 323.786 li
683.372 323.786 li
683.372 317.669 li
684.691 317.669 li
cp
690.325 317.669 mo
690.325 323.786 li
689.006 323.786 li
689.006 317.669 li
690.325 317.669 li
cp
696.078 317.669 mo
696.078 323.786 li
694.76 323.786 li
694.76 317.669 li
696.078 317.669 li
cp
701.712 317.669 mo
701.712 323.786 li
700.394 323.786 li
700.394 317.669 li
701.712 317.669 li
cp
707.346 317.669 mo
707.346 323.786 li
706.028 323.786 li
706.028 317.669 li
707.346 317.669 li
cp
713.1 317.669 mo
713.1 323.786 li
711.781 323.786 li
711.781 317.669 li
713.1 317.669 li
cp
718.734 317.669 mo
718.734 323.786 li
717.415 323.786 li
717.415 317.669 li
718.734 317.669 li
cp
724.368 317.669 mo
724.368 323.786 li
723.049 323.786 li
723.049 317.669 li
724.368 317.669 li
cp
730.121 317.669 mo
730.121 323.786 li
728.803 323.786 li
728.803 317.669 li
730.121 317.669 li
cp
735.755 317.669 mo
735.755 323.786 li
734.437 323.786 li
734.437 317.669 li
735.755 317.669 li
cp
741.389 317.669 mo
741.389 323.786 li
740.07 323.786 li
740.07 317.669 li
741.389 317.669 li
cp
747.143 317.669 mo
747.143 323.786 li
745.824 323.786 li
745.824 317.669 li
747.143 317.669 li
cp
752.776 317.669 mo
752.776 323.786 li
751.458 323.786 li
751.458 317.669 li
752.776 317.669 li
cp
758.41 317.669 mo
758.41 323.786 li
757.092 323.786 li
757.092 317.669 li
758.41 317.669 li
cp
764.164 317.669 mo
764.164 323.786 li
762.845 323.786 li
762.845 317.669 li
764.164 317.669 li
cp
f
gsave
190.352 56.5704 mo
764.643 56.5704 li
764.643 318.869 li
190.352 318.869 li
cp
eclp
191.55 316.83 mo
197.184 305.556 li
197.784 304.477 198.982 304.117 200.061 304.597 cv
201.02 305.076 201.5 306.396 200.9 307.475 cv
195.266 318.629 li
194.787 319.708 193.468 320.068 192.509 319.588 cv
191.431 319.109 190.951 317.789 191.55 316.83 cv
cp
204.376 290.444 mo
208.572 281.809 li
210.01 279.05 li
210.61 277.971 211.928 277.611 212.887 278.211 cv
213.966 278.81 214.326 280.01 213.726 281.089 cv
212.288 283.608 li
208.212 292.243 li
207.733 293.323 206.414 293.682 205.335 293.203 cv
204.376 292.723 203.897 291.404 204.376 290.444 cv
cp
217.802 264.298 mo
219.959 259.98 li
223.316 252.904 li
223.795 251.945 224.994 251.465 226.073 251.945 cv
227.152 252.425 227.511 253.744 227.032 254.703 cv
223.675 261.78 li
221.518 266.097 li
221.038 267.177 219.84 267.536 218.761 267.057 cv
217.682 266.577 217.322 265.258 217.802 264.298 cv
cp
230.508 237.792 mo
231.347 236.233 li
236.981 226.758 li
237.58 225.799 238.779 225.439 239.858 226.039 cv
240.817 226.638 241.176 227.838 240.577 228.917 cv
235.063 238.032 li
234.344 239.591 li
233.864 240.671 232.546 241.151 231.467 240.551 cv
230.508 240.071 230.028 238.872 230.508 237.792 cv
cp
251.365 238.872 mo
251.964 239.831 li
252.084 239.951 252.204 240.191 252.204 240.431 cv
255.081 251.585 li
255.321 252.664 254.721 253.864 253.523 254.104 cv
252.444 254.463 251.245 253.744 251.005 252.664 cv
248.248 241.51 li
248.488 242.11 li
247.889 241.271 li
247.17 240.191 247.529 238.992 248.488 238.272 cv
249.447 237.673 250.766 237.912 251.365 238.872 cv
cp
259.156 267.896 mo
262.033 280.13 li
262.273 281.329 261.674 282.408 260.475 282.648 cv
259.396 283.008 258.198 282.289 257.958 281.089 cv
255.081 268.856 li
254.841 267.776 255.441 266.577 256.639 266.337 cv
257.718 266.097 258.917 266.817 259.156 267.896 cv
cp
267.667 295.481 mo
269.106 298.84 li
268.986 298.6 li
273.9 306.036 li
274.5 306.995 274.26 308.315 273.301 308.914 cv
272.342 309.514 271.023 309.274 270.424 308.315 cv
265.51 300.878 li
265.39 300.759 265.39 300.639 265.39 300.639 cv
263.831 297.16 li
263.352 296.201 263.831 294.882 264.91 294.402 cv
265.869 293.922 267.188 294.402 267.667 295.481 cv
cp
286.846 313.592 mo
290.562 314.791 li
295.836 315.631 li
294.997 315.75 li
297.874 314.911 li
298.953 314.671 300.152 315.391 300.391 316.47 cv
300.751 317.55 300.032 318.749 298.953 318.989 cv
296.076 319.708 li
295.716 319.828 295.477 319.828 295.237 319.828 cv
289.244 318.749 li
285.528 317.55 li
284.449 317.19 283.849 315.99 284.209 314.911 cv
284.569 313.832 285.648 313.232 286.846 313.592 cv
cp
314.896 315.631 mo
318.132 315.631 li
323.886 315.631 li
327.482 315.631 li
328.68 315.631 329.639 316.59 329.639 317.669 cv
329.639 318.869 328.68 319.828 327.482 319.828 cv
323.886 319.828 li
318.132 319.828 li
314.896 319.828 li
313.697 319.828 312.858 318.869 312.858 317.669 cv
312.858 316.59 313.697 315.631 314.896 315.631 cv
cp
344.263 315.151 mo
346.541 315.151 li
352.414 315.631 li
356.85 315.631 li
357.928 315.631 358.887 316.59 358.887 317.669 cv
358.887 318.869 357.928 319.828 356.85 319.828 cv
352.055 319.828 li
346.541 319.349 li
344.263 319.349 li
343.065 319.349 342.106 318.389 342.106 317.19 cv
342.106 316.11 343.065 315.151 344.263 315.151 cv
cp
373.751 315.511 mo
375.19 315.631 li
380.584 315.631 li
385.978 315.151 li
387.057 315.031 388.135 315.87 388.255 317.07 cv
388.375 318.269 387.416 319.229 386.337 319.349 cv
380.584 319.828 li
374.83 319.828 li
373.392 319.708 li
372.193 319.588 371.354 318.629 371.474 317.43 cv
371.593 316.23 372.552 315.391 373.751 315.511 cv
cp
402.879 315.631 mo
403.239 315.631 li
408.873 315.631 li
414.626 315.631 li
415.465 315.631 li
416.664 315.631 417.623 316.59 417.623 317.669 cv
417.623 318.869 416.664 319.828 415.465 319.828 cv
414.626 319.828 li
408.873 319.828 li
403.239 319.828 li
402.879 319.828 li
401.681 319.828 400.841 318.869 400.841 317.669 cv
400.841 316.59 401.681 315.631 402.879 315.631 cv
cp
432.247 315.631 mo
437.282 315.631 li
442.915 315.631 li
444.833 315.631 li
446.032 315.631 446.991 316.59 446.991 317.669 cv
446.991 318.869 446.032 319.828 444.833 319.828 cv
442.915 319.828 li
437.282 319.828 li
432.247 319.828 li
431.048 319.828 430.209 318.869 430.209 317.669 cv
430.209 316.59 431.048 315.631 432.247 315.631 cv
cp
461.615 315.631 mo
465.691 315.631 li
471.324 315.631 li
474.201 315.631 li
475.4 315.631 476.359 316.59 476.359 317.669 cv
476.359 318.869 475.4 319.828 474.201 319.828 cv
471.324 319.828 li
465.691 319.828 li
461.615 319.828 li
460.416 319.828 459.577 318.869 459.577 317.669 cv
459.577 316.59 460.416 315.631 461.615 315.631 cv
cp
490.983 315.631 mo
493.98 315.631 li
499.613 315.631 li
503.569 315.631 li
504.768 315.631 505.727 316.59 505.727 317.669 cv
505.727 318.869 504.768 319.828 503.569 319.828 cv
499.613 319.828 li
493.98 319.828 li
490.983 319.828 li
489.784 319.828 488.945 318.869 488.945 317.669 cv
488.945 316.59 489.784 315.631 490.983 315.631 cv
cp
520.351 315.631 mo
522.389 315.631 li
528.022 315.631 li
532.937 315.631 li
534.136 315.631 535.095 316.59 535.095 317.669 cv
535.095 318.869 534.136 319.828 532.937 319.828 cv
528.022 319.828 li
522.389 319.828 li
520.351 319.828 li
519.152 319.828 518.313 318.869 518.313 317.669 cv
518.313 316.59 519.152 315.631 520.351 315.631 cv
cp
549.719 315.631 mo
550.678 315.631 li
556.431 315.631 li
562.065 315.631 li
562.305 315.631 li
563.504 315.631 564.463 316.59 564.463 317.669 cv
564.463 318.869 563.504 319.828 562.305 319.828 cv
562.065 319.828 li
556.431 319.828 li
550.678 319.828 li
549.719 319.828 li
548.52 319.828 547.681 318.869 547.681 317.669 cv
547.681 316.59 548.52 315.631 549.719 315.631 cv
cp
579.086 315.631 mo
579.086 315.631 li
584.72 315.631 li
590.354 315.631 li
591.673 315.631 li
592.871 315.631 593.83 316.59 593.83 317.669 cv
593.83 318.869 592.871 319.828 591.673 319.828 cv
590.354 319.828 li
584.72 319.828 li
579.086 319.828 li
577.888 319.828 577.049 318.869 577.049 317.669 cv
577.049 316.59 577.888 315.631 579.086 315.631 cv
cp
608.454 315.631 mo
613.129 315.631 li
618.763 315.631 li
621.041 315.631 li
622.239 315.631 623.198 316.59 623.198 317.669 cv
623.198 318.869 622.239 319.828 621.041 319.828 cv
618.763 319.828 li
613.129 319.828 li
608.454 319.828 li
607.256 319.828 606.417 318.869 606.417 317.669 cv
606.417 316.59 607.256 315.631 608.454 315.631 cv
cp
637.822 315.631 mo
641.418 315.631 li
647.172 315.631 li
650.408 315.631 li
651.607 315.631 652.566 316.59 652.566 317.669 cv
652.566 318.869 651.607 319.828 650.408 319.828 cv
647.172 319.828 li
641.418 319.828 li
637.822 319.828 li
636.624 319.828 635.784 318.869 635.784 317.669 cv
635.784 316.59 636.624 315.631 637.822 315.631 cv
cp
667.19 315.631 mo
669.827 315.631 li
675.461 315.631 li
679.776 315.631 li
680.975 315.631 681.934 316.59 681.934 317.669 cv
681.934 318.869 680.975 319.828 679.776 319.828 cv
675.461 319.828 li
669.827 319.828 li
667.19 319.828 li
665.991 319.828 665.152 318.869 665.152 317.669 cv
665.152 316.59 665.991 315.631 667.19 315.631 cv
cp
696.558 315.631 mo
698.116 315.631 li
703.87 315.631 li
709.144 315.631 li
710.343 315.631 711.302 316.59 711.302 317.669 cv
711.302 318.869 710.343 319.828 709.144 319.828 cv
703.87 319.828 li
698.116 319.828 li
696.558 319.828 li
695.359 319.828 694.52 318.869 694.52 317.669 cv
694.52 316.59 695.359 315.631 696.558 315.631 cv
cp
725.926 315.631 mo
726.525 315.631 li
732.159 315.631 li
737.913 315.631 li
738.512 315.631 li
739.711 315.631 740.67 316.59 740.67 317.669 cv
740.67 318.869 739.711 319.828 738.512 319.828 cv
737.913 319.828 li
732.159 319.828 li
726.525 319.828 li
725.926 319.828 li
724.727 319.828 723.888 318.869 723.888 317.669 cv
723.888 316.59 724.727 315.631 725.926 315.631 cv
cp
755.294 315.631 mo
760.568 315.631 li
761.767 315.631 762.726 316.59 762.726 317.669 cv
762.726 318.869 761.767 319.828 760.568 319.828 cv
755.294 319.828 li
754.095 319.828 753.256 318.869 753.256 317.669 cv
753.256 316.59 754.095 315.631 755.294 315.631 cv
cp
.577668 .58323 .597478 rgb
f
grestore
gsave
190.352 56.5704 mo
764.643 56.5704 li
764.643 318.869 li
190.352 318.869 li
cp
eclp
191.55 316.83 mo
197.304 305.436 li
202.938 293.562 li
208.572 282.289 li
214.326 270.415 li
219.959 259.381 li
225.593 248.107 li
231.347 235.754 li
236.981 225.199 li
242.615 214.765 li
248.368 204.33 li
254.002 192.577 li
259.636 180.223 li
259.636 180.103 259.636 179.984 259.756 179.984 cv
265.51 171.468 li
271.023 161.633 li
276.777 153.838 li
282.411 144.363 li
288.045 134.528 li
293.679 124.094 li
293.799 123.974 293.799 123.854 293.918 123.854 cv
299.552 116.778 li
305.186 107.902 li
310.94 100.706 li
311.06 100.466 311.18 100.346 311.419 100.226 cv
317.053 96.3884 li
322.807 92.5514 li
322.327 92.9104 li
327.961 86.3144 li
328.081 86.1944 328.201 86.0744 328.441 85.9544 cv
334.075 82.1164 li
333.475 82.7164 li
339.229 73.2414 li
339.469 72.7614 340.068 72.4014 340.787 72.2814 cv
346.421 71.8024 li
346.781 71.8024 347.14 71.8024 347.38 71.9224 cv
353.014 74.3204 li
353.254 74.4404 353.493 74.5604 353.733 74.8004 cv
359.487 80.4374 li
358.887 80.0774 li
364.521 82.9564 li
364.881 83.0764 365.24 83.4354 365.48 83.7954 cv
371.114 93.2704 li
369.915 92.3114 li
375.669 94.2304 li
375.909 94.3504 376.148 94.4704 376.388 94.5894 cv
382.022 99.3874 li
382.142 99.5074 382.262 99.6274 382.382 99.7474 cv
388.016 107.782 li
387.656 107.542 li
393.29 112.7 li
392.93 112.34 li
398.684 115.698 li
404.438 119.656 li
404.078 119.416 li
409.712 121.815 li
408.633 121.695 li
414.387 120.735 li
414.626 120.735 414.866 120.735 415.106 120.735 cv
420.74 122.055 li
420.979 122.175 421.219 122.295 421.339 122.295 cv
426.973 125.653 li
432.846 129.611 li
438.36 132.849 li
438.001 132.729 li
443.635 134.528 li
443.275 134.408 li
449.029 135.368 li
449.269 135.487 449.508 135.487 449.628 135.607 cv
455.262 138.486 li
454.303 138.246 li
459.937 138.246 li
460.296 138.246 460.656 138.366 460.896 138.486 cv
466.65 141.364 li
465.93 141.124 li
471.564 141.604 li
477.198 142.084 li
482.592 142.084 li
482.832 142.084 482.952 142.084 483.072 142.084 cv
488.825 143.403 li
494.579 144.962 li
494.219 144.842 li
499.853 145.322 li
505.367 145.322 li
511.001 145.322 li
511.121 145.322 511.241 145.322 511.361 145.322 cv
516.994 146.282 li
522.748 147.241 li
528.382 148.201 li
533.896 148.68 li
539.41 148.68 li
545.044 148.68 li
545.283 148.68 545.403 148.68 545.643 148.8 cv
551.277 150.24 li
550.917 150.12 li
556.671 150.599 li
562.305 151.079 li
567.699 151.079 li
573.453 151.079 li
579.086 151.079 li
584.72 151.079 li
590.234 150.599 li
590.354 150.599 590.594 150.599 590.714 150.599 cv
596.467 151.559 li
595.628 151.679 li
601.262 150.24 li
601.502 150.12 601.622 150.12 601.742 150.12 cv
607.376 150.12 li
613.009 149.64 li
618.763 149.64 li
624.277 149.16 li
630.031 148.68 li
630.151 148.68 630.271 148.68 630.39 148.68 cv
636.024 149.16 li
641.418 149.16 li
647.172 149.16 li
652.686 148.68 li
652.806 148.68 652.926 148.68 653.046 148.68 cv
658.679 149.16 li
664.433 149.64 li
669.827 149.64 li
675.461 149.64 li
681.335 150.12 li
686.849 150.12 li
692.722 150.599 li
698.116 150.599 li
703.87 150.599 li
709.504 150.599 li
715.377 151.079 li
720.891 151.079 li
726.765 151.559 li
732.159 151.559 li
732.279 151.559 732.399 151.559 732.519 151.559 cv
738.272 152.518 li
737.913 152.518 li
743.547 152.518 li
749.18 152.518 li
754.934 152.518 li
760.568 152.518 li
761.767 152.518 762.726 153.478 762.726 154.557 cv
762.726 155.757 761.767 156.716 760.568 156.716 cv
754.934 156.716 li
749.18 156.716 li
743.547 156.716 li
737.913 156.716 li
737.913 156.716 737.793 156.716 737.673 156.716 cv
731.919 155.757 li
732.159 155.757 li
726.405 155.757 li
720.891 155.277 li
715.018 155.277 li
709.504 154.797 li
703.87 154.797 li
698.116 154.797 li
692.363 154.797 li
686.849 154.317 li
680.975 154.317 li
675.461 153.838 li
669.827 153.838 li
664.074 153.838 li
658.32 153.358 li
652.686 152.878 li
653.046 152.878 li
647.172 153.358 li
641.418 153.358 li
635.665 153.358 li
630.031 152.878 li
630.39 152.878 li
624.637 153.358 li
618.763 153.838 li
613.369 153.838 li
607.376 154.317 li
601.742 154.317 li
602.341 154.197 li
596.707 155.637 li
596.348 155.757 596.108 155.757 595.868 155.757 cv
590.114 154.797 li
590.594 154.797 li
584.72 155.277 li
579.086 155.277 li
573.453 155.277 li
567.699 155.277 li
561.945 155.277 li
556.311 154.797 li
550.558 154.317 li
550.438 154.317 550.318 154.317 550.198 154.197 cv
544.564 152.758 li
545.044 152.878 li
539.41 152.878 li
533.536 152.878 li
527.783 152.398 li
522.149 151.439 li
516.395 150.479 li
510.761 149.52 li
511.001 149.52 li
505.367 149.52 li
499.494 149.52 li
493.86 149.04 li
493.74 149.04 493.62 149.04 493.5 148.92 cv
487.986 147.601 li
482.232 146.282 li
482.592 146.282 li
476.838 146.282 li
471.205 145.802 li
465.571 145.322 li
465.331 145.322 465.091 145.202 464.851 145.082 cv
459.098 142.204 li
459.937 142.444 li
454.303 142.444 li
454.063 142.444 453.704 142.324 453.464 142.204 cv
447.83 139.325 li
448.429 139.565 li
442.676 138.606 li
442.556 138.606 442.436 138.486 442.316 138.486 cv
436.682 136.687 li
436.562 136.687 436.443 136.567 436.323 136.567 cv
430.569 133.089 li
424.935 129.371 li
419.301 126.013 li
419.781 126.252 li
414.147 124.933 li
414.986 124.933 li
409.232 125.893 li
408.873 125.893 408.513 125.893 408.154 125.773 cv
402.52 123.374 li
402.4 123.254 402.28 123.254 402.16 123.134 cv
396.646 119.416 li
390.892 116.058 li
390.773 115.938 390.653 115.818 390.533 115.698 cv
384.899 110.541 li
384.779 110.541 384.659 110.421 384.539 110.301 cv
378.905 102.265 li
379.265 102.625 li
373.631 97.8284 li
374.35 98.1884 li
368.597 96.2694 li
368.117 96.1494 367.758 95.7894 367.398 95.3094 cv
361.764 85.8344 li
362.723 86.6744 li
357.089 83.7954 li
356.85 83.6754 356.61 83.5554 356.49 83.4354 cv
350.736 77.7984 li
351.456 78.2784 li
345.822 75.8804 li
346.781 75.9994 li
341.147 76.4794 li
342.705 75.5204 li
336.951 84.9954 li
336.832 85.2344 336.592 85.4744 336.352 85.5944 cv
330.718 89.4324 li
331.198 89.0724 li
325.564 95.6694 li
325.444 95.7894 325.324 95.9094 325.084 96.0294 cv
319.331 99.8674 li
313.697 103.705 li
314.176 103.225 li
308.662 110.181 li
302.789 119.296 li
297.155 126.372 li
297.395 126.132 li
291.761 136.567 li
286.007 146.522 li
280.134 156.356 li
274.739 163.672 li
268.986 173.747 li
263.232 182.262 li
263.352 182.022 li
257.718 194.376 li
252.084 206.369 li
246.331 216.804 li
240.697 227.238 li
235.063 237.553 li
229.309 249.906 li
223.675 261.3 li
218.041 272.214 li
212.288 284.088 li
206.654 295.361 li
201.02 307.235 li
195.266 318.629 li
194.787 319.708 193.468 320.068 192.509 319.588 cv
191.431 319.109 190.951 317.789 191.55 316.83 cv
cp
.136538 .123054 .126659 rgb
f
grestore
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000a000a000a000a63767420687a0000000000ac0000051c6670
676d3e070000000005c80000091a676c79668f0a00000000341c000016e4
68656164f7c4000000000ee400000036686865611103000000000f1c0000
0024686d747856ea000000000f40000000546c6f63610b45000000000f94
000000586d6178701380000000000fec000000207072657052c400000000
100c00002410676469720000000000000000000000000000079e0000fe93
0000000000000000000000000050006a0073008000800086008d009300bf
00db006200830093009900a000a600a900b000c100c900d7000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe79056d000c03b7000600130000fffaffedfea6
ffedfeb8050e000600130000fffaffedfe93050e00130420000600130000
fffaffedff10ffee050e00130420000600130000fffaffeefe93ff10feb8
0612000a050e0006000d02d2fffafff301fdfffa023f0006000dff36fffa
fff302870006000f0000fffafff1079efeaffea700000000000000000000
000000500051005a005b005c005d006000610062006400680069006a006b
006c006d006e00680069006e00600067006e00660068005f006100630064
00660068006a006b006c006d006e006f0070006f00720074007500760076
007000720073007400750076006f00700071007200730075007700770078
0079007a007b007c007d007b007c007d00770079007a007c0078007a007c
007d0078007d007e007f008000810082007e007f00810082007e007f0080
008100820083008400850086008700880089008300840085008600870088
0089008300840085008600870088008900890086008700880089008a008b
008c008d008e008f008a008b008c008d008e008f008a008b008c008d008e
008f008d008a008b008c008d008e008f0090009000910092009300940095
009600980099009b009c0090009100920093009400950096009700980099
009a009e009f00a60090009100950098009f009000910096009700bc00c6
00b500ae00af00b6006800690063006a006f00700071006f007000710072
0066006c006d00700079007c007f00830086008700880089008a00740075
00760077007a007b007c007d007e008200850086008a0088008900830078
007b00820083008600870088008900760079007a007c007d007e00830085
00880089008a0073007400750077007a007d00880089008a008b008c008d
008e00900094008b008c008d00910092009300940095008c008d00910095
008f009000910092009300940095008b008c008d008e008f009000910092
009300940095008b008c008d008e008f0090009100920093009600970098
0099009c0096009700980099009a009b009c00960099009a009c00960097
00980099009a009b009c009700980099009a009b009c009700980099009a
009b009c0096009d00a000a1009d009e009f00a000a100a2009d009f00a0
00a1009f00a2009d009e009f00a000a100a2009d009e00a000a1009d009e
00a000a2009d00a300a400a500a600a700a300a400a600a700a300a400a5
00a600a700a600a300a700a800a900aa00ab00ac00ac00a800a900aa00ab
00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae00ad00ae00af00b0
00b100b200b300b400b500b600b700b800ad00ae00ad00ae00af00b000b1
00b200b300b400b500b600b700b800ad00ae00af00b000b100b200b300b4
00b500b600b700b800b300ae00af00b000b200b500b600b700b800b900ba
00bb00bc00be00c000c100c200c200b900ba00bb00bc00bd00be00bf00c0
00c100c200c400ba00bb00be00bf00c000c200c300c400b900ba00bf00c0
00c200c600c700c900ca00cb00cc00cf00c500c700ce00c500c700c800cf
00d000d200d300d7010d00d000d100e900d000fd00d005e4000e00410000
05ba009c009c005e005e4047645f5e5d5c5b5a59585554535251504f4e4d
4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c2826
252423221f181411100f0d0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b0042651582320b00d44235921212d2c20204518684420b0016020
45b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b
2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045
b00325456164b050515845441b2121592d2c2045b0004360442d2c01b006
43b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d
2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0052510
23208af500b0016023edec2d2c01b005251023208af500b0016123edec2d
2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001610110
203c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2c4523456023456023456023766818b08062202d2cb00426b004
26b00425b0042545234520b003266062636820b0032661658a2344442d2c
2045b0005458b040442045b04061441b2121592d2c45b1302f4523456160
b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b003
2545695358441b2121591b2121592d2c45b01443b0006063b0016069442d
2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033
ffe0b134201bb3330034005944442d2cb0164358b00326458a586466b01f
601b64b020606620581b21b04059b001615923586559b02923442310b029
e01b2121212121592d2cb0164358b004254564b020606620581b21b04059
b0016123586559b0292344b00425b00725082058021b0359b0052510b004
252046b0042523423cb0072510b006252046b00425b0016023423c205801
1b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0072508
2058021b0359b00425b003254348b00625b00325b0016043481b21592121
21212121212d2cb0164358b004254564b020606620581b21b04059b00161
23581b6559b0292344b00525b00825082058021b0359b0042510b0052520
46b0042523423cb00425b0072508b0072510b006252046b00425b0016023
423c2058011b0059b0042510b00525b029e0b02920456544b0072510b006
25b029e0b00525b00825082058021b0359b00525b003254348b00425b007
2508b00625b00325b0016043481b2159212121212121212d2c02b0042520
2046b004252342b0052508b003254548212121212d2c02b0032520b00425
08b0022543482121212d2c452320451820b00050205823652359236820b0
40505821b04059235865598a60442d2c4b53234b515a5820458a60441b21
21592d2c4b545820458a60441b2121592d2c4b53234b515a58381b212159
2d2cb000214b5458381b2121592d2cb002435458b0462b1b21212121592d
2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121212159
2d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a582338
1b2121592d2c0020b200400325b0062649618b3812342d2c014623466023
466123201020468a61b8ff80628ab140408a704560683a2d2c208a234964
8a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1
020042b123018851b1400188535a58b910000020885458b2020102436042
59b12401885158b920000040885458b2020202436042b12401885458b202
2002436042004b014b5258b2020802436042591bb940000080885458b202
040243604259b94000008063b80100885458b202080243604259b9400001
0063b80200885458b202100243604259b94000020063b80400885458b202
400243604259595959592d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2c204569442d
0000000100000005bae1df5aafba5f0f3cf50019080000000000bbeb7ccc
00000000cf7409dbfbfafd8b09ec07b60000000900020001000000000001
00000600fe0001c40aa0fbfafaa009ec0001000000000000000000000000
00000015040e00000000000000000000040e0048040e0065040e00ae040e
0072040e0067040e0030040e0052040e006b040e0063040e005203e800ac
035d00ac03e6000f04ec00ac06d700ac03ad0047040e006b040e00520000
0000000001420000014200000142000002a80000041200000580000006c0
000008a800000a3200000ba400000bb400000cf200000d0200000dfa0000
0e9600000f640000103e000011980000133c00001498000016e400010000
00150120001000c3000700020010002f006500001190241000040001b209
0320b80284b40918014a20b80283b40918014a20b80282b40918014a20b8
0281b40918014a20b80280b40918014a20b8027fb40918014a20b8027eb4
0918014a20b8027db40918014a20b8027cb40918014a20b8027bb4091801
4a20b8027ab40918014a20b80279b40918014a20b80278b40918014a20b8
0277b40918014a20b80276b40918014a20b80275b40918014a20b80274b4
0918014a20b80273b40918014a20b80271b40918014a20b80270b4091801
4a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a20b8
026cb40918014a20b8026bb40918014a20b8026ab40918014a20b80269b4
0918014a20b80268b40918014a20b80267b40918014a20b80266b4091801
4a20b80265b40918014a20b80264b40918014a20b80263b40918014a20b8
0262b40918014a20b80261b40918014a20b80260b40918014a20b8025fb4
0918014a20b8025eb40918014a20b8025db40918014a20b8025cb4091801
4a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a20b8
0258b40918014a20b80257b40918014a20b80256b40918014a20b80255b4
0918014a20b80254b40918014a20b80253b40918014a20b80252b4091801
4a20b80251b40918014a20b80250b40918014a20b8024fb40918014a20b8
024eb40918014a20b8024db40918014a20b8024cb40918014a20b8024bb4
0918014a20b8024ab40918014a20b80249b40918014a20b80248b4091801
4a20b80247b40918014a20b80246b40918014a20b80245b40918014a20b8
0244b40918014a20b80243b40918014a20b80242b40918014a20b80241b4
0918014a20b80240b40918014a20b8023fb40918014a20b8023eb4091801
4a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a20b8
023ab40918014a20b80239b40918014a20b80238b40918014a20b80237b4
0918014a20b80236b40918014a20b80235b40918014a20b80234b4091801
4a20b80233b40918014a20b80232b40918014a20b80231b40918014a20b8
0230b40918014a20b8022fb40918014a20b8022eb40918014a20b8022db4
0918014a20b8022cb40918014a20b8022bb40918014a20b8022ab4091801
4a20b80229b40918014a20b80228b40918014a20b80227b40918014a20b8
0226b40918014a20b80225b40918014a20b80224b40918014a20b80223b4
0918014a20b80222b40918014a20b80221b40918014a20b80220b4091801
4a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a20b8
021cb40918014a20b8021bb40918014a20b8021ab40918014a20b80219b4
0918014a20b80218b40918014a20b80217b40918014a20b80216b4091801
4a20b80215b40918014a20b80214b40918014a20b80213b40918014a20b8
0212b40918014a20b80211b40918014a20b80210b40918014a20b8020fb4
0918014a20b8020eb40918014a20b8020db40918014a20b8020cb4091801
4a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a20b8
0208b40918014a20b80207b40918014a20b80206b40918014a20b80205b4
0918014a20b80204b40918014a20b80203b40918014a20b80202b4091801
4a20b80201b40918014a20b80200b40918014a20b801ffb40918014a20b8
01feb40918014a20b801fdb40918014a20b801fcb40918014a20b801fbb4
0918014a20b801fab40918014a20b801f9b40918014a20b801f8b4091801
4a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a20b8
01f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801f1b4
0918014a20b801f0b40918014a20b801efb40918014a20b801eeb4091801
4a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a20b8
01eab40918014a20b801e9b40918014a20b801e8b40918014a20b801e7b4
0918014a20b801e6b40918014a20b801e5b40918014a20b801e4b4091801
4a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a20b8
01e0b40918014a20b801dfb40918014a20b801deb40918014a20b801ddb4
0918014a20b801dcb40918014a20b801dbb40918014a20b801dab4091801
4a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a20b8
01d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801d3b4
0918014a20b801d2b40918014a20b801d1b40918014a20b801d0b4091801
4a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a20b8
01ccb40918014a20b801cbb40918014a20b801cab40918014a20b801c9b4
0918014a20b801c8b40918014a20b801c7b40918014a20b801c6b4091801
4a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a20b8
01c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801bfb4
0918014a20b801beb40918014a20b801bdb40918014a20b801bcb4091801
4a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a20b8
01b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801b5b4
0918014a20b801b4b40918014a20b801b3b40918014a20b801b2b4091801
4a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a20b8
01aeb40918014a20b801adb40918014a20b801acb40918014a20b801abb4
0918014a20b801aab40918014a20b801a9b40918014a20b801a8b4091801
4a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a20b8
01a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801a1b4
0918014a20b801a0b40918014a20b8019fb40918014a20b8019eb4091801
4a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a20b8
019ab40918014a20b80199b40918014a20b80198b40918014a20b80197b4
0918014a20b80196b40918014a20b80195b40918014a20b80194b4091801
4a20b80193b40918014a20b80192b40918014a20b80191b40918014a20b8
0190b40918014a20b8018fb40918014a20b8018eb40918014a20b8018db4
0918014a20b8018cb40918014a20b8018bb40918014a20b8018ab4091801
4a20b80189b40918014a20b80188b40918014a20b80187b40918014a20b8
0186b40918014a20b80185b40918014a20b80184b40918014a20b80183b4
0918014a20b80182b40918014a20b80181b40918014a20b80180b4091801
4a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a20b8
017cb40918014a20b8017bb40918014a20b8017ab40918014a20b80179b4
0918014a20b80178b40918014a20b80177b40918014a20b80176b4091801
4a20b80175b40918014a20b80174b40918014a20b80173b40918014a20b8
0172b40918014a20b80171b40918014a20b80170b40918014a20b8016fb4
0918014a20b8016eb40918014a20b8016db40918014a20b8016cb4091801
4a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a20b8
0168b40918014a20b80167b40918014a20b80166b40918014a20b80165b4
0918014a20b80164b40918014a20b80163b40918014a20b80162b4091801
4a20b80161b40918014a20b80160b40918014a20b8015fb40918014a20b8
015eb40918014a20b8015db40918014a20b8015cb40918014a20b8015bb4
0918014a20b8015ab40918014a20b80159b40918014a20b80158b4091801
4a20b80157b40918014a20b80156b40918014a20b80155b40918014a20b8
0154b40918014a20b80153b40918014a20b80152b40918014a20b80150b4
0918014a20b8014fb40918014a20b8014eb40918014a20b8014cb4091801
4a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a20b8
0148b40918014a20b80147b40918014a20b80146b40918014a20b80145b4
0918014a20b80144b40918014a20b80143b30918014ab80284b21e3e1fb8
0283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8027f
b21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027bb21e
3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d431f
b80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431fb802
72b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb8026eb2
1d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab21c45
1fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c441fb8
0265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb80261
b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025db21c
451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c451f
b80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451fb802
54b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb80250b2
1c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb21c45
1fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a1fb8
0247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb80243
b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023fb21b
4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b4b1f
b8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1fb802
36b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb80232b2
1b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb21b4c
1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c1fb8
0229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb80225
b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221b21b
4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b4c1f
b8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1fb802
18b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb80214b2
1a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b21a4e
1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e1fb8
020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb80207
b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203b219
501fb80202b219511fb80201b219511fb80200b219511fb801ffb219511f
b801feb219501fb801fdb219511fb801fcb219511fb801fbb219511fb801
fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801f6b2
19511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b21854
1fb801f1b218541fb801f0b218531fb801efb218541fb801eeb218541fb8
01edb218541fb801ecb218531fb801ebb218531fb801eab218541fb801e9
b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5b218
541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218541f
b801e0b218531fb801dfb218531fb801deb218541fb801ddb218541fb801
dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801d8b2
18541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b21757
1fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b217561fb8
01cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb801cb
b217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7b217
571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217561f
b801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561fb801
beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801bab2
17571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b21757
1fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b1fb8
01b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb801ad
b2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9b216
3f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b2165b1f
b801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801
a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb8019cb2
165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2163e
1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e1fb8
0193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8018f
b2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018bb216
5b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b2165b1f
b80186b215611fb80185b215621fb80184b215621fb80183b215661fb801
82b215661fb80181b215551fb80180b215451fb8017fb215361fb8017eb2
15361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab21564
1fb80179b215661fb80178b215661fb80177b215661fb80176b215661fb8
0175b215661fb80174b215661fb80173b215451fb80172b215621fb80171
b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016db215
661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215621f
b80168b215621fb80167b215611fb80166b215641fb80165b215641fb801
64b215661fb80163b215661fb80162b215661fb80161b215661fb80160b2
15661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb21545
1fb8015bb215361fb8015ab215611fb80159b215621fb80158b215621fb8
0157b215631fb80156b215641fb80155b215661fb80154b215661fb80153
b215661fb80152b215661fb80151b214401fb80150b214551fb8014fb214
561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214401f
b8014ab214411fb80149b214401fb80148b214401fb80147b214411fb801
46b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb80142b2
12461fb80141b212461fb80140b212461fb8013fb212461fb8013eb21244
1fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b1fb8
0139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb80135
b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131b211
551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211591f
b8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1fb801
28b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb80124b2
11561fb80123b211571fb80122b211581fb80121b211591fb80120b2115a
1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b1fb8
011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb80117
b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113b210
5f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb2105f1f
b8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1fb801
0ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2
105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2105f
1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641ffc0f
621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f641f
f40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f
621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e671f
e50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681fde0e
681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d311f
d60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1fcf0d
2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1f
c70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f40ff
c00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741fb90c
741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c741f
b10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b
7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1f
a20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b
7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b7e1f
930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0a
a71f8503251f8403381f8301381f8255805581ab80557f557d557eab7d55
0b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a55795577
5578ab7755ba028600660285403c5576ab755504751475747503f47501ab
750144750130750102007510752075030c7455725573ab72550072507280
72b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d10
4671556f5570ab6f556e666d556a03251f6938675568ab67556638645565
ab645563386255613860555f385d555eab5d555c385a555bab5a55593858
555703251f5638545555ab54555338515552ab51554f384e554e03251f4d
384b554cab4b554a38485549ab4855473846554503381f001c101c201c03
10b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b03
120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018292c
460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3164d
5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f1501
0f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff0f02
400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d1f
0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f0b02
400b3f4346400b2d30460003012001010001100120010308b8ffc0b30115
1f46b80100b316010501b80190b154532b2b4bb80800524bb008505bb001
88b02553b00188b040515ab00688b000555a5b58b101018e59b101024354
b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb08053
58b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e732b2b
5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b737475
5e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f73737373742b2b
2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2bb1000243545841ff028400640283006402820064
0281006402800064027f0064027e0064027d0064027c0064027b0064027a
006402790064027800640277006402760064027500640274006402730064
0271006402700064026f0064026e0064026d0064026c0064026b0064026a
006402690064026800640267006402660064026500640264006402630064
026200640261006402600064025f0064025e0064025d0064025c0064025b
0064025a0064025900640258006402570064025600640255006402540064
02530064025200640251006402500064024f0064024e0064024d0064024c
0064024b0064024a00640249006402480064024700640246006402450064
0244006402430064024200640241006402400064023f0064023e0064023d
0064023c0064023b0064023a006402390064023800640237006402360064
023500640234006402330064023200640231006402300064022f0064022e
0064022d0064022c0064022b0064022a0064022900640228006402270064
02260064022500640224006402230064022200640221006402200064021f
0064021e0064021d0064021c0064021b0064021a00640219006402180064
021700640216006402150064021400640213006402120064021100640210
0064020f0064020e0064020d0064020c0064020b0064020a006402090064
02080064020700640206006402050064020441ff00640203006402020064
020100640200006401ff006401fe006401fd006401fc006401fb006401fa
006401f9006401f8006401f7006401f6006401f5006401f4006401f30064
01f2006401f1006401f0006401ef006401ee006401ed006401ec006401eb
006401ea006401e9006401e8006401e7006401e6006401e5006401e40064
01e3006401e2006401e1006401e0006401df006401de006401dd006401dc
006401db006401da006401d9006401d8006401d7006401d6006401d50064
01d4006401d3006401d2006401d1006401d0006401cf006401ce006401cd
006401cc006401cb006401ca006401c9006401c8006401c7006401c60064
01c5006401c4006401c3006401c2006401c1006401c0006401bf006401be
006401bd006401bc006401bb006401ba006401b9006401b8006401b70064
01b6006401b5006401b4006401b3006401b2006401b1006401b0006401af
006401ae006401ad006401ac006401ab006401aa006401a9006401a80064
01a7006401a6006401a5006401a4006401a3006401a2006401a1006401a0
0064019f0064019e0064019d0064019c0064019b0064019a006401990064
019800640197006401960064019500640194006401930064019200640191
006401900064018f0064018e0064018d0064018c0064018b0064018a0064
018900640188006401870064018600640185006441800184006401830064
018200640181006401800064017f0064017e0064017d0064017c0064017b
0064017a0064017900640178006401770064017600640175006401740064
01730064017200640171006401700064016f0064016e0064016d0064016c
0064016b0064016a00640169006401680064016700640166006401650064
0164006401630064016200640161006401600064015f0064015e0064015d
0064015c0064015b0064015a006401590064015800640157006401560064
0155006401540064015300640152006401500064014f0064014e0064014c
0064014b0064014a00640149006401480064014700640146006401450064
01440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[5861 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 322 3 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g3 3 def
end
PBAAAA+Calibri /Encoding get
dup 32 /g3 put
pop
end
%ADOEndSubsetFont
/GOFCNT+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 223{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
163.379 323.067 mo
( )sh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 680 4 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g4 4 def
end
PBAAAA+Calibri /Encoding get
dup 33 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 222{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
153.72 299.348 mo
(! )
[9.60135 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 1042 5 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g5 5 def
end
PBAAAA+Calibri /Encoding get
dup 34 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 221{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 275.628 mo
("  )
[9.60135 9.83095 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 251.909 mo
("! )
[9.60135 9.83095 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 1408 6 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g6 6 def
end
PBAAAA+Calibri /Encoding get
dup 35 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 220{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 228.19 mo
(#  )
[9.60135 9.83095 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 204.47 mo
(#! )
[9.60135 9.83095 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 1728 7 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g7 7 def
end
PBAAAA+Calibri /Encoding get
dup 36 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 219{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 180.751 mo
($  )
[9.60135 9.83095 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 157.032 mo
($! )
[9.60135 9.83095 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 2216 8 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g8 8 def
end
PBAAAA+Calibri /Encoding get
dup 37 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 218{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 133.313 mo
(%  )
[9.60135 9.83095 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 109.593 mo
(%! )
[9.60135 9.83095 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 85.8741 mo
(!  )
[9.60135 9.83095 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
144.061 62.1551 mo
(!! )
[9.60135 9.83095 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
188.716 347.848 mo
( )sh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
217.073 347.848 mo
(!)sh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
240.601 347.848 mo
(" )
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
268.958 347.848 mo
("!)
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
297.316 347.848 mo
(# )
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
325.673 347.848 mo
(#!)
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
354.03 347.848 mo
($ )
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
382.387 347.848 mo
($!)
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
410.744 347.848 mo
(% )
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
439.102 347.848 mo
(%!)
[9.60135 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 2610 9 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g9 9 def
end
PBAAAA+Calibri /Encoding get
dup 38 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
217{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
467.459 347.848 mo
(%&)
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
495.816 347.848 mo
(!%)
[9.60135 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
524.173 347.848 mo
(!&)
[9.60132 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 4924 19 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>PBAAAA+Calibri AddT42Char 
1 2980 10 <ffff006bffed03bd0520020600130000>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g10 10 def
end
PBAAAA+Calibri /Encoding get
dup 39 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 216{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
552.531 347.848 mo
('%)
[9.60132 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
580.888 347.848 mo
('&)
[9.60132 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 2996 11 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g11 11 def
end
PBAAAA+Calibri /Encoding get
dup 40 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g11 215{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
609.245 347.848 mo
(\(%)
[9.60132 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
637.602 347.848 mo
(\(&)
[9.60132 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 5272 20 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>PBAAAA+Calibri AddT42Char 
1 3314 12 <ffff0052ffed03ba0521020600140000>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g12 12 def
end
PBAAAA+Calibri /Encoding get
dup 41 /g12 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g11 /g12 214{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
665.959 347.848 mo
(\)%)
[9.60132 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
694.317 347.848 mo
(\)&)
[9.60132 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
722.674 347.848 mo
(&%)
[9.60132 0 ]xsh
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
751.031 347.848 mo
(&&)
[9.60132 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri-Bold
Type42DictBegin
[<00010000000a000a000a000a6376742016df0000000000ac000006086670
676de7920000000006b400000913676c7966fc9200000000266c000010e4
68656164f7b6000000000fc8000000366868656110c50000000010000000
0024686d74783bad000000001024000000446c6f63610783000000001068
000000486d6178700ec10000000010b000000020707265701f3800000000
10d00000159c676469720000000000000000000000000000079e0000fe93
0000000000000000000000810081009c00ab00b500ba00c100ca00d300f3
010a0060008500bf00e300ea00f200fb010001070115011c012900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe83056d000d03c0000600170000fffaffe9fea9
ffe90000050e000600170000fffaffe9fe93050e00170426000600170000
fffaffe9ff12ffed050e00170426000600170000fffaffe9fe93feb8fece
060b0010050e0006001002cbfffafff001edfffa023f00060010ff36fffa
fff00287000600100000fffafff0079efeaffe9f00000000000000000000
000000700072007500780079007a007b007d007e007f0083008600870088
00890085007f0086008b008c008d008e008f009000910092009300940095
0096009700980099009a009b009c009d009e009f009200930094009b009c
009e009e00960099009a009d009e00a200a600a900ac00a200a300a400a5
00a700a800a900aa00ab00ac00ae00a300a500a700a800aa00ab00ac00ad
00ae00a000a100a300a600a700a900aa00ac00ad00af00af00b000b100b2
00b300b400b500af00af00b000b200b300b400b500b800c000b600b700b8
00b900ba00bb00bc00bd00be00bf00c000c100c200b900ba00bc00bd00bf
00c000c100c200b600b700b800b900ba00bb00bc00bd00be00bf00c000c1
00c200c000c100c200c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf
00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00c500c8
00c900ca00cb00ce00cf00d000d100d200d300d400d500d600d700d900db
00de00df00e000e200e300ec00d000d100d200d300d400d500d600d700d8
00d900da00db00dd00de00df00e000e100e300e500e900ec00ed00d100d3
00d400d500d800d900da00dc00e000e100e800d000d100d400d600e000e4
010800f5010200fb00ff0108008f00900096009200930099009000910097
0098009a009d00a400a600a700a800a900af009a00a200a300a700a900aa
00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a00aa00ac00ad00ae
00af00b100b900bb00bc00bd00be00c100c200c300c400c500c600c700c8
00c900ca00cb00ce00b300b400b500b600b700b800bc00c200c500c800ca
00cb00cd00ce00cf00d000c700b700b800b900bb00bc00be00c600c700c8
00c900cb00cf00d000b200b600b700c200c400c500c600c700cb00cc00cd
00ce00cf00d000d100d400d500d700d800d900da00db00dc00de00df00e0
00e200e300e500e600d100d300d600d700d800da00db00dc00dd00de00df
00e000e100e200e300e400e500d100d200d400d500da00db00dd00de00df
00e000e100e200e600d200d300d400d700d800dd00de00e000e100e200e3
00e400e500e600d200da00e100e900ea00ec00e800e900ea00eb00ec00ed
00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed00ee00ef00f500ee
00ef00f000f100f200f300f400f500f600ee00f000f200ef00f000f100f2
00f300f400f500f600ee00ef00f000f100f200f300f400f500f600f700f7
00f800f900fa00fb00fc00fd00f700f800f900fa00fb00fd00f700f800f9
00fa00fb00fc00fd00fd00fe00ff010001010102010300fe010001010102
010300fe00ff010001010102010301020103010401050106010701080109
010a010c010d010e010f01100107010401050106010701080109010a010b
010d010e010f01100111010401050106010701080109010a010b010c010d
010e010f0110011101040105010601070109010e010f0112011301140115
01170118011a011b011c011d011e011f0121012201120113011401150117
0119011b011c011d011e0120012101230124012501130114011501160117
01180119011a011b011c011d011f01200117011c011d011e012001210129
013001770129012b012e012f013001310134013501370139012b012d0130
01320134013a012e01300134013a014200500062006c00fa05e802cc0114
011400a000b140465f5e5d5c5b5a59585554535251504f4e4d4c4b4a4948
47464544434241403f3e3d3c3b3a39383736352f2e2d2c2826252423221f
181411100f0d0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b004
2651582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b028
2370b101283e01b0282370b10228453ab10200080d2d2c2045b003254561
64b050515845441b2121592d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c
234445b02b23442d2c4b525845441b2121592d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b08051580c
6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648b
b81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2c
4523456023456023456023766818b08062202d2cb00426b00426b00425b0
042545234520b003266062636820b0032661658a2344442d2c2045b00054
58b040442045b04061441b2121592d2c45b1302f4523456160b001606944
2d2c4b5158b02f2370b01423421b2121592d2c4b515820b0032545695358
441b2121591b2121592d2c45b01443b0006063b0016069442d2cb02f4544
2d2c452320458a60442d2c45234560442d2c4b235158b90033ffe0b13420
1bb3330034005944442d2cb0164358b00326458a586466b01f601b64b020
606620581b21b04059b001615923586559b02923442310b029e01b212121
2121592d2cb0164358b004254564b020606620581b21b04059b001612358
6559b0292344b00425b00725082058021b0359b0052510b004252046b004
2523423cb0072510b006252046b00425b0016023423c2058011b0059b005
2510b00425b029e0b0072510b00625b029e0b00425b00725082058021b03
59b00425b003254348b00625b00325b0016043481b215921212121212121
2d2cb0164358b004254564b020606620581b21b04059b0016123581b6559
b0292344b00525b00825082058021b0359b0042510b005252046b0042523
423cb00425b0072508b0072510b006252046b00425b0016023423c205801
1b0059b0042510b00525b029e0b02920456544b0072510b00625b029e0b0
0525b00825082058021b0359b00525b003254348b00425b0072508b00625
b00325b0016043481b2159212121212121212d2c02b00425202046b00425
2342b0052508b003254548212121212d2c02b0032520b0042508b0022543
482121212d2c452320451820b00050205823652359236820b040505821b0
4059235865598a60442d2c4b53234b515a5820458a60441b2121592d2c4b
545820458a60441b2121592d2c4b53234b515a58381b2121592d2cb00021
4b5458381b2121592d2cb002435458b0462b1b21212121592d2cb0024354
58b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb00243
5458b0492b1b212121592d2c208a08234b538a4b515a5823381b2121592d
2c0020b200400325b0062649618b3812342d2c0146234660234661232010
20468a61b8ff80628ab140408a704560683a2d2c208a2349648a2353583c
1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123
018851b1400188535a58b910000020885458b202010243604259b1240188
5158b920000040885458b2020202436042b12401885458b2022002436042
004b014b5258b2020802436042591bb940000080885458b2020402436042
59b94000008063b80100885458b202080243604259b94000010063b80200
885458b202100243604259b94000020063b80400885458b2024002436042
59595959592d2c451868234b51582320452064b04050587c59688a605944
2d2cb00016b00225b0022501b001233e00b002233eb10102060cb00a2365
42b00b234201b001233f00b002233fb10102060cb006236542b0072342b0
0116012d2c20b82000628a6023622d2cb0072558001b0159b0042510b003
25b0022520b8ffff545821cd1bed5921b006255cb006255a58b0092b5920
b005254ab0042547b004254760b0062547b0806361b00225b0005558b003
25b00725496359b0082558001b0159b00425b0062549b009255cb009255a
58b0092b59b0072546b0806361b0032520b0005558631b2159612320b000
5558b080631b21b08059b0592bb006255c586959b00425202010b0004823
3ab0062658001b0159b0052658b003252f598a12233221212d2cb00625b0
0a2587b00625b009254ab0005358b00625b00a251bb00925b0072559b002
25b00225070cb005256323b00625636020b94000040063535821b00426b0
0426b00a1bb94000040063655158b0042665b0042665b00a1bb00426b004
26b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525
b0052507595920b0005558b00525b0052587b00725b007250bb0092510b0
0b25b0092620b8ffff545821cd1bed59b00525b0052507b00825b00b2549
23b00625b0062587b00a2510b00b25c15920b00051b800522378b00161b0
0225b00725b0072507b00a25b00d254961b08062b00525b005250bb00a25
2338b00625b0062587b00825b008250bb00a2510b00b25c4b00625b00625
07b00925b00c2549b0032554b8ffa723792121212121212121212121212d
2c23b0005458b9400000001bb900004000598ab0005458b9400000001bb9
0000400059b05b2b2d2c08b0005458b9400000001bb900004000590db05b
2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb0
0426b00426080db00426b00426080db05b2b2d00000100000005bae151da
afba5f0f3cf50019080000000000bbeb7ccc00000000cf7409dbfbdafd8d
09ec07c5000100090002000100000000000100000600fe0001c40aa0fbda
fa8609ec000100000000000000000000000000000011040e000000000000
0000000001cf000003c8003f03f30047044b004b0407004a01f7006b01f7
007e044b007e044d00480331004903c9001603fc001c03f6000c0682007e
000000000000013c0000013c0000013c0000013c000002b40000048c0000
05c40000075c000008060000088a0000099800000a7e00000c2400000d04
00000ea200000f60000010e40001000000110120001000bd000700020010
002f006000000c63159c00040001b10903b802f9b21e1d1fb802f8b21e2b
1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb8
02f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb802ef
b21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e
2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1f
b802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3b21e2c1fb802
e2b21e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d2f1fb802deb2
1d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191fb802dab21d2f
1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb8
02d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1
b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d121fb802cdb21d
121fb802ccb21d121fb802cbb21d121fb802cab21d191fb802c9b21d2f1f
b802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802
c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b2
1d2f1fb802bfb21d121fb802beb21d121fb802bdb21d2f1fb802bcb21d2f
1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb8
02b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3
b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c321fb802afb21c
331fb802aeb21c331fb802adb21c331fb802acb21c331fb802abb21c331f
b802aab21c311fb802a9b21c311fb802a8b21c321fb802a7b21c321fb802
a6b21c321fb802a5b21c321fb802a4b21c321fb802a3b21c321fb802a2b2
1c331fb802a1b21c331fb802a0b21c331fb8029fb21c331fb8029eb21c33
1fb8029db21c331fb8029cb21c311fb8029bb21c311fb8029ab21c321fb8
0299b21c321fb80298b21c321fb80297b21c321fb80296b21c321fb80295
b21c331fb80294b21c331fb80293b21c331fb80292b21c331fb80291b21c
331fb80290b21c331fb8028fb21c331fb8028eb21c311fb8028db21c321f
b8028cb21c321fb8028bb21c321fb8028ab21c321fb80289b21c321fb802
88b21c331fb80287b21c331fb80286b21c331fb80285b21c331fb80284b2
1c331fb80283b21c331fb80282b21b341fb80281b21b341fb80280b21b34
1fb8027fb21b341fb8027eb21b341fb8027db21b341fb8027cb21b341fb8
027bb21b341fb8027ab21b341fb80279b21b341fb80278b21b341fb80277
b21b341fb80276b21b341fb80275b21b341fb80274b21b341fb80273b21b
341fb80272b21b341fb80271b21b341fb80270b21b341fb8026fb21a351f
b8026eb21a351fb8026db21a351fb8026cb21a351fb8026bb21a351fb802
6ab21a351fb80269b21a351fb80268b21a351fb80267b21a351fb80266b2
1a351fb80265b21a351fb80264b21a351fb80263b21a351fb80262b21a35
1fb80261b21a351fb80260b21a351fb8025fb21a351fb8025eb21a351fb8
025db21a351fb8025cb21a351fb8025bb21a351fb8025ab21a351fb80259
b219371fb80258b219371fb80257b219371fb80256b219371fb80255b219
371fb80254b219371fb80253b219371fb80252b219371fb80251b219371f
b80250b219371fb8024fb219371fb8024eb219371fb8024db219371fb802
4cb219371fb8024bb219371fb8024ab219371fb80249b219371fb80248b2
19371fb80247b219371fb80246b219371fb80245b219371fb80244b21937
1fb80243b219371fb80242b219371fb80241b219371fb80240b219371fb8
023fb219371fb8023eb219371fb8023db219371fb8023cb219371fb8023b
b219371fb8023ab219371fb80239b218391fb80238b218391fb80237b218
391fb80236b218391fb80235b218391fb80234b218391fb80233b218391f
b80232b218391fb80231b218391fb80230b218391fb80301b2182e1fb802
2fb218391fb8022eb218391fb8022db218391fb8022cb218391fb8022bb2
18391fb8022ab218391fb80229b218391fb80228b218391fb80227b21839
1fb80226b218391fb80225b2173b1fb80224b2173b1fb80223b217321fb8
0222b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2173b1fb8021e
b2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b1fb8021ab217
3b1fb80219b2173b1fb80218b2173b1fb80217b2173b1fb80216b2173b1f
b80215b217321fb80214b2173a1fb80213b2173b1fb80212b2173b1fb802
11b2173b1fb80210b2173b1fb8020fb2173b1fb8020eb2173b1fb8020db2
173b1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1fb80209b21732
1fb80208b217321fb80207b2173b1fb80206b2173b1fb80205b2173b1fb8
0204b2173b1fb80203b2173b1fb80202b2173b1fb80201b2173b1fb80200
b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b1fb801fcb217
3b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b1fb801f8b2173b1f
b801f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4b2173b1fb801
f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0b2173b1fb801efb2
173b1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1fb801ebb2173b
1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1fb801e7b217321fb8
01e6b216231fb801e5b216231fb801e4b216371fb801e3b216371fb801e2
b216381fb801e1b216381fb801e0b216431fb801dfb216441fb801deb216
441fb801ddb216441fb801dcb216451fb801dbb216461fb801dab216461f
b801d9b216461fb801d8b216231fb801d7b216231fb801d6b216381fb801
d5b216431fb801d4b216431fb801d3b216431fb801d2b216441fb801d1b2
16461fb801d0b216461fb801cfb216461fb801ceb216461fb801cdb21646
1fb801ccb216461fb801cbb216431fb801cab216231fb801c9b216231fb8
01c8b216371fb801c7b216371fb801c6b216381fb801c5b216421fb801c4
b216431fb801c3b216441fb801c2b216451fb801c1b216461fb801c0b216
461fb801bfb216461fb801beb216461fb801bdb216461fb801bcb216461f
b801bbb216461fb801bab216371fb801b9b216381fb801b8b216421fb801
b7b216431fb801b6b216431fb801b5b216431fb801b4b216441fb801b3b2
16441fb801b2b216441fb801b1b216451fb801b0b216451fb801afb21645
1fb801aeb216461fb801adb216461fb801acb216461fb801abb216461fb8
01aab216461fb801a9b215341fb801a8b215411fb801a7b215411fb801a6
b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b215521fb801a2b215
401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8019eb215521f
b8019db2154d1fb8019cb215401fb8019bb2154d1fb8019ab2154e1fb801
99b2154e1fb80198b2154f1fb80197b2154f1fb80196b215501fb80195b2
15521fb80194b215521fb80193b215521fb80192b215411fb80191b2154f
1fb80190b215501fb8018fb215501fb8018eb215511fb8018db215521fb8
018cb215521fb8018bb215521fb8018ab214581fb80189b214591fb80188
b2145c1fb80187b2145d1fb80186b2144a1fb80185b2145b1fb80184b214
5c1fb80183b214591fb80182b2145d1fb8018140af145d1ff00f451fef0e
481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b561f
b00b561faf0b561fae0b561fad0b561fac0b561fab0b561faa0b561fa90b
561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b561fa20b561f
a10b561fa00b561f9f0b561f9e0a681f9a0a681f990a681f980a681f970a
681f960a681f950a681f940a681f930a681f920a681f910a681f9009681f
8f09681f8e09681f8d09681f8c09681f410902fc02fa0056001f02fb02fa
0068001f017fb213321fb8017eb212371fb80174b212371fb80173b21142
1fb80172b211421fb80171b211421fb80170b211421fb8016fb211421fb8
016eb211421fb8016db211421fb8016cb211421fb8016bb211421fb8016a
b211421fb8013cb211421fb8013bb210421fb8013ab210421fb80139b210
421fb80138b210421fb80137b210421fb80136b210421fb80135b210421f
b80134b210421fb80133b210421fb80132b20f451fb80131b20f451fb801
30b20f451fb80112b20f451fb80111b20f451fb80110b20f451fb8010fb2
0f451fb8010eb20f451fb8010db20e481fb8010cb20e481fb8010bb20e48
1fb8010ab20e481fb80109b20e481fb80108b20e481fb80107b20d4a1fb8
0106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e
1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd8
0b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba0b561f9d0a68
1f9c0a681fb80180b213321fb8017ab211401fb80179b211421fb80178b2
11421fb80177b211421fb80176b211421fb80175b211421fb80143b21142
1fb80142b210421fb80141b210421fb80140b210421fb8013fb210421fb8
013eb210421fb8013db20f451fb80115b20f451fb80114b20f451fb80113
b20f451fb903030302b2401fa4be030200b4030200c4030200030300b213
321fb8017bb213321fb80153b212371fb80152b211401fb80151b211401f
b80150b211401fb8014fb211401fb8014eb211401fb8014db211401fb801
4cb211401fb8014bb211401fb8014ab211401fb80149b211401fb80148b2
11401fb80147b211401fb80146b211401fb80145b211401fb80144b21140
1fb80122b211401fb80121b210421fb80120b210421fb8011fb210421fb8
011eb210421fb8011db210421fb8011cb210421fb8011bb210421fb8011a
b210421fb80119b210421fb80118b20f451fb80117b20f451fb80116409b
0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff80e481ff70e48
1ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe6
0d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e
1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc4
0c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb40b561fb30b56
1f9b0a681fb802fdb212371fb8017db212371fb8017cb212371fb80169b2
112e1fb80168b2112e1fb80167b211401fb80166b211401fb80165b21140
1fb80164b211401fb80163b211401fb80162b211401fb80161b211401fb8
0160b211401fb8015fb211401fb8015eb211401fb8015db211401fb8015c
b211401fb8015bb211401fb8015ab211401fb80159b211401fb80158b211
401fb80157b211401fb80156b211401fb80155b211401fb80154b211401f
b8012fb211401fb8012eb210421fb8012db210421fb8012cb210421fb801
2bb210421fb8012ab210421fb80129b210421fb80128b210421fb80127b2
10421fb80126b210421fb80125b20f451fb80124b20f451fb80123b20f45
1fb80105b20f451fb80104b20f451fb80103b20f451fb80102b20f451fb8
0101b20e481fb8010040a20e481fff0e481ffe0e481fe80c4e1fd60c4e1f
d50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b
561fb90b561f8503251f84032e1f83012e1f8248805581ab80557f487d55
7eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab
7a55047a147a020a7948775578ab77550b77010c764875555475e475f475
0314755475647574759475d475e47507a475b475c47503b8ffc040127538
3b46807590750214757475020075010fb8ffc04021750b0e467448725573
ab725504723472023bf47201e07201023072015072607202b8ffc0b37224
2846b8ffc0403572161a461072307240720371486f5570ab6f554f6f6f6f
7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e486d55df6d0100
bc02ff001002ff00c002ffb2030a6fbb02fe000100ef02fe40ff016b032e
1f6a03251f692e675568ab6755662e645565ab6455632e6255612e60555f
2e5d555eab5d555c2e5a555bab5a55592e58555703251f562e545555ab54
55532e515552ab51554f2e4e554e03251f4d2e4b554cab4b554a2e485549
ab4855504801472e46554503361f001f01001e01001e701e801ef01e040b
601d701d02701de01df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f
1a020f1a8f1a020f191f198f199f19af19050f198f199f19030c70128012
02701180110230114011d011e011040011a011020f8f0f9f0faf0f034f0f
5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e
0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e
3246400d2427463f0c4f0c5f0c039f0c01400c262946ef0aff0a02400a24
2746ef09ff0902ff09010003012001010001100120010308b8ffc0b30115
1f46b80100b316010501b80190b154532b2b4bb807ff524bb008505bb001
88b02553b00188b040515ab00688b000555a5b58b101018e59b101024354
b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb08053
58b0401d594bb0ff5358b0001db1160042592b5e73757373742b732b7374
2b2b73745e732b5e7374757374755e73747573015e737473747575747374
5e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b73745e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373
732b7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[4325 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 3332 14 <0002001cfffa03df05140059005d0097b61e5b5a4904481fb801d2b7292a
34353d04293eb801d3b74811070656045512b801d3b71c1d5c5d4a041c4b
b801d3402d553929481c550b0b551c48293906002e5052563d49d35a3506
5a34075bd41e2a111e5a1e5a1e24435224551755003f3f3f1239392f2f11
333310ed323211333310ed32323f012fc417392f2f2f2f2f2f10ed111739
10ed11173910ed11173910ed111739313001140e0223230333321615140e
022323030e0323222e02371323030e0323222e02371323222635343e0233
3313232226353436333313343e0233321e02150333133e0333321e020703
3332160503331303df060a0f087222621115060a0f087725010917271e20
2714070126e02501091627201f26150702245f1115060a0e097422651115
161178240a18281f1f26140525e022010a1728201f2614050123601115fd
c022df23037618211409fee3272e18221409fec7090d0a04040a0d090139
fec7080e0a04040a0d090139262f18221409011d262f30260124090d0a05
050a0d08fedb0124080e0a05050a0d08fedb2784fee3011d>HIBBAA+Calibri-Bold AddT42Char 
1 3108 13 <00010016fffa03b303c6002c0055b10102435558b210211fb80284b64015
2120062123b8025d400c400020212849210b1a490b4c00183f3f12393f01
192f1a18dd1a4ded12391a10dd1aed123931301bb72849210b1a490b4c00
183f3f12393f31305901140e0207010e0323222e0227012e0235343e0233
321e0217131737133e0333321e0203b301030504fef40511274336354326
1105fef40607010b1c312529321d0c04cb0606c8030d1c2f26252f1a0a03
9f050e11160efcd911150c04050c1510032714200e060a0f0a040509110c
fd711919028f0c110905040a0f00>HIBBAA+Calibri-Bold AddT42Char 
1 692 5 <00020047ffe9037603d7003300400129b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f
5f5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed32393130
1b400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e
412ab80118401be02201037d228d2202402250226022030f221f22020c04
2222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe840091001
4d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f5f5e5d5d5d5f5ded
1112392f2b5d71ed5d7131305925140606232226263535060623222e0235
343e02333335342e0223220e0223222e0235343e0433321e02150723220e
02151416333236370376142b2a2d2911378d56477757303d79b477571127
41303f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35
592e1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a
26171f241d231e132955865cda122433213840363400>HIBBAA+Calibri-Bold AddT42Char 
1 2054 9 <0001007efffa017a05700015003fb10102435558400f0d15010b0b010b0a
010d00010b0400b80260b5400a1046054c00183f3f012f1a4ded31305f5e
5d5d5d5d1bb31046054c00183f3f31305925140e0223222e023511343e02
33321e0215017a0c1d302525301d0c0c1d302525301d0c220a0f0a05050a
0f0a05230a100b06060b100a>HIBBAA+Calibri-Bold AddT42Char 
1 1884 8 <0002006bfffa018d054e001500210045b10102435558bf001602bf001c00
150260000a001f017bb540191049054c00183f3fd61a4ded012fedd4ed31
301bb9001f017bb540191049054c00183f3fd61a4ded31305925140e0223
222e023511343e0233321e0215131406232226353436333216017a0c1d30
2525301d0c0c1d302525301d0c133e54553b3d55543c220a0f0a05050a0f
0a037a0a0f0b06060b0f0a01304c3a38494c3b39>HIBBAA+Calibri-Bold AddT42Char 
1 1164 6 <0002004bffe903cc056d002600390095b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1a4ded2b3fed2b
1217393f012fedd4ed323931301b400921460b39271b040e2ab8ffe8b40b
0f014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f
3f1a4ded2b3fed2b1217393f31305925140e0223222e023535060623222e
0235343e023332161711343e0233321e021503262623220e0215141e0233
323e023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d
302525301c0cfa36633631472b15122944341a31333620220b0f0a04040a
0f0b634a524f86b36377be86483d3b01e30a100b06060b100afd34444831
526535386a53320f22372800>HIBBAA+Calibri-Bold AddT42Char 

1 0 3 <> HIBBAA+Calibri-Bold AddT42Char 
1 316 4 <0001003fffe9038c0525004900bbb10102435558b900410297b524322432
0c1bb8029cb2000c2ebb012d0037000a012db61137113711163cb8ffe8b4
0b0f014c3cb8012d400c411b05295316180b0f014c16b80158b240055600
183f1a4ded2b3f123939ed2b1139392f2f10ed10ed012fd4ed1239392f2f
ed31301bbc002e012d0037000a012db61137113711163cb8ffe8b40b0f01
4c3cb8012d400c411b05295316180b0f014c16b80158b240055600183f1a
4ded2b3f123939ed2b1139392f2f10ed10ed31305901140e0223222e0435
343e0233321e0233323e0235342e0635343e0233321e0615140e0223222e
0223220e0215141e06038c4c82ae634373583b1a0b04090f0a0e33506f49
304c351c304d6268624d3045759f592e5c503e1407050203070d0b0b3046
5c372b402b152f4f6468644e300184669a6734161f221a312e1f2a1a0b21
2821172a3e262c3f312b303d5574515d8d5d2e0e181e140e17231a1d281a
0c1c211b1525341d2b3f312b303d5573>HIBBAA+Calibri-Bold AddT42Char 
1 1476 7 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>HIBBAA+Calibri-Bold AddT42Char 
1 2686 12 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>HIBBAA+Calibri-Bold AddT42Char 
1 2456 11 <00020048ffe9040403d7001300270071b10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fe
fd1532533f3854361b1631543e3954361a01e972bc884a427eb87672bd87
4a417eb881426f522e294f6f47426f522d294e6f>HIBBAA+Calibri-Bold AddT42Char 
1 2186 10 <0001007efffa03d203d700320081b10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1a4ded2b2b012fd4ed10ed3931
301bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a
192449194c054c00183f3f3f12393f1a4ded2b2b31305925140e0223222e
023511342e022322060711140e0223222e023511343e0233321e02151536
3633321e021503d20c1c312425311c0c132439263062350c1d302525301d
0c0a1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a35
1d4643fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61
>HIBBAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>HIBBAA+Calibri-Bold AddT42Char 
HIBBAA+Calibri-Bold /CharStrings get begin
/g14 14 def
/g13 13 def
/g5 5 def
/g9 9 def
/g8 8 def
/g6 6 def
/g3 3 def
/g4 4 def
/g7 7 def
/g12 12 def
/g11 11 def
/g10 10 def
end
HIBBAA+Calibri-Bold /Encoding get
dup 32 /g14 put
dup 33 /g13 put
dup 34 /g5 put
dup 35 /g9 put
dup 36 /g8 put
dup 37 /g6 put
dup 38 /g3 put
dup 39 /g4 put
dup 40 /g7 put
dup 41 /g12 put
dup 42 /g11 put
dup 43 /g10 put
pop
end
%ADOEndSubsetFont
/GOFCNU+Calibri-Bold /HIBBAA+Calibri-Bold findfont ct_VMDictPut
/GOFCNU+Calibri-Bold*1 
[32{/.notdef}rp /g14 /g13 /g5 /g9 /g8 /g6 /g3 
/g4 /g7 /g12 /g11 /g10 212{/.notdef}rp]
GOFCNU+Calibri-Bold nf
GOFCNU+Calibri-Bold*1 [0 -18.9857 -18.9751 0 0 0 ]msf
133.154 246.396 mo
( !"#$%&'\(\)\)$*+\))
[-9.37898 -8.92154 -9.379 -4.57549 -4.57549 -10.2939 -4.5755 -8.92126 -9.60698 -7.54866 -7.54868 -4.57549 
-10.2941 -10.2939 0 ]ysh
%ADOBeginSubsetFont: HIBBAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Calibri-Bold gcheck setglobal} if
1 3746 15 <0001000cfffa03ea050e00220055b10102435558b10006b80294b3181106
12b8ffe8b40b0f014c12b8015bb4401d510c5500183f3f1a4ded2b32012f
c4fdcd31301bb10612b8ffe8b40b0f014c12b8015bb4401d510c5500183f
3f1a4ded2b3231305901140e02232111140e0223222e02351121222e0235
343e023321321e0203ea050a0f09febc0d1e332626331e0dfebc0a0e0a05
050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a100a04130c19
291d1e2a190b0b192a00>HIBBAA+Calibri-Bold AddT42Char 
1 3936 16 <0001007efffa060903d7005000abb10102435558b14613b8025fb31e1e32
0ab8025fb2503e27bb026000320010ffe8b40b0f014c10b8014db24b4a24
b8ffe8b40b0f014c24b8014d400e40414a3e462d38492d4c194c054c0018
3f3f3f3f1239393f1a4ded2b3fed2b012fed39d4ed11392fed3931301bb9
0010ffe8b40b0f014c10b8014db24b4a24b8ffe8b40b0f014c24b8014d40
0e40414a3e462d38492d4c194c054c00183f3f3f3f1239393f1a4ded2b3f
ed2b31305925140e0223222e023511342e022322060711140e0223222e02
3511342e022322060711140e0223222e023511343e0233321e0215153636
33321e02173e0333321e021506090c1c302526301d0b112335252d5c360c
1d302425301d0c112236242e5c350c1d302525301d0c0a1a291f202a170a
4a93503758453211284d4b4b27597a4b20220a0f0a05050a0f0a02112d4a
351d4643fdaf0a0f0a05050a0f0a02112d4a351d4643fdaf0a0f0a05050a
0f0a037c0a0f0a05050a0f0a675050172b3c252b3e27133c678a4d00>HIBBAA+Calibri-Bold AddT42Char 
HIBBAA+Calibri-Bold /CharStrings get begin
/g15 15 def
/g16 16 def
end
HIBBAA+Calibri-Bold /Encoding get
dup 44 /g15 put
dup 45 /g16 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNU+Calibri-Bold*1 
[32{/.notdef}rp /g14 /g13 /g5 /g9 /g8 /g6 /g3 
/g4 /g7 /g12 /g11 /g10 /g15 /g16 210{/.notdef}rp]
GOFCNU+Calibri-Bold nf
GOFCNU+Calibri-Bold*1 [18.9751 0 0 -18.9857 0 0 ]msf
457.519 376.832 mo
(,$-\()
[9.37347 4.57297 15.5464 0 ]xsh
341.866 16.3914 mo
354.452 16.3914 li
355.651 16.3914 356.61 17.3514 356.61 18.4304 cv
356.61 19.6304 355.651 20.5894 354.452 20.5894 cv
341.866 20.5894 li
340.787 20.5894 339.828 19.6304 339.828 18.4304 cv
339.828 17.3514 340.787 16.3914 341.866 16.3914 cv
cp
371.234 16.3914 mo
383.82 16.3914 li
385.019 16.3914 385.978 17.3514 385.978 18.4304 cv
385.978 19.6304 385.019 20.5894 383.82 20.5894 cv
371.234 20.5894 li
370.155 20.5894 369.196 19.6304 369.196 18.4304 cv
369.196 17.3514 370.155 16.3914 371.234 16.3914 cv
cp
.577668 .58323 .597478 rgb
f
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 3578 14 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>PBAAAA+Calibri AddT42Char 
1 3734 15 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>PBAAAA+Calibri AddT42Char 
1 3330 13 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g14 14 def
/g15 15 def
/g13 13 def
end
PBAAAA+Calibri /Encoding get
dup 42 /g14 put
dup 43 /g15 put
dup 44 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g11 /g12 /g14 /g15 /g13 211{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
395.258 23.7561 mo
(*+,)
[8.00165 9.37378 0 ]xsh
441.717 16.3914 mo
489.784 16.3914 li
490.983 16.3914 491.942 17.3514 491.942 18.4304 cv
491.942 19.6304 490.983 20.5894 489.784 20.5894 cv
441.717 20.5894 li
440.638 20.5894 439.679 19.6304 439.679 18.4304 cv
439.679 17.3514 440.638 16.3914 441.717 16.3914 cv
cp
f
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 4504 18 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>PBAAAA+Calibri AddT42Char 
1 3940 16 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>PBAAAA+Calibri AddT42Char 
1 4158 17 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g18 18 def
/g16 16 def
/g17 17 def
end
PBAAAA+Calibri /Encoding get
dup 45 /g18 put
dup 46 /g16 put
dup 47 /g17 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GOFCNT+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g11 /g12 /g14 /g15 /g13 /g18 /g16 
/g17 208{/.notdef}rp]
GOFCNT+Calibri nf
GOFCNT+Calibri*1 [18.9751 0 0 -18.9857 0 0 ]msf
495.186 23.7561 mo
(-.//)
[8.68668 11.8881 16.2314 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/GOFCNU+Calibri-Bold*1 uf
/GOFCNU+Calibri-Bold uf
/HIBBAA+Calibri-Bold uf
/GOFCNT+Calibri*1 uf
/GOFCNT+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
