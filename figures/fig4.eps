%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig4.pdf
%%Creator: Adobe Acrobat 9.3.3
%%For: Yong
%%CreationDate: 2015-08-07, ¿ÀÈÄ 2:20:19
%%BoundingBox: 0 0 707 416
%%HiResBoundingBox: 0 0 706.5465 415.7950
%%CropBox: 0 0 706.5465 415.7950
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1291 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/"
   pdf:PDFVersion="1.4"
   pdf:Producer="Hancom PDF 1.3.0.404"
   xmp:CreatorTool="Hancom PDF 1.3.0.404"
   xmp:CreateDate="2015-08-07T14:19:55+09:00"
   xmp:ModifyDate="2015-08-07T14:19:55+09:00"
   xmp:MetadataDate="2015-08-07T14:19:55+09:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="CD8A2ACE-878B-4855-A111-2E1565EC530F"
   xmpMM:InstanceID="uuid:1F63AEE1-1DAA-476C-A5D0-465B129EF21E"
   pdfaid:part="1"
   pdfaid:conformance="B">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yong</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-repair">PerformaceEval.xlsx</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:date>
    <rdf:Seq>
     <rdf:li>2015-08-07T14:19:55+09:00</rdf:li>
    </rdf:Seq>
   </dc:date>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -415.795 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 415.795 li
706.546 415.795 li
706.546 0 li
cp
clp
[1 0 0 1 -50.8307 0 ]ct
gsave
50.273 -52.7445 mo
739.727 -52.7445 li
739.727 451.256 li
50.273 451.256 li
cp
eclp
gsave
50.273 -6.30447 mo
739.727 -6.30447 li
739.727 404.816 li
50.273 404.816 li
cp
eclp
50.273 404.936 mo
739.728 404.936 li
739.728 -6.18448 li
50.273 -6.18448 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
grestore
148.305 317.816 mo
712.916 317.816 li
712.916 60.0555 li
148.305 60.0555 li
cp
false sop
1 1 1 rgb
ef
148.185 293.696 mo
153.452 293.696 li
153.452 295.016 li
148.185 295.016 li
148.185 293.696 li
cp
157.402 293.696 mo
162.668 293.696 li
162.668 295.016 li
157.402 295.016 li
157.402 293.696 li
cp
166.618 293.696 mo
171.885 293.696 li
171.885 295.016 li
166.618 295.016 li
166.618 293.696 li
cp
175.835 293.696 mo
181.102 293.696 li
181.102 295.016 li
175.835 295.016 li
175.835 293.696 li
cp
185.052 293.696 mo
190.318 293.696 li
190.318 295.016 li
185.052 295.016 li
185.052 293.696 li
cp
194.268 293.696 mo
199.535 293.696 li
199.535 295.016 li
194.268 295.016 li
194.268 293.696 li
cp
203.485 293.696 mo
208.752 293.696 li
208.752 295.016 li
203.485 295.016 li
203.485 293.696 li
cp
212.702 293.696 mo
217.968 293.696 li
217.968 295.016 li
212.702 295.016 li
212.702 293.696 li
cp
221.918 293.696 mo
227.185 293.696 li
227.185 295.016 li
221.918 295.016 li
221.918 293.696 li
cp
231.135 293.696 mo
236.402 293.696 li
236.402 295.016 li
231.135 295.016 li
231.135 293.696 li
cp
240.352 293.696 mo
245.618 293.696 li
245.618 295.016 li
240.352 295.016 li
240.352 293.696 li
cp
249.568 293.696 mo
254.835 293.696 li
254.835 295.016 li
249.568 295.016 li
249.568 293.696 li
cp
258.785 293.696 mo
264.052 293.696 li
264.052 295.016 li
258.785 295.016 li
258.785 293.696 li
cp
268.001 293.696 mo
273.268 293.696 li
273.268 295.016 li
268.001 295.016 li
268.001 293.696 li
cp
277.218 293.696 mo
282.485 293.696 li
282.485 295.016 li
277.218 295.016 li
277.218 293.696 li
cp
286.435 293.696 mo
291.702 293.696 li
291.702 295.016 li
286.435 295.016 li
286.435 293.696 li
cp
295.652 293.696 mo
300.918 293.696 li
300.918 295.016 li
295.652 295.016 li
295.652 293.696 li
cp
304.868 293.696 mo
310.135 293.696 li
310.135 295.016 li
304.868 295.016 li
304.868 293.696 li
cp
314.085 293.696 mo
319.352 293.696 li
319.352 295.016 li
314.085 295.016 li
314.085 293.696 li
cp
323.302 293.696 mo
328.568 293.696 li
328.568 295.016 li
323.302 295.016 li
323.302 293.696 li
cp
332.518 293.696 mo
337.785 293.696 li
337.785 295.016 li
332.518 295.016 li
332.518 293.696 li
cp
341.735 293.696 mo
347.001 293.696 li
347.001 295.016 li
341.735 295.016 li
341.735 293.696 li
cp
350.952 293.696 mo
356.218 293.696 li
356.218 295.016 li
350.952 295.016 li
350.952 293.696 li
cp
360.168 293.696 mo
365.435 293.696 li
365.435 295.016 li
360.168 295.016 li
360.168 293.696 li
cp
369.385 293.696 mo
374.652 293.696 li
374.652 295.016 li
369.385 295.016 li
369.385 293.696 li
cp
378.602 293.696 mo
383.868 293.696 li
383.868 295.016 li
378.602 295.016 li
378.602 293.696 li
cp
387.818 293.696 mo
393.085 293.696 li
393.085 295.016 li
387.818 295.016 li
387.818 293.696 li
cp
397.035 293.696 mo
402.302 293.696 li
402.302 295.016 li
397.035 295.016 li
397.035 293.696 li
cp
406.251 293.696 mo
411.518 293.696 li
411.518 295.016 li
406.251 295.016 li
406.251 293.696 li
cp
415.468 293.696 mo
420.735 293.696 li
420.735 295.016 li
415.468 295.016 li
415.468 293.696 li
cp
424.685 293.696 mo
429.952 293.696 li
429.952 295.016 li
424.685 295.016 li
424.685 293.696 li
cp
433.902 293.696 mo
439.168 293.696 li
439.168 295.016 li
433.902 295.016 li
433.902 293.696 li
cp
443.118 293.696 mo
448.385 293.696 li
448.385 295.016 li
443.118 295.016 li
443.118 293.696 li
cp
452.335 293.696 mo
457.602 293.696 li
457.602 295.016 li
452.335 295.016 li
452.335 293.696 li
cp
461.552 293.696 mo
466.818 293.696 li
466.818 295.016 li
461.552 295.016 li
461.552 293.696 li
cp
470.768 293.696 mo
476.035 293.696 li
476.035 295.016 li
470.768 295.016 li
470.768 293.696 li
cp
479.985 293.696 mo
485.251 293.696 li
485.251 295.016 li
479.985 295.016 li
479.985 293.696 li
cp
489.202 293.696 mo
494.468 293.696 li
494.468 295.016 li
489.202 295.016 li
489.202 293.696 li
cp
498.418 293.696 mo
503.685 293.696 li
503.685 295.016 li
498.418 295.016 li
498.418 293.696 li
cp
507.635 293.696 mo
512.901 293.696 li
512.901 295.016 li
507.635 295.016 li
507.635 293.696 li
cp
516.852 293.696 mo
522.118 293.696 li
522.118 295.016 li
516.852 295.016 li
516.852 293.696 li
cp
526.068 293.696 mo
531.335 293.696 li
531.335 295.016 li
526.068 295.016 li
526.068 293.696 li
cp
535.285 293.696 mo
540.552 293.696 li
540.552 295.016 li
535.285 295.016 li
535.285 293.696 li
cp
544.502 293.696 mo
549.768 293.696 li
549.768 295.016 li
544.502 295.016 li
544.502 293.696 li
cp
553.718 293.696 mo
558.985 293.696 li
558.985 295.016 li
553.718 295.016 li
553.718 293.696 li
cp
562.935 293.696 mo
568.201 293.696 li
568.201 295.016 li
562.935 295.016 li
562.935 293.696 li
cp
572.151 293.696 mo
577.418 293.696 li
577.418 295.016 li
572.151 295.016 li
572.151 293.696 li
cp
581.368 293.696 mo
586.635 293.696 li
586.635 295.016 li
581.368 295.016 li
581.368 293.696 li
cp
590.585 293.696 mo
595.852 293.696 li
595.852 295.016 li
590.585 295.016 li
590.585 293.696 li
cp
599.802 293.696 mo
605.068 293.696 li
605.068 295.016 li
599.802 295.016 li
599.802 293.696 li
cp
609.018 293.696 mo
614.285 293.696 li
614.285 295.016 li
609.018 295.016 li
609.018 293.696 li
cp
618.235 293.696 mo
623.502 293.696 li
623.502 295.016 li
618.235 295.016 li
618.235 293.696 li
cp
627.451 293.696 mo
632.718 293.696 li
632.718 295.016 li
627.451 295.016 li
627.451 293.696 li
cp
636.668 293.696 mo
641.935 293.696 li
641.935 295.016 li
636.668 295.016 li
636.668 293.696 li
cp
645.885 293.696 mo
651.151 293.696 li
651.151 295.016 li
645.885 295.016 li
645.885 293.696 li
cp
655.102 293.696 mo
660.368 293.696 li
660.368 295.016 li
655.102 295.016 li
655.102 293.696 li
cp
664.318 293.696 mo
669.585 293.696 li
669.585 295.016 li
664.318 295.016 li
664.318 293.696 li
cp
673.535 293.696 mo
678.802 293.696 li
678.802 295.016 li
673.535 295.016 li
673.535 293.696 li
cp
682.752 293.696 mo
688.018 293.696 li
688.018 295.016 li
682.752 295.016 li
682.752 293.696 li
cp
691.968 293.696 mo
697.235 293.696 li
697.235 295.016 li
691.968 295.016 li
691.968 293.696 li
cp
701.185 293.696 mo
706.451 293.696 li
706.451 295.016 li
701.185 295.016 li
701.185 293.696 li
cp
710.401 293.696 mo
712.795 293.696 li
712.795 295.016 li
710.401 295.016 li
710.401 293.696 li
cp
148.185 270.296 mo
153.452 270.296 li
153.452 271.616 li
148.185 271.616 li
148.185 270.296 li
cp
157.402 270.296 mo
162.668 270.296 li
162.668 271.616 li
157.402 271.616 li
157.402 270.296 li
cp
166.618 270.296 mo
171.885 270.296 li
171.885 271.616 li
166.618 271.616 li
166.618 270.296 li
cp
175.835 270.296 mo
181.102 270.296 li
181.102 271.616 li
175.835 271.616 li
175.835 270.296 li
cp
185.052 270.296 mo
190.318 270.296 li
190.318 271.616 li
185.052 271.616 li
185.052 270.296 li
cp
194.268 270.296 mo
199.535 270.296 li
199.535 271.616 li
194.268 271.616 li
194.268 270.296 li
cp
203.485 270.296 mo
208.752 270.296 li
208.752 271.616 li
203.485 271.616 li
203.485 270.296 li
cp
212.702 270.296 mo
217.968 270.296 li
217.968 271.616 li
212.702 271.616 li
212.702 270.296 li
cp
221.918 270.296 mo
227.185 270.296 li
227.185 271.616 li
221.918 271.616 li
221.918 270.296 li
cp
231.135 270.296 mo
236.402 270.296 li
236.402 271.616 li
231.135 271.616 li
231.135 270.296 li
cp
240.352 270.296 mo
245.618 270.296 li
245.618 271.616 li
240.352 271.616 li
240.352 270.296 li
cp
249.568 270.296 mo
254.835 270.296 li
254.835 271.616 li
249.568 271.616 li
249.568 270.296 li
cp
258.785 270.296 mo
264.052 270.296 li
264.052 271.616 li
258.785 271.616 li
258.785 270.296 li
cp
268.001 270.296 mo
273.268 270.296 li
273.268 271.616 li
268.001 271.616 li
268.001 270.296 li
cp
277.218 270.296 mo
282.485 270.296 li
282.485 271.616 li
277.218 271.616 li
277.218 270.296 li
cp
286.435 270.296 mo
291.702 270.296 li
291.702 271.616 li
286.435 271.616 li
286.435 270.296 li
cp
295.652 270.296 mo
300.918 270.296 li
300.918 271.616 li
295.652 271.616 li
295.652 270.296 li
cp
304.868 270.296 mo
310.135 270.296 li
310.135 271.616 li
304.868 271.616 li
304.868 270.296 li
cp
314.085 270.296 mo
319.352 270.296 li
319.352 271.616 li
314.085 271.616 li
314.085 270.296 li
cp
323.302 270.296 mo
328.568 270.296 li
328.568 271.616 li
323.302 271.616 li
323.302 270.296 li
cp
332.518 270.296 mo
337.785 270.296 li
337.785 271.616 li
332.518 271.616 li
332.518 270.296 li
cp
341.735 270.296 mo
347.001 270.296 li
347.001 271.616 li
341.735 271.616 li
341.735 270.296 li
cp
350.952 270.296 mo
356.218 270.296 li
356.218 271.616 li
350.952 271.616 li
350.952 270.296 li
cp
360.168 270.296 mo
365.435 270.296 li
365.435 271.616 li
360.168 271.616 li
360.168 270.296 li
cp
369.385 270.296 mo
374.652 270.296 li
374.652 271.616 li
369.385 271.616 li
369.385 270.296 li
cp
378.602 270.296 mo
383.868 270.296 li
383.868 271.616 li
378.602 271.616 li
378.602 270.296 li
cp
387.818 270.296 mo
393.085 270.296 li
393.085 271.616 li
387.818 271.616 li
387.818 270.296 li
cp
397.035 270.296 mo
402.302 270.296 li
402.302 271.616 li
397.035 271.616 li
397.035 270.296 li
cp
406.251 270.296 mo
411.518 270.296 li
411.518 271.616 li
406.251 271.616 li
406.251 270.296 li
cp
415.468 270.296 mo
420.735 270.296 li
420.735 271.616 li
415.468 271.616 li
415.468 270.296 li
cp
424.685 270.296 mo
429.952 270.296 li
429.952 271.616 li
424.685 271.616 li
424.685 270.296 li
cp
433.902 270.296 mo
439.168 270.296 li
439.168 271.616 li
433.902 271.616 li
433.902 270.296 li
cp
443.118 270.296 mo
448.385 270.296 li
448.385 271.616 li
443.118 271.616 li
443.118 270.296 li
cp
452.335 270.296 mo
457.602 270.296 li
457.602 271.616 li
452.335 271.616 li
452.335 270.296 li
cp
461.552 270.296 mo
466.818 270.296 li
466.818 271.616 li
461.552 271.616 li
461.552 270.296 li
cp
470.768 270.296 mo
476.035 270.296 li
476.035 271.616 li
470.768 271.616 li
470.768 270.296 li
cp
479.985 270.296 mo
485.251 270.296 li
485.251 271.616 li
479.985 271.616 li
479.985 270.296 li
cp
489.202 270.296 mo
494.468 270.296 li
494.468 271.616 li
489.202 271.616 li
489.202 270.296 li
cp
498.418 270.296 mo
503.685 270.296 li
503.685 271.616 li
498.418 271.616 li
498.418 270.296 li
cp
507.635 270.296 mo
512.901 270.296 li
512.901 271.616 li
507.635 271.616 li
507.635 270.296 li
cp
516.852 270.296 mo
522.118 270.296 li
522.118 271.616 li
516.852 271.616 li
516.852 270.296 li
cp
526.068 270.296 mo
531.335 270.296 li
531.335 271.616 li
526.068 271.616 li
526.068 270.296 li
cp
535.285 270.296 mo
540.552 270.296 li
540.552 271.616 li
535.285 271.616 li
535.285 270.296 li
cp
544.502 270.296 mo
549.768 270.296 li
549.768 271.616 li
544.502 271.616 li
544.502 270.296 li
cp
553.718 270.296 mo
558.985 270.296 li
558.985 271.616 li
553.718 271.616 li
553.718 270.296 li
cp
562.935 270.296 mo
568.201 270.296 li
568.201 271.616 li
562.935 271.616 li
562.935 270.296 li
cp
572.151 270.296 mo
577.418 270.296 li
577.418 271.616 li
572.151 271.616 li
572.151 270.296 li
cp
581.368 270.296 mo
586.635 270.296 li
586.635 271.616 li
581.368 271.616 li
581.368 270.296 li
cp
590.585 270.296 mo
595.852 270.296 li
595.852 271.616 li
590.585 271.616 li
590.585 270.296 li
cp
599.802 270.296 mo
605.068 270.296 li
605.068 271.616 li
599.802 271.616 li
599.802 270.296 li
cp
609.018 270.296 mo
614.285 270.296 li
614.285 271.616 li
609.018 271.616 li
609.018 270.296 li
cp
618.235 270.296 mo
623.502 270.296 li
623.502 271.616 li
618.235 271.616 li
618.235 270.296 li
cp
627.451 270.296 mo
632.718 270.296 li
632.718 271.616 li
627.451 271.616 li
627.451 270.296 li
cp
636.668 270.296 mo
641.935 270.296 li
641.935 271.616 li
636.668 271.616 li
636.668 270.296 li
cp
645.885 270.296 mo
651.151 270.296 li
651.151 271.616 li
645.885 271.616 li
645.885 270.296 li
cp
655.102 270.296 mo
660.368 270.296 li
660.368 271.616 li
655.102 271.616 li
655.102 270.296 li
cp
664.318 270.296 mo
669.585 270.296 li
669.585 271.616 li
664.318 271.616 li
664.318 270.296 li
cp
673.535 270.296 mo
678.802 270.296 li
678.802 271.616 li
673.535 271.616 li
673.535 270.296 li
cp
682.752 270.296 mo
688.018 270.296 li
688.018 271.616 li
682.752 271.616 li
682.752 270.296 li
cp
691.968 270.296 mo
697.235 270.296 li
697.235 271.616 li
691.968 271.616 li
691.968 270.296 li
cp
701.185 270.296 mo
706.451 270.296 li
706.451 271.616 li
701.185 271.616 li
701.185 270.296 li
cp
710.401 270.296 mo
712.795 270.296 li
712.795 271.616 li
710.401 271.616 li
710.401 270.296 li
cp
148.185 246.896 mo
153.452 246.896 li
153.452 248.216 li
148.185 248.216 li
148.185 246.896 li
cp
157.402 246.896 mo
162.668 246.896 li
162.668 248.216 li
157.402 248.216 li
157.402 246.896 li
cp
166.618 246.896 mo
171.885 246.896 li
171.885 248.216 li
166.618 248.216 li
166.618 246.896 li
cp
175.835 246.896 mo
181.102 246.896 li
181.102 248.216 li
175.835 248.216 li
175.835 246.896 li
cp
185.052 246.896 mo
190.318 246.896 li
190.318 248.216 li
185.052 248.216 li
185.052 246.896 li
cp
194.268 246.896 mo
199.535 246.896 li
199.535 248.216 li
194.268 248.216 li
194.268 246.896 li
cp
203.485 246.896 mo
208.752 246.896 li
208.752 248.216 li
203.485 248.216 li
203.485 246.896 li
cp
212.702 246.896 mo
217.968 246.896 li
217.968 248.216 li
212.702 248.216 li
212.702 246.896 li
cp
221.918 246.896 mo
227.185 246.896 li
227.185 248.216 li
221.918 248.216 li
221.918 246.896 li
cp
231.135 246.896 mo
236.402 246.896 li
236.402 248.216 li
231.135 248.216 li
231.135 246.896 li
cp
240.352 246.896 mo
245.618 246.896 li
245.618 248.216 li
240.352 248.216 li
240.352 246.896 li
cp
249.568 246.896 mo
254.835 246.896 li
254.835 248.216 li
249.568 248.216 li
249.568 246.896 li
cp
258.785 246.896 mo
264.052 246.896 li
264.052 248.216 li
258.785 248.216 li
258.785 246.896 li
cp
268.001 246.896 mo
273.268 246.896 li
273.268 248.216 li
268.001 248.216 li
268.001 246.896 li
cp
277.218 246.896 mo
282.485 246.896 li
282.485 248.216 li
277.218 248.216 li
277.218 246.896 li
cp
286.435 246.896 mo
291.702 246.896 li
291.702 248.216 li
286.435 248.216 li
286.435 246.896 li
cp
295.652 246.896 mo
300.918 246.896 li
300.918 248.216 li
295.652 248.216 li
295.652 246.896 li
cp
304.868 246.896 mo
310.135 246.896 li
310.135 248.216 li
304.868 248.216 li
304.868 246.896 li
cp
314.085 246.896 mo
319.352 246.896 li
319.352 248.216 li
314.085 248.216 li
314.085 246.896 li
cp
323.302 246.896 mo
328.568 246.896 li
328.568 248.216 li
323.302 248.216 li
323.302 246.896 li
cp
332.518 246.896 mo
337.785 246.896 li
337.785 248.216 li
332.518 248.216 li
332.518 246.896 li
cp
341.735 246.896 mo
347.001 246.896 li
347.001 248.216 li
341.735 248.216 li
341.735 246.896 li
cp
350.952 246.896 mo
356.218 246.896 li
356.218 248.216 li
350.952 248.216 li
350.952 246.896 li
cp
360.168 246.896 mo
365.435 246.896 li
365.435 248.216 li
360.168 248.216 li
360.168 246.896 li
cp
369.385 246.896 mo
374.652 246.896 li
374.652 248.216 li
369.385 248.216 li
369.385 246.896 li
cp
378.602 246.896 mo
383.868 246.896 li
383.868 248.216 li
378.602 248.216 li
378.602 246.896 li
cp
387.818 246.896 mo
393.085 246.896 li
393.085 248.216 li
387.818 248.216 li
387.818 246.896 li
cp
397.035 246.896 mo
402.302 246.896 li
402.302 248.216 li
397.035 248.216 li
397.035 246.896 li
cp
406.251 246.896 mo
411.518 246.896 li
411.518 248.216 li
406.251 248.216 li
406.251 246.896 li
cp
415.468 246.896 mo
420.735 246.896 li
420.735 248.216 li
415.468 248.216 li
415.468 246.896 li
cp
424.685 246.896 mo
429.952 246.896 li
429.952 248.216 li
424.685 248.216 li
424.685 246.896 li
cp
433.902 246.896 mo
439.168 246.896 li
439.168 248.216 li
433.902 248.216 li
433.902 246.896 li
cp
443.118 246.896 mo
448.385 246.896 li
448.385 248.216 li
443.118 248.216 li
443.118 246.896 li
cp
452.335 246.896 mo
457.602 246.896 li
457.602 248.216 li
452.335 248.216 li
452.335 246.896 li
cp
461.552 246.896 mo
466.818 246.896 li
466.818 248.216 li
461.552 248.216 li
461.552 246.896 li
cp
470.768 246.896 mo
476.035 246.896 li
476.035 248.216 li
470.768 248.216 li
470.768 246.896 li
cp
479.985 246.896 mo
485.251 246.896 li
485.251 248.216 li
479.985 248.216 li
479.985 246.896 li
cp
489.202 246.896 mo
494.468 246.896 li
494.468 248.216 li
489.202 248.216 li
489.202 246.896 li
cp
498.418 246.896 mo
503.685 246.896 li
503.685 248.216 li
498.418 248.216 li
498.418 246.896 li
cp
507.635 246.896 mo
512.901 246.896 li
512.901 248.216 li
507.635 248.216 li
507.635 246.896 li
cp
516.852 246.896 mo
522.118 246.896 li
522.118 248.216 li
516.852 248.216 li
516.852 246.896 li
cp
526.068 246.896 mo
531.335 246.896 li
531.335 248.216 li
526.068 248.216 li
526.068 246.896 li
cp
535.285 246.896 mo
540.552 246.896 li
540.552 248.216 li
535.285 248.216 li
535.285 246.896 li
cp
544.502 246.896 mo
549.768 246.896 li
549.768 248.216 li
544.502 248.216 li
544.502 246.896 li
cp
553.718 246.896 mo
558.985 246.896 li
558.985 248.216 li
553.718 248.216 li
553.718 246.896 li
cp
562.935 246.896 mo
568.201 246.896 li
568.201 248.216 li
562.935 248.216 li
562.935 246.896 li
cp
572.151 246.896 mo
577.418 246.896 li
577.418 248.216 li
572.151 248.216 li
572.151 246.896 li
cp
581.368 246.896 mo
586.635 246.896 li
586.635 248.216 li
581.368 248.216 li
581.368 246.896 li
cp
590.585 246.896 mo
595.852 246.896 li
595.852 248.216 li
590.585 248.216 li
590.585 246.896 li
cp
599.802 246.896 mo
605.068 246.896 li
605.068 248.216 li
599.802 248.216 li
599.802 246.896 li
cp
609.018 246.896 mo
614.285 246.896 li
614.285 248.216 li
609.018 248.216 li
609.018 246.896 li
cp
618.235 246.896 mo
623.502 246.896 li
623.502 248.216 li
618.235 248.216 li
618.235 246.896 li
cp
627.451 246.896 mo
632.718 246.896 li
632.718 248.216 li
627.451 248.216 li
627.451 246.896 li
cp
636.668 246.896 mo
641.935 246.896 li
641.935 248.216 li
636.668 248.216 li
636.668 246.896 li
cp
645.885 246.896 mo
651.151 246.896 li
651.151 248.216 li
645.885 248.216 li
645.885 246.896 li
cp
655.102 246.896 mo
660.368 246.896 li
660.368 248.216 li
655.102 248.216 li
655.102 246.896 li
cp
664.318 246.896 mo
669.585 246.896 li
669.585 248.216 li
664.318 248.216 li
664.318 246.896 li
cp
673.535 246.896 mo
678.802 246.896 li
678.802 248.216 li
673.535 248.216 li
673.535 246.896 li
cp
682.752 246.896 mo
688.018 246.896 li
688.018 248.216 li
682.752 248.216 li
682.752 246.896 li
cp
691.968 246.896 mo
697.235 246.896 li
697.235 248.216 li
691.968 248.216 li
691.968 246.896 li
cp
701.185 246.896 mo
706.451 246.896 li
706.451 248.216 li
701.185 248.216 li
701.185 246.896 li
cp
710.401 246.896 mo
712.795 246.896 li
712.795 248.216 li
710.401 248.216 li
710.401 246.896 li
cp
148.185 223.376 mo
153.452 223.376 li
153.452 224.696 li
148.185 224.696 li
148.185 223.376 li
cp
157.402 223.376 mo
162.668 223.376 li
162.668 224.696 li
157.402 224.696 li
157.402 223.376 li
cp
166.618 223.376 mo
171.885 223.376 li
171.885 224.696 li
166.618 224.696 li
166.618 223.376 li
cp
175.835 223.376 mo
181.102 223.376 li
181.102 224.696 li
175.835 224.696 li
175.835 223.376 li
cp
185.052 223.376 mo
190.318 223.376 li
190.318 224.696 li
185.052 224.696 li
185.052 223.376 li
cp
194.268 223.376 mo
199.535 223.376 li
199.535 224.696 li
194.268 224.696 li
194.268 223.376 li
cp
203.485 223.376 mo
208.752 223.376 li
208.752 224.696 li
203.485 224.696 li
203.485 223.376 li
cp
212.702 223.376 mo
217.968 223.376 li
217.968 224.696 li
212.702 224.696 li
212.702 223.376 li
cp
221.918 223.376 mo
227.185 223.376 li
227.185 224.696 li
221.918 224.696 li
221.918 223.376 li
cp
231.135 223.376 mo
236.402 223.376 li
236.402 224.696 li
231.135 224.696 li
231.135 223.376 li
cp
240.352 223.376 mo
245.618 223.376 li
245.618 224.696 li
240.352 224.696 li
240.352 223.376 li
cp
249.568 223.376 mo
254.835 223.376 li
254.835 224.696 li
249.568 224.696 li
249.568 223.376 li
cp
258.785 223.376 mo
264.052 223.376 li
264.052 224.696 li
258.785 224.696 li
258.785 223.376 li
cp
268.001 223.376 mo
273.268 223.376 li
273.268 224.696 li
268.001 224.696 li
268.001 223.376 li
cp
277.218 223.376 mo
282.485 223.376 li
282.485 224.696 li
277.218 224.696 li
277.218 223.376 li
cp
286.435 223.376 mo
291.702 223.376 li
291.702 224.696 li
286.435 224.696 li
286.435 223.376 li
cp
295.652 223.376 mo
300.918 223.376 li
300.918 224.696 li
295.652 224.696 li
295.652 223.376 li
cp
304.868 223.376 mo
310.135 223.376 li
310.135 224.696 li
304.868 224.696 li
304.868 223.376 li
cp
314.085 223.376 mo
319.352 223.376 li
319.352 224.696 li
314.085 224.696 li
314.085 223.376 li
cp
323.302 223.376 mo
328.568 223.376 li
328.568 224.696 li
323.302 224.696 li
323.302 223.376 li
cp
332.518 223.376 mo
337.785 223.376 li
337.785 224.696 li
332.518 224.696 li
332.518 223.376 li
cp
341.735 223.376 mo
347.001 223.376 li
347.001 224.696 li
341.735 224.696 li
341.735 223.376 li
cp
350.952 223.376 mo
356.218 223.376 li
356.218 224.696 li
350.952 224.696 li
350.952 223.376 li
cp
360.168 223.376 mo
365.435 223.376 li
365.435 224.696 li
360.168 224.696 li
360.168 223.376 li
cp
369.385 223.376 mo
374.652 223.376 li
374.652 224.696 li
369.385 224.696 li
369.385 223.376 li
cp
378.602 223.376 mo
383.868 223.376 li
383.868 224.696 li
378.602 224.696 li
378.602 223.376 li
cp
387.818 223.376 mo
393.085 223.376 li
393.085 224.696 li
387.818 224.696 li
387.818 223.376 li
cp
397.035 223.376 mo
402.302 223.376 li
402.302 224.696 li
397.035 224.696 li
397.035 223.376 li
cp
406.251 223.376 mo
411.518 223.376 li
411.518 224.696 li
406.251 224.696 li
406.251 223.376 li
cp
415.468 223.376 mo
420.735 223.376 li
420.735 224.696 li
415.468 224.696 li
415.468 223.376 li
cp
424.685 223.376 mo
429.952 223.376 li
429.952 224.696 li
424.685 224.696 li
424.685 223.376 li
cp
433.902 223.376 mo
439.168 223.376 li
439.168 224.696 li
433.902 224.696 li
433.902 223.376 li
cp
443.118 223.376 mo
448.385 223.376 li
448.385 224.696 li
443.118 224.696 li
443.118 223.376 li
cp
452.335 223.376 mo
457.602 223.376 li
457.602 224.696 li
452.335 224.696 li
452.335 223.376 li
cp
461.552 223.376 mo
466.818 223.376 li
466.818 224.696 li
461.552 224.696 li
461.552 223.376 li
cp
470.768 223.376 mo
476.035 223.376 li
476.035 224.696 li
470.768 224.696 li
470.768 223.376 li
cp
479.985 223.376 mo
485.251 223.376 li
485.251 224.696 li
479.985 224.696 li
479.985 223.376 li
cp
489.202 223.376 mo
494.468 223.376 li
494.468 224.696 li
489.202 224.696 li
489.202 223.376 li
cp
498.418 223.376 mo
503.685 223.376 li
503.685 224.696 li
498.418 224.696 li
498.418 223.376 li
cp
507.635 223.376 mo
512.901 223.376 li
512.901 224.696 li
507.635 224.696 li
507.635 223.376 li
cp
516.852 223.376 mo
522.118 223.376 li
522.118 224.696 li
516.852 224.696 li
516.852 223.376 li
cp
526.068 223.376 mo
531.335 223.376 li
531.335 224.696 li
526.068 224.696 li
526.068 223.376 li
cp
535.285 223.376 mo
540.552 223.376 li
540.552 224.696 li
535.285 224.696 li
535.285 223.376 li
cp
544.502 223.376 mo
549.768 223.376 li
549.768 224.696 li
544.502 224.696 li
544.502 223.376 li
cp
553.718 223.376 mo
558.985 223.376 li
558.985 224.696 li
553.718 224.696 li
553.718 223.376 li
cp
562.935 223.376 mo
568.201 223.376 li
568.201 224.696 li
562.935 224.696 li
562.935 223.376 li
cp
572.151 223.376 mo
577.418 223.376 li
577.418 224.696 li
572.151 224.696 li
572.151 223.376 li
cp
581.368 223.376 mo
586.635 223.376 li
586.635 224.696 li
581.368 224.696 li
581.368 223.376 li
cp
590.585 223.376 mo
595.852 223.376 li
595.852 224.696 li
590.585 224.696 li
590.585 223.376 li
cp
599.802 223.376 mo
605.068 223.376 li
605.068 224.696 li
599.802 224.696 li
599.802 223.376 li
cp
609.018 223.376 mo
614.285 223.376 li
614.285 224.696 li
609.018 224.696 li
609.018 223.376 li
cp
618.235 223.376 mo
623.502 223.376 li
623.502 224.696 li
618.235 224.696 li
618.235 223.376 li
cp
627.451 223.376 mo
632.718 223.376 li
632.718 224.696 li
627.451 224.696 li
627.451 223.376 li
cp
636.668 223.376 mo
641.935 223.376 li
641.935 224.696 li
636.668 224.696 li
636.668 223.376 li
cp
645.885 223.376 mo
651.151 223.376 li
651.151 224.696 li
645.885 224.696 li
645.885 223.376 li
cp
655.102 223.376 mo
660.368 223.376 li
660.368 224.696 li
655.102 224.696 li
655.102 223.376 li
cp
664.318 223.376 mo
669.585 223.376 li
669.585 224.696 li
664.318 224.696 li
664.318 223.376 li
cp
673.535 223.376 mo
678.802 223.376 li
678.802 224.696 li
673.535 224.696 li
673.535 223.376 li
cp
682.752 223.376 mo
688.018 223.376 li
688.018 224.696 li
682.752 224.696 li
682.752 223.376 li
cp
691.968 223.376 mo
697.235 223.376 li
697.235 224.696 li
691.968 224.696 li
691.968 223.376 li
cp
701.185 223.376 mo
706.451 223.376 li
706.451 224.696 li
701.185 224.696 li
701.185 223.376 li
cp
710.401 223.376 mo
712.795 223.376 li
712.795 224.696 li
710.401 224.696 li
710.401 223.376 li
cp
148.185 199.976 mo
153.452 199.976 li
153.452 201.296 li
148.185 201.296 li
148.185 199.976 li
cp
157.402 199.976 mo
162.668 199.976 li
162.668 201.296 li
157.402 201.296 li
157.402 199.976 li
cp
166.618 199.976 mo
171.885 199.976 li
171.885 201.296 li
166.618 201.296 li
166.618 199.976 li
cp
175.835 199.976 mo
181.102 199.976 li
181.102 201.296 li
175.835 201.296 li
175.835 199.976 li
cp
185.052 199.976 mo
190.318 199.976 li
190.318 201.296 li
185.052 201.296 li
185.052 199.976 li
cp
194.268 199.976 mo
199.535 199.976 li
199.535 201.296 li
194.268 201.296 li
194.268 199.976 li
cp
203.485 199.976 mo
208.752 199.976 li
208.752 201.296 li
203.485 201.296 li
203.485 199.976 li
cp
212.702 199.976 mo
217.968 199.976 li
217.968 201.296 li
212.702 201.296 li
212.702 199.976 li
cp
221.918 199.976 mo
227.185 199.976 li
227.185 201.296 li
221.918 201.296 li
221.918 199.976 li
cp
231.135 199.976 mo
236.402 199.976 li
236.402 201.296 li
231.135 201.296 li
231.135 199.976 li
cp
240.352 199.976 mo
245.618 199.976 li
245.618 201.296 li
240.352 201.296 li
240.352 199.976 li
cp
249.568 199.976 mo
254.835 199.976 li
254.835 201.296 li
249.568 201.296 li
249.568 199.976 li
cp
258.785 199.976 mo
264.052 199.976 li
264.052 201.296 li
258.785 201.296 li
258.785 199.976 li
cp
268.001 199.976 mo
273.268 199.976 li
273.268 201.296 li
268.001 201.296 li
268.001 199.976 li
cp
277.218 199.976 mo
282.485 199.976 li
282.485 201.296 li
277.218 201.296 li
277.218 199.976 li
cp
286.435 199.976 mo
291.702 199.976 li
291.702 201.296 li
286.435 201.296 li
286.435 199.976 li
cp
295.652 199.976 mo
300.918 199.976 li
300.918 201.296 li
295.652 201.296 li
295.652 199.976 li
cp
304.868 199.976 mo
310.135 199.976 li
310.135 201.296 li
304.868 201.296 li
304.868 199.976 li
cp
314.085 199.976 mo
319.352 199.976 li
319.352 201.296 li
314.085 201.296 li
314.085 199.976 li
cp
323.302 199.976 mo
328.568 199.976 li
328.568 201.296 li
323.302 201.296 li
323.302 199.976 li
cp
332.518 199.976 mo
337.785 199.976 li
337.785 201.296 li
332.518 201.296 li
332.518 199.976 li
cp
341.735 199.976 mo
347.001 199.976 li
347.001 201.296 li
341.735 201.296 li
341.735 199.976 li
cp
350.952 199.976 mo
356.218 199.976 li
356.218 201.296 li
350.952 201.296 li
350.952 199.976 li
cp
360.168 199.976 mo
365.435 199.976 li
365.435 201.296 li
360.168 201.296 li
360.168 199.976 li
cp
369.385 199.976 mo
374.652 199.976 li
374.652 201.296 li
369.385 201.296 li
369.385 199.976 li
cp
378.602 199.976 mo
383.868 199.976 li
383.868 201.296 li
378.602 201.296 li
378.602 199.976 li
cp
387.818 199.976 mo
393.085 199.976 li
393.085 201.296 li
387.818 201.296 li
387.818 199.976 li
cp
397.035 199.976 mo
402.302 199.976 li
402.302 201.296 li
397.035 201.296 li
397.035 199.976 li
cp
406.251 199.976 mo
411.518 199.976 li
411.518 201.296 li
406.251 201.296 li
406.251 199.976 li
cp
415.468 199.976 mo
420.735 199.976 li
420.735 201.296 li
415.468 201.296 li
415.468 199.976 li
cp
424.685 199.976 mo
429.952 199.976 li
429.952 201.296 li
424.685 201.296 li
424.685 199.976 li
cp
433.902 199.976 mo
439.168 199.976 li
439.168 201.296 li
433.902 201.296 li
433.902 199.976 li
cp
443.118 199.976 mo
448.385 199.976 li
448.385 201.296 li
443.118 201.296 li
443.118 199.976 li
cp
452.335 199.976 mo
457.602 199.976 li
457.602 201.296 li
452.335 201.296 li
452.335 199.976 li
cp
461.552 199.976 mo
466.818 199.976 li
466.818 201.296 li
461.552 201.296 li
461.552 199.976 li
cp
470.768 199.976 mo
476.035 199.976 li
476.035 201.296 li
470.768 201.296 li
470.768 199.976 li
cp
479.985 199.976 mo
485.251 199.976 li
485.251 201.296 li
479.985 201.296 li
479.985 199.976 li
cp
489.202 199.976 mo
494.468 199.976 li
494.468 201.296 li
489.202 201.296 li
489.202 199.976 li
cp
498.418 199.976 mo
503.685 199.976 li
503.685 201.296 li
498.418 201.296 li
498.418 199.976 li
cp
507.635 199.976 mo
512.901 199.976 li
512.901 201.296 li
507.635 201.296 li
507.635 199.976 li
cp
516.852 199.976 mo
522.118 199.976 li
522.118 201.296 li
516.852 201.296 li
516.852 199.976 li
cp
526.068 199.976 mo
531.335 199.976 li
531.335 201.296 li
526.068 201.296 li
526.068 199.976 li
cp
535.285 199.976 mo
540.552 199.976 li
540.552 201.296 li
535.285 201.296 li
535.285 199.976 li
cp
544.502 199.976 mo
549.768 199.976 li
549.768 201.296 li
544.502 201.296 li
544.502 199.976 li
cp
553.718 199.976 mo
558.985 199.976 li
558.985 201.296 li
553.718 201.296 li
553.718 199.976 li
cp
562.935 199.976 mo
568.201 199.976 li
568.201 201.296 li
562.935 201.296 li
562.935 199.976 li
cp
572.151 199.976 mo
577.418 199.976 li
577.418 201.296 li
572.151 201.296 li
572.151 199.976 li
cp
581.368 199.976 mo
586.635 199.976 li
586.635 201.296 li
581.368 201.296 li
581.368 199.976 li
cp
590.585 199.976 mo
595.852 199.976 li
595.852 201.296 li
590.585 201.296 li
590.585 199.976 li
cp
599.802 199.976 mo
605.068 199.976 li
605.068 201.296 li
599.802 201.296 li
599.802 199.976 li
cp
609.018 199.976 mo
614.285 199.976 li
614.285 201.296 li
609.018 201.296 li
609.018 199.976 li
cp
618.235 199.976 mo
623.502 199.976 li
623.502 201.296 li
618.235 201.296 li
618.235 199.976 li
cp
627.451 199.976 mo
632.718 199.976 li
632.718 201.296 li
627.451 201.296 li
627.451 199.976 li
cp
636.668 199.976 mo
641.935 199.976 li
641.935 201.296 li
636.668 201.296 li
636.668 199.976 li
cp
645.885 199.976 mo
651.151 199.976 li
651.151 201.296 li
645.885 201.296 li
645.885 199.976 li
cp
655.102 199.976 mo
660.368 199.976 li
660.368 201.296 li
655.102 201.296 li
655.102 199.976 li
cp
664.318 199.976 mo
669.585 199.976 li
669.585 201.296 li
664.318 201.296 li
664.318 199.976 li
cp
673.535 199.976 mo
678.802 199.976 li
678.802 201.296 li
673.535 201.296 li
673.535 199.976 li
cp
682.752 199.976 mo
688.018 199.976 li
688.018 201.296 li
682.752 201.296 li
682.752 199.976 li
cp
691.968 199.976 mo
697.235 199.976 li
697.235 201.296 li
691.968 201.296 li
691.968 199.976 li
cp
701.185 199.976 mo
706.451 199.976 li
706.451 201.296 li
701.185 201.296 li
701.185 199.976 li
cp
710.401 199.976 mo
712.795 199.976 li
712.795 201.296 li
710.401 201.296 li
710.401 199.976 li
cp
148.185 176.576 mo
153.452 176.576 li
153.452 177.896 li
148.185 177.896 li
148.185 176.576 li
cp
157.402 176.576 mo
162.668 176.576 li
162.668 177.896 li
157.402 177.896 li
157.402 176.576 li
cp
166.618 176.576 mo
171.885 176.576 li
171.885 177.896 li
166.618 177.896 li
166.618 176.576 li
cp
175.835 176.576 mo
181.102 176.576 li
181.102 177.896 li
175.835 177.896 li
175.835 176.576 li
cp
185.052 176.576 mo
190.318 176.576 li
190.318 177.896 li
185.052 177.896 li
185.052 176.576 li
cp
194.268 176.576 mo
199.535 176.576 li
199.535 177.896 li
194.268 177.896 li
194.268 176.576 li
cp
203.485 176.576 mo
208.752 176.576 li
208.752 177.896 li
203.485 177.896 li
203.485 176.576 li
cp
212.702 176.576 mo
217.968 176.576 li
217.968 177.896 li
212.702 177.896 li
212.702 176.576 li
cp
221.918 176.576 mo
227.185 176.576 li
227.185 177.896 li
221.918 177.896 li
221.918 176.576 li
cp
231.135 176.576 mo
236.402 176.576 li
236.402 177.896 li
231.135 177.896 li
231.135 176.576 li
cp
240.352 176.576 mo
245.618 176.576 li
245.618 177.896 li
240.352 177.896 li
240.352 176.576 li
cp
249.568 176.576 mo
254.835 176.576 li
254.835 177.896 li
249.568 177.896 li
249.568 176.576 li
cp
258.785 176.576 mo
264.052 176.576 li
264.052 177.896 li
258.785 177.896 li
258.785 176.576 li
cp
268.001 176.576 mo
273.268 176.576 li
273.268 177.896 li
268.001 177.896 li
268.001 176.576 li
cp
277.218 176.576 mo
282.485 176.576 li
282.485 177.896 li
277.218 177.896 li
277.218 176.576 li
cp
286.435 176.576 mo
291.702 176.576 li
291.702 177.896 li
286.435 177.896 li
286.435 176.576 li
cp
295.652 176.576 mo
300.918 176.576 li
300.918 177.896 li
295.652 177.896 li
295.652 176.576 li
cp
304.868 176.576 mo
310.135 176.576 li
310.135 177.896 li
304.868 177.896 li
304.868 176.576 li
cp
314.085 176.576 mo
319.352 176.576 li
319.352 177.896 li
314.085 177.896 li
314.085 176.576 li
cp
323.302 176.576 mo
328.568 176.576 li
328.568 177.896 li
323.302 177.896 li
323.302 176.576 li
cp
332.518 176.576 mo
337.785 176.576 li
337.785 177.896 li
332.518 177.896 li
332.518 176.576 li
cp
341.735 176.576 mo
347.001 176.576 li
347.001 177.896 li
341.735 177.896 li
341.735 176.576 li
cp
350.952 176.576 mo
356.218 176.576 li
356.218 177.896 li
350.952 177.896 li
350.952 176.576 li
cp
360.168 176.576 mo
365.435 176.576 li
365.435 177.896 li
360.168 177.896 li
360.168 176.576 li
cp
369.385 176.576 mo
374.652 176.576 li
374.652 177.896 li
369.385 177.896 li
369.385 176.576 li
cp
378.602 176.576 mo
383.868 176.576 li
383.868 177.896 li
378.602 177.896 li
378.602 176.576 li
cp
387.818 176.576 mo
393.085 176.576 li
393.085 177.896 li
387.818 177.896 li
387.818 176.576 li
cp
397.035 176.576 mo
402.302 176.576 li
402.302 177.896 li
397.035 177.896 li
397.035 176.576 li
cp
406.251 176.576 mo
411.518 176.576 li
411.518 177.896 li
406.251 177.896 li
406.251 176.576 li
cp
415.468 176.576 mo
420.735 176.576 li
420.735 177.896 li
415.468 177.896 li
415.468 176.576 li
cp
424.685 176.576 mo
429.952 176.576 li
429.952 177.896 li
424.685 177.896 li
424.685 176.576 li
cp
433.902 176.576 mo
439.168 176.576 li
439.168 177.896 li
433.902 177.896 li
433.902 176.576 li
cp
443.118 176.576 mo
448.385 176.576 li
448.385 177.896 li
443.118 177.896 li
443.118 176.576 li
cp
452.335 176.576 mo
457.602 176.576 li
457.602 177.896 li
452.335 177.896 li
452.335 176.576 li
cp
461.552 176.576 mo
466.818 176.576 li
466.818 177.896 li
461.552 177.896 li
461.552 176.576 li
cp
470.768 176.576 mo
476.035 176.576 li
476.035 177.896 li
470.768 177.896 li
470.768 176.576 li
cp
479.985 176.576 mo
485.251 176.576 li
485.251 177.896 li
479.985 177.896 li
479.985 176.576 li
cp
489.202 176.576 mo
494.468 176.576 li
494.468 177.896 li
489.202 177.896 li
489.202 176.576 li
cp
498.418 176.576 mo
503.685 176.576 li
503.685 177.896 li
498.418 177.896 li
498.418 176.576 li
cp
507.635 176.576 mo
512.901 176.576 li
512.901 177.896 li
507.635 177.896 li
507.635 176.576 li
cp
516.852 176.576 mo
522.118 176.576 li
522.118 177.896 li
516.852 177.896 li
516.852 176.576 li
cp
526.068 176.576 mo
531.335 176.576 li
531.335 177.896 li
526.068 177.896 li
526.068 176.576 li
cp
535.285 176.576 mo
540.552 176.576 li
540.552 177.896 li
535.285 177.896 li
535.285 176.576 li
cp
544.502 176.576 mo
549.768 176.576 li
549.768 177.896 li
544.502 177.896 li
544.502 176.576 li
cp
553.718 176.576 mo
558.985 176.576 li
558.985 177.896 li
553.718 177.896 li
553.718 176.576 li
cp
562.935 176.576 mo
568.201 176.576 li
568.201 177.896 li
562.935 177.896 li
562.935 176.576 li
cp
572.151 176.576 mo
577.418 176.576 li
577.418 177.896 li
572.151 177.896 li
572.151 176.576 li
cp
581.368 176.576 mo
586.635 176.576 li
586.635 177.896 li
581.368 177.896 li
581.368 176.576 li
cp
590.585 176.576 mo
595.852 176.576 li
595.852 177.896 li
590.585 177.896 li
590.585 176.576 li
cp
599.802 176.576 mo
605.068 176.576 li
605.068 177.896 li
599.802 177.896 li
599.802 176.576 li
cp
609.018 176.576 mo
614.285 176.576 li
614.285 177.896 li
609.018 177.896 li
609.018 176.576 li
cp
618.235 176.576 mo
623.502 176.576 li
623.502 177.896 li
618.235 177.896 li
618.235 176.576 li
cp
627.451 176.576 mo
632.718 176.576 li
632.718 177.896 li
627.451 177.896 li
627.451 176.576 li
cp
636.668 176.576 mo
641.935 176.576 li
641.935 177.896 li
636.668 177.896 li
636.668 176.576 li
cp
645.885 176.576 mo
651.151 176.576 li
651.151 177.896 li
645.885 177.896 li
645.885 176.576 li
cp
655.102 176.576 mo
660.368 176.576 li
660.368 177.896 li
655.102 177.896 li
655.102 176.576 li
cp
664.318 176.576 mo
669.585 176.576 li
669.585 177.896 li
664.318 177.896 li
664.318 176.576 li
cp
673.535 176.576 mo
678.802 176.576 li
678.802 177.896 li
673.535 177.896 li
673.535 176.576 li
cp
682.752 176.576 mo
688.018 176.576 li
688.018 177.896 li
682.752 177.896 li
682.752 176.576 li
cp
691.968 176.576 mo
697.235 176.576 li
697.235 177.896 li
691.968 177.896 li
691.968 176.576 li
cp
701.185 176.576 mo
706.451 176.576 li
706.451 177.896 li
701.185 177.896 li
701.185 176.576 li
cp
710.401 176.576 mo
712.795 176.576 li
712.795 177.896 li
710.401 177.896 li
710.401 176.576 li
cp
148.185 153.176 mo
153.452 153.176 li
153.452 154.496 li
148.185 154.496 li
148.185 153.176 li
cp
157.402 153.176 mo
162.668 153.176 li
162.668 154.496 li
157.402 154.496 li
157.402 153.176 li
cp
166.618 153.176 mo
171.885 153.176 li
171.885 154.496 li
166.618 154.496 li
166.618 153.176 li
cp
175.835 153.176 mo
181.102 153.176 li
181.102 154.496 li
175.835 154.496 li
175.835 153.176 li
cp
185.052 153.176 mo
190.318 153.176 li
190.318 154.496 li
185.052 154.496 li
185.052 153.176 li
cp
194.268 153.176 mo
199.535 153.176 li
199.535 154.496 li
194.268 154.496 li
194.268 153.176 li
cp
203.485 153.176 mo
208.752 153.176 li
208.752 154.496 li
203.485 154.496 li
203.485 153.176 li
cp
212.702 153.176 mo
217.968 153.176 li
217.968 154.496 li
212.702 154.496 li
212.702 153.176 li
cp
221.918 153.176 mo
227.185 153.176 li
227.185 154.496 li
221.918 154.496 li
221.918 153.176 li
cp
231.135 153.176 mo
236.402 153.176 li
236.402 154.496 li
231.135 154.496 li
231.135 153.176 li
cp
240.352 153.176 mo
245.618 153.176 li
245.618 154.496 li
240.352 154.496 li
240.352 153.176 li
cp
249.568 153.176 mo
254.835 153.176 li
254.835 154.496 li
249.568 154.496 li
249.568 153.176 li
cp
258.785 153.176 mo
264.052 153.176 li
264.052 154.496 li
258.785 154.496 li
258.785 153.176 li
cp
268.001 153.176 mo
273.268 153.176 li
273.268 154.496 li
268.001 154.496 li
268.001 153.176 li
cp
277.218 153.176 mo
282.485 153.176 li
282.485 154.496 li
277.218 154.496 li
277.218 153.176 li
cp
286.435 153.176 mo
291.702 153.176 li
291.702 154.496 li
286.435 154.496 li
286.435 153.176 li
cp
295.652 153.176 mo
300.918 153.176 li
300.918 154.496 li
295.652 154.496 li
295.652 153.176 li
cp
304.868 153.176 mo
310.135 153.176 li
310.135 154.496 li
304.868 154.496 li
304.868 153.176 li
cp
314.085 153.176 mo
319.352 153.176 li
319.352 154.496 li
314.085 154.496 li
314.085 153.176 li
cp
323.302 153.176 mo
328.568 153.176 li
328.568 154.496 li
323.302 154.496 li
323.302 153.176 li
cp
332.518 153.176 mo
337.785 153.176 li
337.785 154.496 li
332.518 154.496 li
332.518 153.176 li
cp
341.735 153.176 mo
347.001 153.176 li
347.001 154.496 li
341.735 154.496 li
341.735 153.176 li
cp
350.952 153.176 mo
356.218 153.176 li
356.218 154.496 li
350.952 154.496 li
350.952 153.176 li
cp
360.168 153.176 mo
365.435 153.176 li
365.435 154.496 li
360.168 154.496 li
360.168 153.176 li
cp
369.385 153.176 mo
374.652 153.176 li
374.652 154.496 li
369.385 154.496 li
369.385 153.176 li
cp
378.602 153.176 mo
383.868 153.176 li
383.868 154.496 li
378.602 154.496 li
378.602 153.176 li
cp
387.818 153.176 mo
393.085 153.176 li
393.085 154.496 li
387.818 154.496 li
387.818 153.176 li
cp
397.035 153.176 mo
402.302 153.176 li
402.302 154.496 li
397.035 154.496 li
397.035 153.176 li
cp
406.251 153.176 mo
411.518 153.176 li
411.518 154.496 li
406.251 154.496 li
406.251 153.176 li
cp
415.468 153.176 mo
420.735 153.176 li
420.735 154.496 li
415.468 154.496 li
415.468 153.176 li
cp
424.685 153.176 mo
429.952 153.176 li
429.952 154.496 li
424.685 154.496 li
424.685 153.176 li
cp
433.902 153.176 mo
439.168 153.176 li
439.168 154.496 li
433.902 154.496 li
433.902 153.176 li
cp
443.118 153.176 mo
448.385 153.176 li
448.385 154.496 li
443.118 154.496 li
443.118 153.176 li
cp
452.335 153.176 mo
457.602 153.176 li
457.602 154.496 li
452.335 154.496 li
452.335 153.176 li
cp
461.552 153.176 mo
466.818 153.176 li
466.818 154.496 li
461.552 154.496 li
461.552 153.176 li
cp
470.768 153.176 mo
476.035 153.176 li
476.035 154.496 li
470.768 154.496 li
470.768 153.176 li
cp
479.985 153.176 mo
485.251 153.176 li
485.251 154.496 li
479.985 154.496 li
479.985 153.176 li
cp
489.202 153.176 mo
494.468 153.176 li
494.468 154.496 li
489.202 154.496 li
489.202 153.176 li
cp
498.418 153.176 mo
503.685 153.176 li
503.685 154.496 li
498.418 154.496 li
498.418 153.176 li
cp
507.635 153.176 mo
512.901 153.176 li
512.901 154.496 li
507.635 154.496 li
507.635 153.176 li
cp
516.852 153.176 mo
522.118 153.176 li
522.118 154.496 li
516.852 154.496 li
516.852 153.176 li
cp
526.068 153.176 mo
531.335 153.176 li
531.335 154.496 li
526.068 154.496 li
526.068 153.176 li
cp
535.285 153.176 mo
540.552 153.176 li
540.552 154.496 li
535.285 154.496 li
535.285 153.176 li
cp
544.502 153.176 mo
549.768 153.176 li
549.768 154.496 li
544.502 154.496 li
544.502 153.176 li
cp
553.718 153.176 mo
558.985 153.176 li
558.985 154.496 li
553.718 154.496 li
553.718 153.176 li
cp
562.935 153.176 mo
568.201 153.176 li
568.201 154.496 li
562.935 154.496 li
562.935 153.176 li
cp
572.151 153.176 mo
577.418 153.176 li
577.418 154.496 li
572.151 154.496 li
572.151 153.176 li
cp
581.368 153.176 mo
586.635 153.176 li
586.635 154.496 li
581.368 154.496 li
581.368 153.176 li
cp
590.585 153.176 mo
595.852 153.176 li
595.852 154.496 li
590.585 154.496 li
590.585 153.176 li
cp
599.802 153.176 mo
605.068 153.176 li
605.068 154.496 li
599.802 154.496 li
599.802 153.176 li
cp
609.018 153.176 mo
614.285 153.176 li
614.285 154.496 li
609.018 154.496 li
609.018 153.176 li
cp
618.235 153.176 mo
623.502 153.176 li
623.502 154.496 li
618.235 154.496 li
618.235 153.176 li
cp
627.451 153.176 mo
632.718 153.176 li
632.718 154.496 li
627.451 154.496 li
627.451 153.176 li
cp
636.668 153.176 mo
641.935 153.176 li
641.935 154.496 li
636.668 154.496 li
636.668 153.176 li
cp
645.885 153.176 mo
651.151 153.176 li
651.151 154.496 li
645.885 154.496 li
645.885 153.176 li
cp
655.102 153.176 mo
660.368 153.176 li
660.368 154.496 li
655.102 154.496 li
655.102 153.176 li
cp
664.318 153.176 mo
669.585 153.176 li
669.585 154.496 li
664.318 154.496 li
664.318 153.176 li
cp
673.535 153.176 mo
678.802 153.176 li
678.802 154.496 li
673.535 154.496 li
673.535 153.176 li
cp
682.752 153.176 mo
688.018 153.176 li
688.018 154.496 li
682.752 154.496 li
682.752 153.176 li
cp
691.968 153.176 mo
697.235 153.176 li
697.235 154.496 li
691.968 154.496 li
691.968 153.176 li
cp
701.185 153.176 mo
706.451 153.176 li
706.451 154.496 li
701.185 154.496 li
701.185 153.176 li
cp
710.401 153.176 mo
712.795 153.176 li
712.795 154.496 li
710.401 154.496 li
710.401 153.176 li
cp
148.185 129.656 mo
153.452 129.656 li
153.452 130.976 li
148.185 130.976 li
148.185 129.656 li
cp
157.402 129.656 mo
162.668 129.656 li
162.668 130.976 li
157.402 130.976 li
157.402 129.656 li
cp
166.618 129.656 mo
171.885 129.656 li
171.885 130.976 li
166.618 130.976 li
166.618 129.656 li
cp
175.835 129.656 mo
181.102 129.656 li
181.102 130.976 li
175.835 130.976 li
175.835 129.656 li
cp
185.052 129.656 mo
190.318 129.656 li
190.318 130.976 li
185.052 130.976 li
185.052 129.656 li
cp
194.268 129.656 mo
199.535 129.656 li
199.535 130.976 li
194.268 130.976 li
194.268 129.656 li
cp
203.485 129.656 mo
208.752 129.656 li
208.752 130.976 li
203.485 130.976 li
203.485 129.656 li
cp
212.702 129.656 mo
217.968 129.656 li
217.968 130.976 li
212.702 130.976 li
212.702 129.656 li
cp
221.918 129.656 mo
227.185 129.656 li
227.185 130.976 li
221.918 130.976 li
221.918 129.656 li
cp
231.135 129.656 mo
236.402 129.656 li
236.402 130.976 li
231.135 130.976 li
231.135 129.656 li
cp
240.352 129.656 mo
245.618 129.656 li
245.618 130.976 li
240.352 130.976 li
240.352 129.656 li
cp
249.568 129.656 mo
254.835 129.656 li
254.835 130.976 li
249.568 130.976 li
249.568 129.656 li
cp
258.785 129.656 mo
264.052 129.656 li
264.052 130.976 li
258.785 130.976 li
258.785 129.656 li
cp
268.001 129.656 mo
273.268 129.656 li
273.268 130.976 li
268.001 130.976 li
268.001 129.656 li
cp
277.218 129.656 mo
282.485 129.656 li
282.485 130.976 li
277.218 130.976 li
277.218 129.656 li
cp
286.435 129.656 mo
291.702 129.656 li
291.702 130.976 li
286.435 130.976 li
286.435 129.656 li
cp
295.652 129.656 mo
300.918 129.656 li
300.918 130.976 li
295.652 130.976 li
295.652 129.656 li
cp
304.868 129.656 mo
310.135 129.656 li
310.135 130.976 li
304.868 130.976 li
304.868 129.656 li
cp
314.085 129.656 mo
319.352 129.656 li
319.352 130.976 li
314.085 130.976 li
314.085 129.656 li
cp
323.302 129.656 mo
328.568 129.656 li
328.568 130.976 li
323.302 130.976 li
323.302 129.656 li
cp
332.518 129.656 mo
337.785 129.656 li
337.785 130.976 li
332.518 130.976 li
332.518 129.656 li
cp
341.735 129.656 mo
347.001 129.656 li
347.001 130.976 li
341.735 130.976 li
341.735 129.656 li
cp
350.952 129.656 mo
356.218 129.656 li
356.218 130.976 li
350.952 130.976 li
350.952 129.656 li
cp
360.168 129.656 mo
365.435 129.656 li
365.435 130.976 li
360.168 130.976 li
360.168 129.656 li
cp
369.385 129.656 mo
374.652 129.656 li
374.652 130.976 li
369.385 130.976 li
369.385 129.656 li
cp
378.602 129.656 mo
383.868 129.656 li
383.868 130.976 li
378.602 130.976 li
378.602 129.656 li
cp
387.818 129.656 mo
393.085 129.656 li
393.085 130.976 li
387.818 130.976 li
387.818 129.656 li
cp
397.035 129.656 mo
402.302 129.656 li
402.302 130.976 li
397.035 130.976 li
397.035 129.656 li
cp
406.251 129.656 mo
411.518 129.656 li
411.518 130.976 li
406.251 130.976 li
406.251 129.656 li
cp
415.468 129.656 mo
420.735 129.656 li
420.735 130.976 li
415.468 130.976 li
415.468 129.656 li
cp
424.685 129.656 mo
429.952 129.656 li
429.952 130.976 li
424.685 130.976 li
424.685 129.656 li
cp
433.902 129.656 mo
439.168 129.656 li
439.168 130.976 li
433.902 130.976 li
433.902 129.656 li
cp
443.118 129.656 mo
448.385 129.656 li
448.385 130.976 li
443.118 130.976 li
443.118 129.656 li
cp
452.335 129.656 mo
457.602 129.656 li
457.602 130.976 li
452.335 130.976 li
452.335 129.656 li
cp
461.552 129.656 mo
466.818 129.656 li
466.818 130.976 li
461.552 130.976 li
461.552 129.656 li
cp
470.768 129.656 mo
476.035 129.656 li
476.035 130.976 li
470.768 130.976 li
470.768 129.656 li
cp
479.985 129.656 mo
485.251 129.656 li
485.251 130.976 li
479.985 130.976 li
479.985 129.656 li
cp
489.202 129.656 mo
494.468 129.656 li
494.468 130.976 li
489.202 130.976 li
489.202 129.656 li
cp
498.418 129.656 mo
503.685 129.656 li
503.685 130.976 li
498.418 130.976 li
498.418 129.656 li
cp
507.635 129.656 mo
512.901 129.656 li
512.901 130.976 li
507.635 130.976 li
507.635 129.656 li
cp
516.852 129.656 mo
522.118 129.656 li
522.118 130.976 li
516.852 130.976 li
516.852 129.656 li
cp
526.068 129.656 mo
531.335 129.656 li
531.335 130.976 li
526.068 130.976 li
526.068 129.656 li
cp
535.285 129.656 mo
540.552 129.656 li
540.552 130.976 li
535.285 130.976 li
535.285 129.656 li
cp
544.502 129.656 mo
549.768 129.656 li
549.768 130.976 li
544.502 130.976 li
544.502 129.656 li
cp
553.718 129.656 mo
558.985 129.656 li
558.985 130.976 li
553.718 130.976 li
553.718 129.656 li
cp
562.935 129.656 mo
568.201 129.656 li
568.201 130.976 li
562.935 130.976 li
562.935 129.656 li
cp
572.151 129.656 mo
577.418 129.656 li
577.418 130.976 li
572.151 130.976 li
572.151 129.656 li
cp
581.368 129.656 mo
586.635 129.656 li
586.635 130.976 li
581.368 130.976 li
581.368 129.656 li
cp
590.585 129.656 mo
595.852 129.656 li
595.852 130.976 li
590.585 130.976 li
590.585 129.656 li
cp
599.802 129.656 mo
605.068 129.656 li
605.068 130.976 li
599.802 130.976 li
599.802 129.656 li
cp
609.018 129.656 mo
614.285 129.656 li
614.285 130.976 li
609.018 130.976 li
609.018 129.656 li
cp
618.235 129.656 mo
623.502 129.656 li
623.502 130.976 li
618.235 130.976 li
618.235 129.656 li
cp
627.451 129.656 mo
632.718 129.656 li
632.718 130.976 li
627.451 130.976 li
627.451 129.656 li
cp
636.668 129.656 mo
641.935 129.656 li
641.935 130.976 li
636.668 130.976 li
636.668 129.656 li
cp
645.885 129.656 mo
651.151 129.656 li
651.151 130.976 li
645.885 130.976 li
645.885 129.656 li
cp
655.102 129.656 mo
660.368 129.656 li
660.368 130.976 li
655.102 130.976 li
655.102 129.656 li
cp
664.318 129.656 mo
669.585 129.656 li
669.585 130.976 li
664.318 130.976 li
664.318 129.656 li
cp
673.535 129.656 mo
678.802 129.656 li
678.802 130.976 li
673.535 130.976 li
673.535 129.656 li
cp
682.752 129.656 mo
688.018 129.656 li
688.018 130.976 li
682.752 130.976 li
682.752 129.656 li
cp
691.968 129.656 mo
697.235 129.656 li
697.235 130.976 li
691.968 130.976 li
691.968 129.656 li
cp
701.185 129.656 mo
706.451 129.656 li
706.451 130.976 li
701.185 130.976 li
701.185 129.656 li
cp
710.401 129.656 mo
712.795 129.656 li
712.795 130.976 li
710.401 130.976 li
710.401 129.656 li
cp
148.185 106.256 mo
153.452 106.256 li
153.452 107.576 li
148.185 107.576 li
148.185 106.256 li
cp
157.402 106.256 mo
162.668 106.256 li
162.668 107.576 li
157.402 107.576 li
157.402 106.256 li
cp
166.618 106.256 mo
171.885 106.256 li
171.885 107.576 li
166.618 107.576 li
166.618 106.256 li
cp
175.835 106.256 mo
181.102 106.256 li
181.102 107.576 li
175.835 107.576 li
175.835 106.256 li
cp
185.052 106.256 mo
190.318 106.256 li
190.318 107.576 li
185.052 107.576 li
185.052 106.256 li
cp
194.268 106.256 mo
199.535 106.256 li
199.535 107.576 li
194.268 107.576 li
194.268 106.256 li
cp
203.485 106.256 mo
208.752 106.256 li
208.752 107.576 li
203.485 107.576 li
203.485 106.256 li
cp
212.702 106.256 mo
217.968 106.256 li
217.968 107.576 li
212.702 107.576 li
212.702 106.256 li
cp
221.918 106.256 mo
227.185 106.256 li
227.185 107.576 li
221.918 107.576 li
221.918 106.256 li
cp
231.135 106.256 mo
236.402 106.256 li
236.402 107.576 li
231.135 107.576 li
231.135 106.256 li
cp
240.352 106.256 mo
245.618 106.256 li
245.618 107.576 li
240.352 107.576 li
240.352 106.256 li
cp
249.568 106.256 mo
254.835 106.256 li
254.835 107.576 li
249.568 107.576 li
249.568 106.256 li
cp
258.785 106.256 mo
264.052 106.256 li
264.052 107.576 li
258.785 107.576 li
258.785 106.256 li
cp
268.001 106.256 mo
273.268 106.256 li
273.268 107.576 li
268.001 107.576 li
268.001 106.256 li
cp
277.218 106.256 mo
282.485 106.256 li
282.485 107.576 li
277.218 107.576 li
277.218 106.256 li
cp
286.435 106.256 mo
291.702 106.256 li
291.702 107.576 li
286.435 107.576 li
286.435 106.256 li
cp
295.652 106.256 mo
300.918 106.256 li
300.918 107.576 li
295.652 107.576 li
295.652 106.256 li
cp
304.868 106.256 mo
310.135 106.256 li
310.135 107.576 li
304.868 107.576 li
304.868 106.256 li
cp
314.085 106.256 mo
319.352 106.256 li
319.352 107.576 li
314.085 107.576 li
314.085 106.256 li
cp
323.302 106.256 mo
328.568 106.256 li
328.568 107.576 li
323.302 107.576 li
323.302 106.256 li
cp
332.518 106.256 mo
337.785 106.256 li
337.785 107.576 li
332.518 107.576 li
332.518 106.256 li
cp
341.735 106.256 mo
347.001 106.256 li
347.001 107.576 li
341.735 107.576 li
341.735 106.256 li
cp
350.952 106.256 mo
356.218 106.256 li
356.218 107.576 li
350.952 107.576 li
350.952 106.256 li
cp
360.168 106.256 mo
365.435 106.256 li
365.435 107.576 li
360.168 107.576 li
360.168 106.256 li
cp
369.385 106.256 mo
374.652 106.256 li
374.652 107.576 li
369.385 107.576 li
369.385 106.256 li
cp
378.602 106.256 mo
383.868 106.256 li
383.868 107.576 li
378.602 107.576 li
378.602 106.256 li
cp
387.818 106.256 mo
393.085 106.256 li
393.085 107.576 li
387.818 107.576 li
387.818 106.256 li
cp
397.035 106.256 mo
402.302 106.256 li
402.302 107.576 li
397.035 107.576 li
397.035 106.256 li
cp
406.251 106.256 mo
411.518 106.256 li
411.518 107.576 li
406.251 107.576 li
406.251 106.256 li
cp
415.468 106.256 mo
420.735 106.256 li
420.735 107.576 li
415.468 107.576 li
415.468 106.256 li
cp
424.685 106.256 mo
429.952 106.256 li
429.952 107.576 li
424.685 107.576 li
424.685 106.256 li
cp
433.902 106.256 mo
439.168 106.256 li
439.168 107.576 li
433.902 107.576 li
433.902 106.256 li
cp
443.118 106.256 mo
448.385 106.256 li
448.385 107.576 li
443.118 107.576 li
443.118 106.256 li
cp
452.335 106.256 mo
457.602 106.256 li
457.602 107.576 li
452.335 107.576 li
452.335 106.256 li
cp
461.552 106.256 mo
466.818 106.256 li
466.818 107.576 li
461.552 107.576 li
461.552 106.256 li
cp
470.768 106.256 mo
476.035 106.256 li
476.035 107.576 li
470.768 107.576 li
470.768 106.256 li
cp
479.985 106.256 mo
485.251 106.256 li
485.251 107.576 li
479.985 107.576 li
479.985 106.256 li
cp
489.202 106.256 mo
494.468 106.256 li
494.468 107.576 li
489.202 107.576 li
489.202 106.256 li
cp
498.418 106.256 mo
503.685 106.256 li
503.685 107.576 li
498.418 107.576 li
498.418 106.256 li
cp
507.635 106.256 mo
512.901 106.256 li
512.901 107.576 li
507.635 107.576 li
507.635 106.256 li
cp
516.852 106.256 mo
522.118 106.256 li
522.118 107.576 li
516.852 107.576 li
516.852 106.256 li
cp
526.068 106.256 mo
531.335 106.256 li
531.335 107.576 li
526.068 107.576 li
526.068 106.256 li
cp
535.285 106.256 mo
540.552 106.256 li
540.552 107.576 li
535.285 107.576 li
535.285 106.256 li
cp
544.502 106.256 mo
549.768 106.256 li
549.768 107.576 li
544.502 107.576 li
544.502 106.256 li
cp
553.718 106.256 mo
558.985 106.256 li
558.985 107.576 li
553.718 107.576 li
553.718 106.256 li
cp
562.935 106.256 mo
568.201 106.256 li
568.201 107.576 li
562.935 107.576 li
562.935 106.256 li
cp
572.151 106.256 mo
577.418 106.256 li
577.418 107.576 li
572.151 107.576 li
572.151 106.256 li
cp
581.368 106.256 mo
586.635 106.256 li
586.635 107.576 li
581.368 107.576 li
581.368 106.256 li
cp
590.585 106.256 mo
595.852 106.256 li
595.852 107.576 li
590.585 107.576 li
590.585 106.256 li
cp
599.802 106.256 mo
605.068 106.256 li
605.068 107.576 li
599.802 107.576 li
599.802 106.256 li
cp
609.018 106.256 mo
614.285 106.256 li
614.285 107.576 li
609.018 107.576 li
609.018 106.256 li
cp
618.235 106.256 mo
623.502 106.256 li
623.502 107.576 li
618.235 107.576 li
618.235 106.256 li
cp
627.451 106.256 mo
632.718 106.256 li
632.718 107.576 li
627.451 107.576 li
627.451 106.256 li
cp
636.668 106.256 mo
641.935 106.256 li
641.935 107.576 li
636.668 107.576 li
636.668 106.256 li
cp
645.885 106.256 mo
651.151 106.256 li
651.151 107.576 li
645.885 107.576 li
645.885 106.256 li
cp
655.102 106.256 mo
660.368 106.256 li
660.368 107.576 li
655.102 107.576 li
655.102 106.256 li
cp
664.318 106.256 mo
669.585 106.256 li
669.585 107.576 li
664.318 107.576 li
664.318 106.256 li
cp
673.535 106.256 mo
678.802 106.256 li
678.802 107.576 li
673.535 107.576 li
673.535 106.256 li
cp
682.752 106.256 mo
688.018 106.256 li
688.018 107.576 li
682.752 107.576 li
682.752 106.256 li
cp
691.968 106.256 mo
697.235 106.256 li
697.235 107.576 li
691.968 107.576 li
691.968 106.256 li
cp
701.185 106.256 mo
706.451 106.256 li
706.451 107.576 li
701.185 107.576 li
701.185 106.256 li
cp
710.401 106.256 mo
712.795 106.256 li
712.795 107.576 li
710.401 107.576 li
710.401 106.256 li
cp
148.185 82.8555 mo
153.452 82.8555 li
153.452 84.1755 li
148.185 84.1755 li
148.185 82.8555 li
cp
157.402 82.8555 mo
162.668 82.8555 li
162.668 84.1755 li
157.402 84.1755 li
157.402 82.8555 li
cp
166.618 82.8555 mo
171.885 82.8555 li
171.885 84.1755 li
166.618 84.1755 li
166.618 82.8555 li
cp
175.835 82.8555 mo
181.102 82.8555 li
181.102 84.1755 li
175.835 84.1755 li
175.835 82.8555 li
cp
185.052 82.8555 mo
190.318 82.8555 li
190.318 84.1755 li
185.052 84.1755 li
185.052 82.8555 li
cp
194.268 82.8555 mo
199.535 82.8555 li
199.535 84.1755 li
194.268 84.1755 li
194.268 82.8555 li
cp
203.485 82.8555 mo
208.752 82.8555 li
208.752 84.1755 li
203.485 84.1755 li
203.485 82.8555 li
cp
212.702 82.8555 mo
217.968 82.8555 li
217.968 84.1755 li
212.702 84.1755 li
212.702 82.8555 li
cp
221.918 82.8555 mo
227.185 82.8555 li
227.185 84.1755 li
221.918 84.1755 li
221.918 82.8555 li
cp
231.135 82.8555 mo
236.402 82.8555 li
236.402 84.1755 li
231.135 84.1755 li
231.135 82.8555 li
cp
240.352 82.8555 mo
245.618 82.8555 li
245.618 84.1755 li
240.352 84.1755 li
240.352 82.8555 li
cp
249.568 82.8555 mo
254.835 82.8555 li
254.835 84.1755 li
249.568 84.1755 li
249.568 82.8555 li
cp
258.785 82.8555 mo
264.052 82.8555 li
264.052 84.1755 li
258.785 84.1755 li
258.785 82.8555 li
cp
268.001 82.8555 mo
273.268 82.8555 li
273.268 84.1755 li
268.001 84.1755 li
268.001 82.8555 li
cp
277.218 82.8555 mo
282.485 82.8555 li
282.485 84.1755 li
277.218 84.1755 li
277.218 82.8555 li
cp
286.435 82.8555 mo
291.702 82.8555 li
291.702 84.1755 li
286.435 84.1755 li
286.435 82.8555 li
cp
295.652 82.8555 mo
300.918 82.8555 li
300.918 84.1755 li
295.652 84.1755 li
295.652 82.8555 li
cp
304.868 82.8555 mo
310.135 82.8555 li
310.135 84.1755 li
304.868 84.1755 li
304.868 82.8555 li
cp
314.085 82.8555 mo
319.352 82.8555 li
319.352 84.1755 li
314.085 84.1755 li
314.085 82.8555 li
cp
323.302 82.8555 mo
328.568 82.8555 li
328.568 84.1755 li
323.302 84.1755 li
323.302 82.8555 li
cp
332.518 82.8555 mo
337.785 82.8555 li
337.785 84.1755 li
332.518 84.1755 li
332.518 82.8555 li
cp
341.735 82.8555 mo
347.001 82.8555 li
347.001 84.1755 li
341.735 84.1755 li
341.735 82.8555 li
cp
350.952 82.8555 mo
356.218 82.8555 li
356.218 84.1755 li
350.952 84.1755 li
350.952 82.8555 li
cp
360.168 82.8555 mo
365.435 82.8555 li
365.435 84.1755 li
360.168 84.1755 li
360.168 82.8555 li
cp
369.385 82.8555 mo
374.652 82.8555 li
374.652 84.1755 li
369.385 84.1755 li
369.385 82.8555 li
cp
378.602 82.8555 mo
383.868 82.8555 li
383.868 84.1755 li
378.602 84.1755 li
378.602 82.8555 li
cp
387.818 82.8555 mo
393.085 82.8555 li
393.085 84.1755 li
387.818 84.1755 li
387.818 82.8555 li
cp
397.035 82.8555 mo
402.302 82.8555 li
402.302 84.1755 li
397.035 84.1755 li
397.035 82.8555 li
cp
406.251 82.8555 mo
411.518 82.8555 li
411.518 84.1755 li
406.251 84.1755 li
406.251 82.8555 li
cp
415.468 82.8555 mo
420.735 82.8555 li
420.735 84.1755 li
415.468 84.1755 li
415.468 82.8555 li
cp
424.685 82.8555 mo
429.952 82.8555 li
429.952 84.1755 li
424.685 84.1755 li
424.685 82.8555 li
cp
433.902 82.8555 mo
439.168 82.8555 li
439.168 84.1755 li
433.902 84.1755 li
433.902 82.8555 li
cp
443.118 82.8555 mo
448.385 82.8555 li
448.385 84.1755 li
443.118 84.1755 li
443.118 82.8555 li
cp
452.335 82.8555 mo
457.602 82.8555 li
457.602 84.1755 li
452.335 84.1755 li
452.335 82.8555 li
cp
461.552 82.8555 mo
466.818 82.8555 li
466.818 84.1755 li
461.552 84.1755 li
461.552 82.8555 li
cp
470.768 82.8555 mo
476.035 82.8555 li
476.035 84.1755 li
470.768 84.1755 li
470.768 82.8555 li
cp
479.985 82.8555 mo
485.251 82.8555 li
485.251 84.1755 li
479.985 84.1755 li
479.985 82.8555 li
cp
489.202 82.8555 mo
494.468 82.8555 li
494.468 84.1755 li
489.202 84.1755 li
489.202 82.8555 li
cp
498.418 82.8555 mo
503.685 82.8555 li
503.685 84.1755 li
498.418 84.1755 li
498.418 82.8555 li
cp
507.635 82.8555 mo
512.901 82.8555 li
512.901 84.1755 li
507.635 84.1755 li
507.635 82.8555 li
cp
516.852 82.8555 mo
522.118 82.8555 li
522.118 84.1755 li
516.852 84.1755 li
516.852 82.8555 li
cp
526.068 82.8555 mo
531.335 82.8555 li
531.335 84.1755 li
526.068 84.1755 li
526.068 82.8555 li
cp
535.285 82.8555 mo
540.552 82.8555 li
540.552 84.1755 li
535.285 84.1755 li
535.285 82.8555 li
cp
544.502 82.8555 mo
549.768 82.8555 li
549.768 84.1755 li
544.502 84.1755 li
544.502 82.8555 li
cp
553.718 82.8555 mo
558.985 82.8555 li
558.985 84.1755 li
553.718 84.1755 li
553.718 82.8555 li
cp
562.935 82.8555 mo
568.201 82.8555 li
568.201 84.1755 li
562.935 84.1755 li
562.935 82.8555 li
cp
572.151 82.8555 mo
577.418 82.8555 li
577.418 84.1755 li
572.151 84.1755 li
572.151 82.8555 li
cp
581.368 82.8555 mo
586.635 82.8555 li
586.635 84.1755 li
581.368 84.1755 li
581.368 82.8555 li
cp
590.585 82.8555 mo
595.852 82.8555 li
595.852 84.1755 li
590.585 84.1755 li
590.585 82.8555 li
cp
599.802 82.8555 mo
605.068 82.8555 li
605.068 84.1755 li
599.802 84.1755 li
599.802 82.8555 li
cp
609.018 82.8555 mo
614.285 82.8555 li
614.285 84.1755 li
609.018 84.1755 li
609.018 82.8555 li
cp
618.235 82.8555 mo
623.502 82.8555 li
623.502 84.1755 li
618.235 84.1755 li
618.235 82.8555 li
cp
627.451 82.8555 mo
632.718 82.8555 li
632.718 84.1755 li
627.451 84.1755 li
627.451 82.8555 li
cp
636.668 82.8555 mo
641.935 82.8555 li
641.935 84.1755 li
636.668 84.1755 li
636.668 82.8555 li
cp
645.885 82.8555 mo
651.151 82.8555 li
651.151 84.1755 li
645.885 84.1755 li
645.885 82.8555 li
cp
655.102 82.8555 mo
660.368 82.8555 li
660.368 84.1755 li
655.102 84.1755 li
655.102 82.8555 li
cp
664.318 82.8555 mo
669.585 82.8555 li
669.585 84.1755 li
664.318 84.1755 li
664.318 82.8555 li
cp
673.535 82.8555 mo
678.802 82.8555 li
678.802 84.1755 li
673.535 84.1755 li
673.535 82.8555 li
cp
682.752 82.8555 mo
688.018 82.8555 li
688.018 84.1755 li
682.752 84.1755 li
682.752 82.8555 li
cp
691.968 82.8555 mo
697.235 82.8555 li
697.235 84.1755 li
691.968 84.1755 li
691.968 82.8555 li
cp
701.185 82.8555 mo
706.451 82.8555 li
706.451 84.1755 li
701.185 84.1755 li
701.185 82.8555 li
cp
710.401 82.8555 mo
712.795 82.8555 li
712.795 84.1755 li
710.401 84.1755 li
710.401 82.8555 li
cp
148.185 59.3355 mo
153.452 59.3355 li
153.452 60.6555 li
148.185 60.6555 li
148.185 59.3355 li
cp
157.402 59.3355 mo
162.668 59.3355 li
162.668 60.6555 li
157.402 60.6555 li
157.402 59.3355 li
cp
166.618 59.3355 mo
171.885 59.3355 li
171.885 60.6555 li
166.618 60.6555 li
166.618 59.3355 li
cp
175.835 59.3355 mo
181.102 59.3355 li
181.102 60.6555 li
175.835 60.6555 li
175.835 59.3355 li
cp
185.052 59.3355 mo
190.318 59.3355 li
190.318 60.6555 li
185.052 60.6555 li
185.052 59.3355 li
cp
194.268 59.3355 mo
199.535 59.3355 li
199.535 60.6555 li
194.268 60.6555 li
194.268 59.3355 li
cp
203.485 59.3355 mo
208.752 59.3355 li
208.752 60.6555 li
203.485 60.6555 li
203.485 59.3355 li
cp
212.702 59.3355 mo
217.968 59.3355 li
217.968 60.6555 li
212.702 60.6555 li
212.702 59.3355 li
cp
221.918 59.3355 mo
227.185 59.3355 li
227.185 60.6555 li
221.918 60.6555 li
221.918 59.3355 li
cp
231.135 59.3355 mo
236.402 59.3355 li
236.402 60.6555 li
231.135 60.6555 li
231.135 59.3355 li
cp
240.352 59.3355 mo
245.618 59.3355 li
245.618 60.6555 li
240.352 60.6555 li
240.352 59.3355 li
cp
249.568 59.3355 mo
254.835 59.3355 li
254.835 60.6555 li
249.568 60.6555 li
249.568 59.3355 li
cp
258.785 59.3355 mo
264.052 59.3355 li
264.052 60.6555 li
258.785 60.6555 li
258.785 59.3355 li
cp
268.001 59.3355 mo
273.268 59.3355 li
273.268 60.6555 li
268.001 60.6555 li
268.001 59.3355 li
cp
277.218 59.3355 mo
282.485 59.3355 li
282.485 60.6555 li
277.218 60.6555 li
277.218 59.3355 li
cp
286.435 59.3355 mo
291.702 59.3355 li
291.702 60.6555 li
286.435 60.6555 li
286.435 59.3355 li
cp
295.652 59.3355 mo
300.918 59.3355 li
300.918 60.6555 li
295.652 60.6555 li
295.652 59.3355 li
cp
304.868 59.3355 mo
310.135 59.3355 li
310.135 60.6555 li
304.868 60.6555 li
304.868 59.3355 li
cp
314.085 59.3355 mo
319.352 59.3355 li
319.352 60.6555 li
314.085 60.6555 li
314.085 59.3355 li
cp
323.302 59.3355 mo
328.568 59.3355 li
328.568 60.6555 li
323.302 60.6555 li
323.302 59.3355 li
cp
332.518 59.3355 mo
337.785 59.3355 li
337.785 60.6555 li
332.518 60.6555 li
332.518 59.3355 li
cp
341.735 59.3355 mo
347.001 59.3355 li
347.001 60.6555 li
341.735 60.6555 li
341.735 59.3355 li
cp
350.952 59.3355 mo
356.218 59.3355 li
356.218 60.6555 li
350.952 60.6555 li
350.952 59.3355 li
cp
360.168 59.3355 mo
365.435 59.3355 li
365.435 60.6555 li
360.168 60.6555 li
360.168 59.3355 li
cp
369.385 59.3355 mo
374.652 59.3355 li
374.652 60.6555 li
369.385 60.6555 li
369.385 59.3355 li
cp
378.602 59.3355 mo
383.868 59.3355 li
383.868 60.6555 li
378.602 60.6555 li
378.602 59.3355 li
cp
387.818 59.3355 mo
393.085 59.3355 li
393.085 60.6555 li
387.818 60.6555 li
387.818 59.3355 li
cp
397.035 59.3355 mo
402.302 59.3355 li
402.302 60.6555 li
397.035 60.6555 li
397.035 59.3355 li
cp
406.251 59.3355 mo
411.518 59.3355 li
411.518 60.6555 li
406.251 60.6555 li
406.251 59.3355 li
cp
415.468 59.3355 mo
420.735 59.3355 li
420.735 60.6555 li
415.468 60.6555 li
415.468 59.3355 li
cp
424.685 59.3355 mo
429.952 59.3355 li
429.952 60.6555 li
424.685 60.6555 li
424.685 59.3355 li
cp
433.902 59.3355 mo
439.168 59.3355 li
439.168 60.6555 li
433.902 60.6555 li
433.902 59.3355 li
cp
443.118 59.3355 mo
448.385 59.3355 li
448.385 60.6555 li
443.118 60.6555 li
443.118 59.3355 li
cp
452.335 59.3355 mo
457.602 59.3355 li
457.602 60.6555 li
452.335 60.6555 li
452.335 59.3355 li
cp
461.552 59.3355 mo
466.818 59.3355 li
466.818 60.6555 li
461.552 60.6555 li
461.552 59.3355 li
cp
470.768 59.3355 mo
476.035 59.3355 li
476.035 60.6555 li
470.768 60.6555 li
470.768 59.3355 li
cp
479.985 59.3355 mo
485.251 59.3355 li
485.251 60.6555 li
479.985 60.6555 li
479.985 59.3355 li
cp
489.202 59.3355 mo
494.468 59.3355 li
494.468 60.6555 li
489.202 60.6555 li
489.202 59.3355 li
cp
498.418 59.3355 mo
503.685 59.3355 li
503.685 60.6555 li
498.418 60.6555 li
498.418 59.3355 li
cp
507.635 59.3355 mo
512.901 59.3355 li
512.901 60.6555 li
507.635 60.6555 li
507.635 59.3355 li
cp
516.852 59.3355 mo
522.118 59.3355 li
522.118 60.6555 li
516.852 60.6555 li
516.852 59.3355 li
cp
526.068 59.3355 mo
531.335 59.3355 li
531.335 60.6555 li
526.068 60.6555 li
526.068 59.3355 li
cp
535.285 59.3355 mo
540.552 59.3355 li
540.552 60.6555 li
535.285 60.6555 li
535.285 59.3355 li
cp
544.502 59.3355 mo
549.768 59.3355 li
549.768 60.6555 li
544.502 60.6555 li
544.502 59.3355 li
cp
553.718 59.3355 mo
558.985 59.3355 li
558.985 60.6555 li
553.718 60.6555 li
553.718 59.3355 li
cp
562.935 59.3355 mo
568.201 59.3355 li
568.201 60.6555 li
562.935 60.6555 li
562.935 59.3355 li
cp
572.151 59.3355 mo
577.418 59.3355 li
577.418 60.6555 li
572.151 60.6555 li
572.151 59.3355 li
cp
581.368 59.3355 mo
586.635 59.3355 li
586.635 60.6555 li
581.368 60.6555 li
581.368 59.3355 li
cp
590.585 59.3355 mo
595.852 59.3355 li
595.852 60.6555 li
590.585 60.6555 li
590.585 59.3355 li
cp
599.802 59.3355 mo
605.068 59.3355 li
605.068 60.6555 li
599.802 60.6555 li
599.802 59.3355 li
cp
609.018 59.3355 mo
614.285 59.3355 li
614.285 60.6555 li
609.018 60.6555 li
609.018 59.3355 li
cp
618.235 59.3355 mo
623.502 59.3355 li
623.502 60.6555 li
618.235 60.6555 li
618.235 59.3355 li
cp
627.451 59.3355 mo
632.718 59.3355 li
632.718 60.6555 li
627.451 60.6555 li
627.451 59.3355 li
cp
636.668 59.3355 mo
641.935 59.3355 li
641.935 60.6555 li
636.668 60.6555 li
636.668 59.3355 li
cp
645.885 59.3355 mo
651.151 59.3355 li
651.151 60.6555 li
645.885 60.6555 li
645.885 59.3355 li
cp
655.102 59.3355 mo
660.368 59.3355 li
660.368 60.6555 li
655.102 60.6555 li
655.102 59.3355 li
cp
664.318 59.3355 mo
669.585 59.3355 li
669.585 60.6555 li
664.318 60.6555 li
664.318 59.3355 li
cp
673.535 59.3355 mo
678.802 59.3355 li
678.802 60.6555 li
673.535 60.6555 li
673.535 59.3355 li
cp
682.752 59.3355 mo
688.018 59.3355 li
688.018 60.6555 li
682.752 60.6555 li
682.752 59.3355 li
cp
691.968 59.3355 mo
697.235 59.3355 li
697.235 60.6555 li
691.968 60.6555 li
691.968 59.3355 li
cp
701.185 59.3355 mo
706.451 59.3355 li
706.451 60.6555 li
701.185 60.6555 li
701.185 59.3355 li
cp
710.401 59.3355 mo
712.795 59.3355 li
712.795 60.6555 li
710.401 60.6555 li
710.401 59.3355 li
cp
.597832 .603409 .617693 rgb
f
147.586 317.816 mo
147.586 59.9355 li
148.903 59.9355 li
148.903 317.816 li
cp
f
142.32 317.216 mo
148.185 317.216 li
148.185 318.536 li
142.32 318.536 li
142.32 317.216 li
cp
142.32 293.696 mo
148.185 293.696 li
148.185 295.016 li
142.32 295.016 li
142.32 293.696 li
cp
142.32 270.296 mo
148.185 270.296 li
148.185 271.616 li
142.32 271.616 li
142.32 270.296 li
cp
142.32 246.896 mo
148.185 246.896 li
148.185 248.216 li
142.32 248.216 li
142.32 246.896 li
cp
142.32 223.376 mo
148.185 223.376 li
148.185 224.696 li
142.32 224.696 li
142.32 223.376 li
cp
142.32 199.976 mo
148.185 199.976 li
148.185 201.296 li
142.32 201.296 li
142.32 199.976 li
cp
142.32 176.576 mo
148.185 176.576 li
148.185 177.896 li
142.32 177.896 li
142.32 176.576 li
cp
142.32 153.176 mo
148.185 153.176 li
148.185 154.496 li
142.32 154.496 li
142.32 153.176 li
cp
142.32 129.656 mo
148.185 129.656 li
148.185 130.976 li
142.32 130.976 li
142.32 129.656 li
cp
142.32 106.256 mo
148.185 106.256 li
148.185 107.576 li
142.32 107.576 li
142.32 106.256 li
cp
142.32 82.8555 mo
148.185 82.8555 li
148.185 84.1755 li
142.32 84.1755 li
142.32 82.8555 li
cp
142.32 59.3355 mo
148.185 59.3355 li
148.185 60.6555 li
142.32 60.6555 li
142.32 59.3355 li
cp
f
148.185 317.216 mo
712.795 317.216 li
712.795 318.536 li
148.185 318.536 li
cp
f
148.903 317.816 mo
148.903 323.696 li
147.586 323.696 li
147.586 317.816 li
148.903 317.816 li
cp
154.529 317.816 mo
154.529 323.696 li
153.212 323.696 li
153.212 317.816 li
154.529 317.816 li
cp
160.155 317.816 mo
160.155 323.696 li
158.838 323.696 li
158.838 317.816 li
160.155 317.816 li
cp
165.661 317.816 mo
165.661 323.696 li
164.344 323.696 li
164.344 317.816 li
165.661 317.816 li
cp
171.286 317.816 mo
171.286 323.696 li
169.97 323.696 li
169.97 317.816 li
171.286 317.816 li
cp
176.912 317.816 mo
176.912 323.696 li
175.595 323.696 li
175.595 317.816 li
176.912 317.816 li
cp
182.538 317.816 mo
182.538 323.696 li
181.221 323.696 li
181.221 317.816 li
182.538 317.816 li
cp
188.044 317.816 mo
188.044 323.696 li
186.727 323.696 li
186.727 317.816 li
188.044 317.816 li
cp
193.67 317.816 mo
193.67 323.696 li
192.353 323.696 li
192.353 317.816 li
193.67 317.816 li
cp
199.295 317.816 mo
199.295 323.696 li
197.979 323.696 li
197.979 317.816 li
199.295 317.816 li
cp
204.802 317.816 mo
204.802 323.696 li
203.485 323.696 li
203.485 317.816 li
204.802 317.816 li
cp
210.427 317.816 mo
210.427 323.696 li
209.111 323.696 li
209.111 317.816 li
210.427 317.816 li
cp
f
216.053 317.816 mo
216.053 323.696 li
214.736 323.696 li
214.736 317.816 li
216.053 317.816 li
cp
221.559 317.816 mo
221.559 323.696 li
220.242 323.696 li
220.242 317.816 li
221.559 317.816 li
cp
227.185 317.816 mo
227.185 323.696 li
225.868 323.696 li
225.868 317.816 li
227.185 317.816 li
cp
232.811 317.816 mo
232.811 323.696 li
231.494 323.696 li
231.494 317.816 li
232.811 317.816 li
cp
238.436 317.816 mo
238.436 323.696 li
237.12 323.696 li
237.12 317.816 li
238.436 317.816 li
cp
243.942 317.816 mo
243.942 323.696 li
242.626 323.696 li
242.626 317.816 li
243.942 317.816 li
cp
249.568 317.816 mo
249.568 323.696 li
248.252 323.696 li
248.252 317.816 li
249.568 317.816 li
cp
255.194 317.816 mo
255.194 323.696 li
253.877 323.696 li
253.877 317.816 li
255.194 317.816 li
cp
260.7 317.816 mo
260.7 323.696 li
259.383 323.696 li
259.383 317.816 li
260.7 317.816 li
cp
266.326 317.816 mo
266.326 323.696 li
265.009 323.696 li
265.009 317.816 li
266.326 317.816 li
cp
271.952 317.816 mo
271.952 323.696 li
270.635 323.696 li
270.635 317.816 li
271.952 317.816 li
cp
277.577 317.816 mo
277.577 323.696 li
276.261 323.696 li
276.261 317.816 li
277.577 317.816 li
cp
f
283.083 317.816 mo
283.083 323.696 li
281.767 323.696 li
281.767 317.816 li
283.083 317.816 li
cp
288.709 317.816 mo
288.709 323.696 li
287.392 323.696 li
287.392 317.816 li
288.709 317.816 li
cp
294.335 317.816 mo
294.335 323.696 li
293.018 323.696 li
293.018 317.816 li
294.335 317.816 li
cp
299.841 317.816 mo
299.841 323.696 li
298.524 323.696 li
298.524 317.816 li
299.841 317.816 li
cp
305.467 317.816 mo
305.467 323.696 li
304.15 323.696 li
304.15 317.816 li
305.467 317.816 li
cp
311.092 317.816 mo
311.092 323.696 li
309.776 323.696 li
309.776 317.816 li
311.092 317.816 li
cp
316.598 317.816 mo
316.598 323.696 li
315.282 323.696 li
315.282 317.816 li
316.598 317.816 li
cp
322.224 317.816 mo
322.224 323.696 li
320.908 323.696 li
320.908 317.816 li
322.224 317.816 li
cp
327.85 317.816 mo
327.85 323.696 li
326.533 323.696 li
326.533 317.816 li
327.85 317.816 li
cp
333.476 317.816 mo
333.476 323.696 li
332.159 323.696 li
332.159 317.816 li
333.476 317.816 li
cp
338.982 317.816 mo
338.982 323.696 li
337.665 323.696 li
337.665 317.816 li
338.982 317.816 li
cp
344.608 317.816 mo
344.608 323.696 li
343.291 323.696 li
343.291 317.816 li
344.608 317.816 li
cp
f
350.233 317.816 mo
350.233 323.696 li
348.917 323.696 li
348.917 317.816 li
350.233 317.816 li
cp
355.739 317.816 mo
355.739 323.696 li
354.423 323.696 li
354.423 317.816 li
355.739 317.816 li
cp
361.365 317.816 mo
361.365 323.696 li
360.048 323.696 li
360.048 317.816 li
361.365 317.816 li
cp
366.991 317.816 mo
366.991 323.696 li
365.674 323.696 li
365.674 317.816 li
366.991 317.816 li
cp
372.497 317.816 mo
372.497 323.696 li
371.18 323.696 li
371.18 317.816 li
372.497 317.816 li
cp
378.123 317.816 mo
378.123 323.696 li
376.806 323.696 li
376.806 317.816 li
378.123 317.816 li
cp
383.748 317.816 mo
383.748 323.696 li
382.432 323.696 li
382.432 317.816 li
383.748 317.816 li
cp
389.374 317.816 mo
389.374 323.696 li
388.058 323.696 li
388.058 317.816 li
389.374 317.816 li
cp
394.88 317.816 mo
394.88 323.696 li
393.564 323.696 li
393.564 317.816 li
394.88 317.816 li
cp
400.506 317.816 mo
400.506 323.696 li
399.189 323.696 li
399.189 317.816 li
400.506 317.816 li
cp
406.132 317.816 mo
406.132 323.696 li
404.815 323.696 li
404.815 317.816 li
406.132 317.816 li
cp
411.638 317.816 mo
411.638 323.696 li
410.321 323.696 li
410.321 317.816 li
411.638 317.816 li
cp
f
417.264 317.816 mo
417.264 323.696 li
415.947 323.696 li
415.947 317.816 li
417.264 317.816 li
cp
422.889 317.816 mo
422.889 323.696 li
421.573 323.696 li
421.573 317.816 li
422.889 317.816 li
cp
428.395 317.816 mo
428.395 323.696 li
427.079 323.696 li
427.079 317.816 li
428.395 317.816 li
cp
434.021 317.816 mo
434.021 323.696 li
432.705 323.696 li
432.705 317.816 li
434.021 317.816 li
cp
439.647 317.816 mo
439.647 323.696 li
438.33 323.696 li
438.33 317.816 li
439.647 317.816 li
cp
445.273 317.816 mo
445.273 323.696 li
443.956 323.696 li
443.956 317.816 li
445.273 317.816 li
cp
450.779 317.816 mo
450.779 323.696 li
449.462 323.696 li
449.462 317.816 li
450.779 317.816 li
cp
456.405 317.816 mo
456.405 323.696 li
455.088 323.696 li
455.088 317.816 li
456.405 317.816 li
cp
462.03 317.816 mo
462.03 323.696 li
460.714 323.696 li
460.714 317.816 li
462.03 317.816 li
cp
467.536 317.816 mo
467.536 323.696 li
466.22 323.696 li
466.22 317.816 li
467.536 317.816 li
cp
473.162 317.816 mo
473.162 323.696 li
471.845 323.696 li
471.845 317.816 li
473.162 317.816 li
cp
478.788 317.816 mo
478.788 323.696 li
477.471 323.696 li
477.471 317.816 li
478.788 317.816 li
cp
f
484.414 317.816 mo
484.414 323.696 li
483.097 323.696 li
483.097 317.816 li
484.414 317.816 li
cp
489.92 317.816 mo
489.92 323.696 li
488.603 323.696 li
488.603 317.816 li
489.92 317.816 li
cp
495.545 317.816 mo
495.545 323.696 li
494.229 323.696 li
494.229 317.816 li
495.545 317.816 li
cp
501.171 317.816 mo
501.171 323.696 li
499.855 323.696 li
499.855 317.816 li
501.171 317.816 li
cp
506.677 317.816 mo
506.677 323.696 li
505.361 323.696 li
505.361 317.816 li
506.677 317.816 li
cp
512.303 317.816 mo
512.303 323.696 li
510.986 323.696 li
510.986 317.816 li
512.303 317.816 li
cp
517.929 317.816 mo
517.929 323.696 li
516.612 323.696 li
516.612 317.816 li
517.929 317.816 li
cp
523.435 317.816 mo
523.435 323.696 li
522.118 323.696 li
522.118 317.816 li
523.435 317.816 li
cp
529.061 317.816 mo
529.061 323.696 li
527.744 323.696 li
527.744 317.816 li
529.061 317.816 li
cp
534.686 317.816 mo
534.686 323.696 li
533.37 323.696 li
533.37 317.816 li
534.686 317.816 li
cp
540.312 317.816 mo
540.312 323.696 li
538.995 323.696 li
538.995 317.816 li
540.312 317.816 li
cp
545.818 317.816 mo
545.818 323.696 li
544.502 323.696 li
544.502 317.816 li
545.818 317.816 li
cp
f
551.444 317.816 mo
551.444 323.696 li
550.127 323.696 li
550.127 317.816 li
551.444 317.816 li
cp
557.07 317.816 mo
557.07 323.696 li
555.753 323.696 li
555.753 317.816 li
557.07 317.816 li
cp
562.576 317.816 mo
562.576 323.696 li
561.259 323.696 li
561.259 317.816 li
562.576 317.816 li
cp
568.201 317.816 mo
568.201 323.696 li
566.885 323.696 li
566.885 317.816 li
568.201 317.816 li
cp
573.827 317.816 mo
573.827 323.696 li
572.511 323.696 li
572.511 317.816 li
573.827 317.816 li
cp
579.333 317.816 mo
579.333 323.696 li
578.017 323.696 li
578.017 317.816 li
579.333 317.816 li
cp
584.959 317.816 mo
584.959 323.696 li
583.642 323.696 li
583.642 317.816 li
584.959 317.816 li
cp
590.585 317.816 mo
590.585 323.696 li
589.268 323.696 li
589.268 317.816 li
590.585 317.816 li
cp
596.211 317.816 mo
596.211 323.696 li
594.894 323.696 li
594.894 317.816 li
596.211 317.816 li
cp
601.717 317.816 mo
601.717 323.696 li
600.4 323.696 li
600.4 317.816 li
601.717 317.816 li
cp
607.342 317.816 mo
607.342 323.696 li
606.026 323.696 li
606.026 317.816 li
607.342 317.816 li
cp
612.968 317.816 mo
612.968 323.696 li
611.651 323.696 li
611.651 317.816 li
612.968 317.816 li
cp
f
618.474 317.816 mo
618.474 323.696 li
617.158 323.696 li
617.158 317.816 li
618.474 317.816 li
cp
624.1 317.816 mo
624.1 323.696 li
622.783 323.696 li
622.783 317.816 li
624.1 317.816 li
cp
629.726 317.816 mo
629.726 323.696 li
628.409 323.696 li
628.409 317.816 li
629.726 317.816 li
cp
635.232 317.816 mo
635.232 323.696 li
633.915 323.696 li
633.915 317.816 li
635.232 317.816 li
cp
640.858 317.816 mo
640.858 323.696 li
639.541 323.696 li
639.541 317.816 li
640.858 317.816 li
cp
646.483 317.816 mo
646.483 323.696 li
645.167 323.696 li
645.167 317.816 li
646.483 317.816 li
cp
652.109 317.816 mo
652.109 323.696 li
650.792 323.696 li
650.792 317.816 li
652.109 317.816 li
cp
657.615 317.816 mo
657.615 323.696 li
656.298 323.696 li
656.298 317.816 li
657.615 317.816 li
cp
663.241 317.816 mo
663.241 323.696 li
661.924 323.696 li
661.924 317.816 li
663.241 317.816 li
cp
668.867 317.816 mo
668.867 323.696 li
667.55 323.696 li
667.55 317.816 li
668.867 317.816 li
cp
674.373 317.816 mo
674.373 323.696 li
673.056 323.696 li
673.056 317.816 li
674.373 317.816 li
cp
679.998 317.816 mo
679.998 323.696 li
678.682 323.696 li
678.682 317.816 li
679.998 317.816 li
cp
685.624 317.816 mo
685.624 323.696 li
684.308 323.696 li
684.308 317.816 li
685.624 317.816 li
cp
691.25 317.816 mo
691.25 323.696 li
689.933 323.696 li
689.933 317.816 li
691.25 317.816 li
cp
696.756 317.816 mo
696.756 323.696 li
695.439 323.696 li
695.439 317.816 li
696.756 317.816 li
cp
702.382 317.816 mo
702.382 323.696 li
701.065 323.696 li
701.065 317.816 li
702.382 317.816 li
cp
708.008 317.816 mo
708.008 323.696 li
706.691 323.696 li
706.691 317.816 li
708.008 317.816 li
cp
713.514 317.816 mo
713.514 323.696 li
712.197 323.696 li
712.197 317.816 li
713.514 317.816 li
cp
f
gsave
148.065 59.9355 mo
714.232 59.9355 li
714.232 319.016 li
148.065 319.016 li
cp
eclp
149.262 316.976 mo
154.768 305.696 li
155.247 304.616 156.444 304.136 157.521 304.616 cv
158.598 305.216 159.077 306.416 158.479 307.496 cv
152.973 318.776 li
152.494 319.856 151.177 320.216 150.22 319.736 cv
149.142 319.256 148.783 317.936 149.262 316.976 cv
cp
162.07 290.456 mo
166.02 282.296 li
167.695 279.176 li
168.294 278.096 169.491 277.736 170.568 278.336 cv
171.526 278.816 171.885 280.136 171.406 281.216 cv
169.73 284.096 li
165.78 292.376 li
165.302 293.336 163.985 293.816 163.027 293.336 cv
161.95 292.856 161.471 291.536 162.07 290.456 cv
cp
175.356 264.296 mo
177.152 260.696 li
180.742 253.016 li
181.341 251.936 182.538 251.456 183.615 251.936 cv
184.692 252.536 185.052 253.736 184.573 254.816 cv
180.862 262.496 li
179.067 266.216 li
178.588 267.176 177.391 267.656 176.314 267.176 cv
175.236 266.576 174.877 265.376 175.356 264.296 cv
cp
188.044 237.896 mo
188.403 237.296 li
193.909 227.816 li
194.268 227.216 194.747 226.856 195.345 226.736 cv
196.064 226.616 196.662 226.856 197.141 227.216 cv
197.979 227.936 li
198.817 228.656 198.936 229.976 198.218 230.936 cv
197.5 231.776 196.183 231.896 195.226 231.176 cv
194.388 230.456 li
197.62 229.856 li
192.114 239.096 li
191.874 239.696 li
191.395 240.776 190.079 241.136 189.121 240.656 cv
188.044 240.176 187.565 238.856 188.044 237.896 cv
cp
209.111 241.856 mo
212.223 254.096 li
212.462 255.176 211.864 256.376 210.667 256.616 cv
209.589 256.856 208.392 256.256 208.153 255.056 cv
205.041 242.816 li
204.802 241.736 205.52 240.656 206.597 240.296 cv
207.794 240.056 208.871 240.776 209.111 241.856 cv
cp
216.292 270.416 mo
219.165 282.656 li
219.405 283.736 218.686 284.936 217.609 285.176 cv
216.532 285.416 215.335 284.816 215.095 283.616 cv
212.103 271.376 li
211.864 270.296 212.582 269.096 213.659 268.856 cv
214.856 268.616 215.933 269.216 216.292 270.416 cv
cp
225.15 297.896 mo
225.629 299.096 li
225.509 298.856 li
231.135 307.376 li
230.776 306.896 li
231.494 307.616 li
232.452 308.336 232.452 309.656 231.733 310.496 cv
231.015 311.456 229.698 311.456 228.861 310.736 cv
228.023 310.136 li
227.903 310.016 227.783 309.896 227.664 309.656 cv
222.038 301.136 li
221.918 301.016 221.918 300.896 221.798 300.896 cv
221.32 299.576 li
220.841 298.496 221.32 297.296 222.397 296.816 cv
223.355 296.336 224.671 296.816 225.15 297.896 cv
cp
245.618 314.456 mo
246.815 314.936 li
246.456 314.816 li
251.962 315.776 li
251.124 315.896 li
256.63 314.456 li
257.708 314.096 258.905 314.816 259.144 315.896 cv
259.503 317.096 258.785 318.176 257.708 318.536 cv
252.202 319.856 li
251.842 319.976 251.603 319.976 251.244 319.976 cv
245.738 319.016 li
245.738 319.016 245.618 318.896 245.498 318.896 cv
244.182 318.536 li
243.105 318.056 242.506 316.856 242.985 315.776 cv
243.344 314.696 244.541 314.096 245.618 314.456 cv
cp
273.747 315.776 mo
273.986 315.776 li
279.612 315.776 li
285.238 315.776 li
286.315 315.776 li
287.512 315.776 288.35 316.736 288.35 317.816 cv
288.35 319.016 287.512 319.976 286.315 319.976 cv
285.238 319.976 li
279.612 319.976 li
273.986 319.976 li
273.747 319.976 li
272.55 319.976 271.592 319.016 271.592 317.816 cv
271.592 316.736 272.55 315.776 273.747 315.776 cv
cp
303.192 315.416 mo
307.741 315.776 li
313.127 315.776 li
315.521 315.776 li
316.718 315.776 317.676 316.736 317.676 317.816 cv
317.676 319.016 316.718 319.976 315.521 319.976 cv
313.127 319.976 li
307.382 319.976 li
302.833 319.616 li
301.636 319.496 300.798 318.416 300.918 317.336 cv
301.038 316.136 302.115 315.296 303.192 315.416 cv
cp
332.279 315.776 mo
335.511 315.776 li
341.017 315.296 li
341.136 315.296 341.256 315.296 341.376 315.296 cv
344.967 315.656 li
346.164 315.776 347.001 316.736 346.882 317.936 cv
346.762 319.016 345.805 319.856 344.608 319.856 cv
341.017 319.496 li
341.376 319.496 li
335.511 319.976 li
332.279 319.976 li
331.082 319.976 330.244 319.016 330.244 317.816 cv
330.244 316.736 331.082 315.776 332.279 315.776 cv
cp
361.605 315.776 mo
363.4 315.776 li
369.026 315.776 li
374.173 315.776 li
375.25 315.776 376.208 316.736 376.208 317.816 cv
376.208 319.016 375.25 319.976 374.173 319.976 cv
369.026 319.976 li
363.4 319.976 li
361.605 319.976 li
360.408 319.976 359.45 319.016 359.45 317.816 cv
359.45 316.736 360.408 315.776 361.605 315.776 cv
cp
390.93 315.776 mo
391.409 315.776 li
397.035 315.776 li
402.541 315.776 li
403.498 315.776 li
404.576 315.776 405.533 316.736 405.533 317.816 cv
405.533 319.016 404.576 319.976 403.498 319.976 cv
402.541 319.976 li
397.035 319.976 li
391.409 319.976 li
390.93 319.976 li
389.733 319.976 388.776 319.016 388.776 317.816 cv
388.776 316.736 389.733 315.776 390.93 315.776 cv
cp
420.256 315.776 mo
424.924 315.776 li
430.55 315.776 li
432.824 315.776 li
433.902 315.776 434.859 316.736 434.859 317.816 cv
434.859 319.016 433.902 319.976 432.824 319.976 cv
430.55 319.976 li
424.924 319.976 li
420.256 319.976 li
419.059 319.976 418.102 319.016 418.102 317.816 cv
418.102 316.736 419.059 315.776 420.256 315.776 cv
cp
449.582 315.776 mo
452.933 315.776 li
458.439 315.776 li
462.15 315.776 li
463.227 315.776 464.185 316.736 464.185 317.816 cv
464.185 319.016 463.227 319.976 462.15 319.976 cv
458.439 319.976 li
452.933 319.976 li
449.582 319.976 li
448.385 319.976 447.427 319.016 447.427 317.816 cv
447.427 316.736 448.385 315.776 449.582 315.776 cv
cp
478.908 315.776 mo
480.823 315.776 li
486.448 315.776 li
491.476 315.776 li
492.553 315.776 493.511 316.736 493.511 317.816 cv
493.511 319.016 492.553 319.976 491.476 319.976 cv
486.448 319.976 li
480.823 319.976 li
478.908 319.976 li
477.711 319.976 476.753 319.016 476.753 317.816 cv
476.753 316.736 477.711 315.776 478.908 315.776 cv
cp
508.233 315.776 mo
508.832 315.776 li
514.338 315.776 li
519.964 315.776 li
520.802 315.776 li
521.879 315.776 522.836 316.736 522.836 317.816 cv
522.836 319.016 521.879 319.976 520.802 319.976 cv
519.964 319.976 li
514.338 319.976 li
508.832 319.976 li
508.233 319.976 li
507.036 319.976 506.079 319.016 506.079 317.816 cv
506.079 316.736 507.036 315.776 508.233 315.776 cv
cp
537.559 315.776 mo
542.347 315.776 li
547.973 315.776 li
550.127 315.776 li
551.205 315.776 552.162 316.736 552.162 317.816 cv
552.162 319.016 551.205 319.976 550.127 319.976 cv
547.973 319.976 li
542.347 319.976 li
537.559 319.976 li
536.362 319.976 535.405 319.016 535.405 317.816 cv
535.405 316.736 536.362 315.776 537.559 315.776 cv
cp
566.885 315.776 mo
570.236 315.776 li
575.862 315.776 li
579.453 315.776 li
580.53 315.776 581.488 316.736 581.488 317.816 cv
581.488 319.016 580.53 319.976 579.453 319.976 cv
575.862 319.976 li
570.236 319.976 li
566.885 319.976 li
565.688 319.976 564.73 319.016 564.73 317.816 cv
564.73 316.736 565.688 315.776 566.885 315.776 cv
cp
596.211 315.776 mo
598.245 315.776 li
603.871 315.776 li
608.779 315.776 li
609.856 315.776 610.814 316.736 610.814 317.816 cv
610.814 319.016 609.856 319.976 608.779 319.976 cv
603.871 319.976 li
598.245 319.976 li
596.211 319.976 li
595.014 319.976 594.056 319.016 594.056 317.816 cv
594.056 316.736 595.014 315.776 596.211 315.776 cv
cp
625.536 315.776 mo
626.135 315.776 li
631.761 315.776 li
637.386 315.776 li
638.105 315.776 li
639.182 315.776 640.139 316.736 640.139 317.816 cv
640.139 319.016 639.182 319.976 638.105 319.976 cv
637.386 319.976 li
631.761 319.976 li
626.135 319.976 li
625.536 319.976 li
624.339 319.976 623.382 319.016 623.382 317.816 cv
623.382 316.736 624.339 315.776 625.536 315.776 cv
cp
654.862 315.776 mo
659.77 315.776 li
665.276 315.776 li
667.43 315.776 li
668.508 315.776 669.465 316.736 669.465 317.816 cv
669.465 319.016 668.508 319.976 667.43 319.976 cv
665.276 319.976 li
659.77 319.976 li
654.862 319.976 li
653.665 319.976 652.708 319.016 652.708 317.816 cv
652.708 316.736 653.665 315.776 654.862 315.776 cv
cp
684.188 315.776 mo
687.659 315.776 li
693.285 315.776 li
696.756 315.776 li
697.833 315.776 698.791 316.736 698.791 317.816 cv
698.791 319.016 697.833 319.976 696.756 319.976 cv
693.285 319.976 li
687.659 319.976 li
684.188 319.976 li
682.991 319.976 682.033 319.016 682.033 317.816 cv
682.033 316.736 682.991 315.776 684.188 315.776 cv
cp
.577668 .58323 .597478 rgb
f
grestore
gsave
148.065 59.9355 mo
714.232 59.9355 li
714.232 319.016 li
148.065 319.016 li
cp
eclp
149.262 316.976 mo
149.262 316.976 li
149.741 315.896 150.938 315.416 152.015 316.016 cv
153.092 316.496 153.452 317.696 152.973 318.776 cv
152.494 319.856 151.177 320.216 150.22 319.736 cv
149.142 319.256 148.783 317.936 149.262 316.976 cv
cp
152.973 309.416 mo
152.973 309.416 li
153.452 308.336 154.648 307.976 155.726 308.456 cv
156.803 308.936 157.162 310.256 156.683 311.216 cv
156.205 312.296 154.888 312.776 153.93 312.176 cv
152.853 311.696 152.374 310.496 152.973 309.416 cv
cp
156.564 301.856 mo
156.564 301.856 li
157.042 300.776 158.359 300.416 159.317 300.896 cv
160.394 301.376 160.873 302.576 160.394 303.656 cv
159.795 304.736 158.598 305.096 157.521 304.616 cv
156.564 304.136 156.085 302.936 156.564 301.856 cv
cp
160.155 294.296 mo
160.155 294.296 li
160.633 293.216 161.95 292.736 163.027 293.336 cv
163.985 293.816 164.464 295.016 163.985 296.096 cv
163.506 297.176 162.189 297.536 161.232 297.056 cv
160.155 296.576 159.676 295.376 160.155 294.296 cv
cp
163.985 286.736 mo
163.985 286.736 li
164.464 285.656 165.78 285.296 166.738 285.776 cv
167.815 286.376 168.294 287.576 167.695 288.656 cv
167.217 289.616 165.9 290.096 164.942 289.496 cv
163.865 289.016 163.506 287.816 163.985 286.736 cv
cp
167.695 279.296 mo
167.695 279.296 li
168.174 278.216 169.371 277.736 170.448 278.216 cv
171.526 278.696 172.005 280.016 171.406 280.976 cv
171.406 281.096 li
170.927 282.056 169.73 282.536 168.653 282.056 cv
167.576 281.576 167.217 280.256 167.695 279.296 cv
cp
171.286 271.616 mo
171.286 271.616 li
171.765 270.656 173.082 270.176 174.039 270.656 cv
175.117 271.136 175.595 272.456 175.117 273.416 cv
174.638 274.496 173.321 274.976 172.244 274.496 cv
171.286 274.016 170.808 272.696 171.286 271.616 cv
cp
174.877 264.056 mo
174.877 264.056 li
175.356 262.976 176.553 262.616 177.63 263.096 cv
178.708 263.576 179.186 264.776 178.708 265.856 cv
178.109 266.936 176.912 267.296 175.835 266.816 cv
174.877 266.336 174.398 265.136 174.877 264.056 cv
cp
178.468 256.496 mo
178.468 256.496 li
178.947 255.416 180.264 254.936 181.221 255.416 cv
182.298 256.016 182.777 257.216 182.298 258.296 cv
182.179 258.296 li
181.7 259.376 180.503 259.736 179.426 259.256 cv
178.348 258.776 177.989 257.456 178.468 256.496 cv
cp
182.059 248.936 mo
182.059 248.936 li
182.658 247.856 183.855 247.376 184.932 247.856 cv
186.009 248.456 186.368 249.656 185.889 250.736 cv
185.411 251.816 184.094 252.176 183.136 251.696 cv
182.059 251.216 181.58 249.896 182.059 248.936 cv
cp
185.77 241.376 mo
185.77 241.376 li
186.248 240.296 187.445 239.816 188.523 240.296 cv
189.6 240.776 190.079 242.096 189.48 243.176 cv
189.002 244.136 187.805 244.616 186.727 244.136 cv
185.65 243.656 185.291 242.336 185.77 241.376 cv
cp
189.48 233.696 mo
189.48 233.696 li
189.959 232.736 191.276 232.256 192.233 232.856 cv
193.311 233.336 193.67 234.536 193.191 235.616 cv
192.712 236.696 191.395 237.056 190.318 236.576 cv
189.361 235.976 188.882 234.776 189.48 233.696 cv
cp
193.311 226.256 mo
193.311 226.256 li
193.789 225.176 195.106 224.816 196.064 225.296 cv
197.141 225.896 197.5 227.096 197.021 228.176 cv
196.423 229.136 195.226 229.616 194.148 229.016 cv
193.191 228.536 192.712 227.336 193.311 226.256 cv
cp
198.936 219.416 mo
198.936 219.416 li
199.774 218.576 201.091 218.456 201.929 219.296 cv
202.767 220.016 202.886 221.336 202.048 222.176 cv
201.211 223.016 199.894 223.136 199.056 222.296 cv
198.218 221.576 198.218 220.256 198.936 219.416 cv
cp
208.153 213.896 mo
208.153 213.896 li
209.111 214.376 209.47 215.696 208.871 216.776 cv
208.273 217.736 206.956 218.096 205.998 217.496 cv
205.041 216.896 204.682 215.576 205.28 214.616 cv
205.879 213.656 207.076 213.296 208.153 213.896 cv
cp
215.335 219.656 mo
215.335 219.656 li
215.933 220.736 215.574 221.936 214.497 222.536 cv
213.539 223.136 212.223 222.656 211.624 221.696 cv
211.145 220.616 211.505 219.416 212.462 218.816 cv
213.539 218.336 214.736 218.696 215.335 219.656 cv
cp
219.405 227.096 mo
219.405 227.096 li
219.883 228.056 219.524 229.376 218.567 229.856 cv
217.489 230.456 216.292 230.096 215.694 229.016 cv
215.095 228.056 215.455 226.736 216.532 226.256 cv
217.489 225.656 218.806 226.016 219.405 227.096 cv
cp
223.953 233.816 mo
223.953 233.816 li
224.552 234.776 224.312 236.096 223.474 236.696 cv
222.517 237.416 221.2 237.176 220.482 236.216 cv
219.883 235.256 220.123 233.936 220.961 233.336 cv
221.918 232.616 223.235 232.856 223.953 233.816 cv
cp
229.459 239.216 mo
229.459 239.216 li
230.417 239.936 230.536 241.376 229.698 242.216 cv
228.98 243.056 227.664 243.176 226.826 242.456 cv
225.868 241.736 225.748 240.416 226.586 239.576 cv
227.305 238.616 228.621 238.496 229.459 239.216 cv
cp
234.486 246.776 mo
234.486 246.776 li
235.085 247.856 234.726 249.056 233.768 249.656 cv
232.691 250.256 231.494 249.896 230.895 248.816 cv
230.297 247.856 230.656 246.536 231.733 245.936 cv
232.691 245.456 234.008 245.816 234.486 246.776 cv
cp
238.556 254.216 mo
238.556 254.216 li
239.155 255.176 238.795 256.496 237.718 256.976 cv
236.761 257.576 235.444 257.216 234.965 256.136 cv
234.367 255.176 234.726 253.856 235.803 253.376 cv
236.761 252.776 238.077 253.136 238.556 254.216 cv
cp
242.386 260.936 mo
242.386 260.936 li
243.224 261.656 243.224 262.976 242.506 263.816 cv
241.668 264.656 240.352 264.776 239.514 263.936 cv
238.676 263.216 238.556 261.896 239.394 261.056 cv
240.112 260.216 241.429 260.096 242.386 260.936 cv
cp
248.611 267.056 mo
248.611 267.056 li
249.329 268.016 249.089 269.336 248.132 270.056 cv
247.174 270.656 245.858 270.416 245.139 269.456 cv
244.541 268.496 244.78 267.176 245.738 266.576 cv
246.695 265.856 248.012 266.096 248.611 267.056 cv
cp
253.159 273.656 mo
253.159 273.656 li
253.997 274.496 253.997 275.816 253.159 276.656 cv
252.321 277.496 251.005 277.496 250.167 276.656 cv
249.448 275.816 249.448 274.496 250.167 273.656 cv
251.005 272.936 252.321 272.936 253.159 273.656 cv
cp
259.264 279.896 mo
259.264 279.896 li
259.982 280.736 259.742 282.056 258.905 282.776 cv
257.947 283.496 256.63 283.376 255.912 282.416 cv
255.194 281.576 255.314 280.256 256.271 279.536 cv
257.229 278.816 258.545 278.936 259.264 279.896 cv
cp
264.411 286.376 mo
264.411 286.376 li
265.129 287.336 265.009 288.656 264.052 289.376 cv
263.214 290.096 261.897 289.976 261.179 289.016 cv
260.461 288.176 260.58 286.856 261.538 286.136 cv
262.376 285.416 263.692 285.536 264.411 286.376 cv
cp
270.635 291.056 mo
270.635 291.056 li
271.592 291.656 271.832 292.976 271.233 293.936 cv
270.635 294.896 269.318 295.136 268.361 294.536 cv
267.403 293.936 267.164 292.616 267.762 291.656 cv
268.361 290.696 269.677 290.336 270.635 291.056 cv
cp
277.338 294.176 mo
277.338 294.176 li
278.415 294.416 279.253 295.496 279.014 296.696 cv
278.774 297.776 277.697 298.496 276.62 298.376 cv
275.423 298.136 274.705 297.056 274.824 295.976 cv
275.064 294.776 276.141 294.056 277.338 294.176 cv
cp
285.358 298.736 mo
285.358 298.736 li
286.195 299.456 286.315 300.776 285.597 301.736 cv
284.879 302.576 283.562 302.696 282.605 301.976 cv
281.767 301.256 281.647 299.936 282.365 298.976 cv
283.083 298.136 284.4 298.016 285.358 298.736 cv
cp
292.061 300.416 mo
292.061 300.416 li
293.258 300.536 294.095 301.496 293.976 302.696 cv
293.856 303.776 292.898 304.616 291.702 304.616 cv
290.505 304.496 289.667 303.416 289.786 302.336 cv
289.906 301.136 290.864 300.296 292.061 300.416 cv
cp
300.798 303.536 mo
300.798 303.536 li
301.636 304.136 301.876 305.456 301.158 306.416 cv
300.439 307.376 299.123 307.496 298.285 306.896 cv
297.327 306.176 297.088 304.856 297.806 303.896 cv
298.524 302.936 299.841 302.816 300.798 303.536 cv
cp
307.501 305.936 mo
307.501 305.936 li
308.698 306.056 309.417 307.136 309.297 308.336 cv
309.058 309.416 307.98 310.256 306.783 310.016 cv
305.706 309.896 304.868 308.816 305.108 307.616 cv
305.347 306.416 306.424 305.696 307.501 305.936 cv
cp
315.521 305.456 mo
315.521 305.456 li
316.718 305.456 317.676 306.416 317.676 307.496 cv
317.676 308.696 316.718 309.656 315.521 309.656 cv
314.324 309.656 313.486 308.696 313.486 307.496 cv
313.486 306.416 314.324 305.456 315.521 305.456 cv
cp
323.9 305.456 mo
323.9 305.456 li
325.097 305.456 326.055 306.416 326.055 307.496 cv
326.055 308.696 325.097 309.656 323.9 309.656 cv
322.703 309.656 321.865 308.696 321.865 307.496 cv
321.865 306.416 322.703 305.456 323.9 305.456 cv
cp
332.159 306.776 mo
332.159 306.776 li
333.356 306.776 334.194 307.736 334.194 308.816 cv
334.194 310.016 333.356 310.976 332.159 310.976 cv
330.962 310.976 330.005 310.016 330.005 308.816 cv
330.005 307.736 330.962 306.776 332.159 306.776 cv
cp
340.777 307.616 mo
340.777 307.616 li
341.974 307.856 342.692 308.936 342.573 310.016 cv
342.333 311.216 341.256 311.936 340.059 311.816 cv
338.982 311.576 338.144 310.496 338.383 309.296 cv
338.623 308.216 339.7 307.496 340.777 307.616 cv
cp
349.036 307.496 mo
349.036 307.496 li
350.114 307.496 350.952 308.576 350.952 309.656 cv
350.832 310.856 349.755 311.696 348.677 311.576 cv
347.48 311.576 346.642 310.496 346.762 309.296 cv
346.762 308.216 347.839 307.376 349.036 307.496 cv
cp
357.295 308.096 mo
357.295 308.096 li
358.492 308.216 359.33 309.296 359.211 310.376 cv
359.091 311.576 358.133 312.416 356.936 312.296 cv
355.859 312.296 355.021 311.216 355.021 310.016 cv
355.141 308.936 356.218 308.096 357.295 308.096 cv
cp
365.315 308.576 mo
365.315 308.576 li
366.512 308.456 367.47 309.296 367.589 310.376 cv
367.709 311.576 366.871 312.656 365.674 312.656 cv
364.597 312.776 363.52 311.936 363.4 310.856 cv
363.28 309.656 364.118 308.576 365.315 308.576 cv
cp
373.933 308.216 mo
373.933 308.216 li
375.011 308.216 375.968 309.176 375.968 310.256 cv
375.968 311.456 375.011 312.416 373.933 312.416 cv
372.736 312.416 371.779 311.456 371.779 310.256 cv
371.779 309.176 372.736 308.216 373.933 308.216 cv
cp
382.552 309.056 mo
382.552 309.056 li
383.748 309.296 384.467 310.376 384.227 311.456 cv
384.108 312.656 383.03 313.376 381.833 313.136 cv
380.756 313.016 379.918 311.936 380.158 310.736 cv
380.397 309.656 381.474 308.816 382.552 309.056 cv
cp
390.811 310.496 mo
390.811 310.496 li
392.008 310.616 392.726 311.696 392.486 312.896 cv
392.367 314.096 391.289 314.816 390.092 314.576 cv
389.015 314.456 388.177 313.376 388.417 312.176 cv
388.656 311.096 389.733 310.256 390.811 310.496 cv
cp
399.189 310.496 mo
399.189 310.496 li
400.267 310.616 401.105 311.696 400.865 312.896 cv
400.626 313.976 399.548 314.816 398.471 314.576 cv
397.274 314.456 396.556 313.376 396.676 312.176 cv
396.915 310.976 397.992 310.256 399.189 310.496 cv
cp
407.448 312.176 mo
407.448 312.176 li
408.645 312.416 409.364 313.616 409.005 314.696 cv
408.765 315.776 407.688 316.496 406.491 316.256 cv
405.414 316.016 404.695 314.936 404.935 313.736 cv
405.174 312.656 406.371 311.936 407.448 312.176 cv
cp
415.468 312.536 mo
415.468 312.536 li
416.665 312.656 417.503 313.616 417.383 314.816 cv
417.383 316.016 416.306 316.856 415.229 316.736 cv
414.032 316.616 413.194 315.656 413.314 314.456 cv
413.314 313.256 414.391 312.416 415.468 312.536 cv
cp
423.847 313.256 mo
423.847 313.256 li
425.044 313.376 425.882 314.336 425.762 315.536 cv
425.642 316.736 424.685 317.576 423.488 317.456 cv
422.411 317.336 421.573 316.376 421.573 315.176 cv
421.692 313.976 422.77 313.136 423.847 313.256 cv
cp
432.226 313.496 mo
432.226 313.496 li
433.423 313.616 434.261 314.576 434.141 315.776 cv
434.021 316.976 433.064 317.816 431.867 317.696 cv
430.789 317.576 429.832 316.616 429.952 315.416 cv
430.071 314.216 431.148 313.376 432.226 313.496 cv
cp
440.245 313.496 mo
440.245 313.496 li
441.442 313.376 442.4 314.216 442.52 315.416 cv
442.639 316.496 441.802 317.576 440.605 317.696 cv
439.408 317.816 438.45 316.976 438.33 315.776 cv
438.211 314.576 439.048 313.616 440.245 313.496 cv
cp
448.744 314.336 mo
448.744 314.336 li
449.941 314.336 450.779 315.296 450.779 316.376 cv
450.779 317.576 449.941 318.536 448.744 318.536 cv
447.547 318.536 446.589 317.576 446.589 316.376 cv
446.589 315.296 447.547 314.336 448.744 314.336 cv
cp
457.123 314.336 mo
457.123 314.336 li
458.32 314.336 459.158 315.296 459.158 316.376 cv
459.158 317.576 458.32 318.536 457.123 318.536 cv
455.926 318.536 454.968 317.576 454.968 316.376 cv
454.968 315.296 455.926 314.336 457.123 314.336 cv
cp
465.501 314.336 mo
465.501 314.336 li
466.698 314.336 467.536 315.296 467.536 316.376 cv
467.536 317.576 466.698 318.536 465.501 318.536 cv
464.305 318.536 463.347 317.576 463.347 316.376 cv
463.347 315.296 464.305 314.336 465.501 314.336 cv
cp
473.88 314.336 mo
473.88 314.336 li
475.077 314.336 475.915 315.296 475.915 316.376 cv
475.915 317.576 475.077 318.536 473.88 318.536 cv
472.683 318.536 471.726 317.576 471.726 316.376 cv
471.726 315.296 472.683 314.336 473.88 314.336 cv
cp
482.259 314.336 mo
482.259 314.336 li
483.456 314.336 484.294 315.296 484.294 316.376 cv
484.294 317.576 483.456 318.536 482.259 318.536 cv
481.062 318.536 480.105 317.576 480.105 316.376 cv
480.105 315.296 481.062 314.336 482.259 314.336 cv
cp
490.638 314.336 mo
490.638 314.336 li
491.835 314.336 492.792 315.296 492.792 316.376 cv
492.792 317.576 491.835 318.536 490.638 318.536 cv
489.441 318.536 488.483 317.576 488.483 316.376 cv
488.483 315.296 489.441 314.336 490.638 314.336 cv
cp
499.017 314.336 mo
499.017 314.336 li
500.214 314.336 501.171 315.296 501.171 316.376 cv
501.171 317.576 500.214 318.536 499.017 318.536 cv
497.82 318.536 496.982 317.576 496.982 316.376 cv
496.982 315.296 497.82 314.336 499.017 314.336 cv
cp
507.515 314.696 mo
507.515 314.696 li
508.712 314.816 509.55 315.776 509.43 316.976 cv
509.43 318.176 508.353 319.016 507.156 318.896 cv
506.079 318.776 505.241 317.816 505.241 316.616 cv
505.361 315.416 506.438 314.576 507.515 314.696 cv
cp
515.774 314.816 mo
515.774 314.816 li
516.971 314.816 517.809 315.776 517.809 316.856 cv
517.809 318.056 516.971 319.016 515.774 319.016 cv
514.577 319.016 513.62 318.056 513.62 316.856 cv
513.62 315.776 514.577 314.816 515.774 314.816 cv
cp
524.153 314.816 mo
524.153 314.816 li
525.35 314.816 526.188 315.776 526.188 316.856 cv
526.188 318.056 525.35 319.016 524.153 319.016 cv
522.956 319.016 521.998 318.056 521.998 316.856 cv
521.998 315.776 522.956 314.816 524.153 314.816 cv
cp
532.532 314.816 mo
532.532 314.816 li
533.729 314.816 534.686 315.776 534.686 316.856 cv
534.686 318.056 533.729 319.016 532.532 319.016 cv
531.335 319.016 530.377 318.056 530.377 316.856 cv
530.377 315.776 531.335 314.816 532.532 314.816 cv
cp
540.911 314.816 mo
540.911 314.816 li
542.108 314.816 543.065 315.776 543.065 316.856 cv
543.065 318.056 542.108 319.016 540.911 319.016 cv
539.714 319.016 538.876 318.056 538.876 316.856 cv
538.876 315.776 539.714 314.816 540.911 314.816 cv
cp
549.409 314.456 mo
549.409 314.456 li
550.606 314.576 551.444 315.536 551.324 316.736 cv
551.324 317.816 550.247 318.776 549.05 318.656 cv
547.973 318.536 547.135 317.576 547.135 316.376 cv
547.255 315.176 548.332 314.336 549.409 314.456 cv
cp
557.668 314.816 mo
557.668 314.816 li
558.745 314.816 559.703 315.776 559.703 316.856 cv
559.703 318.056 558.745 319.016 557.668 319.016 cv
556.471 319.016 555.514 318.056 555.514 316.856 cv
555.514 315.776 556.471 314.816 557.668 314.816 cv
cp
566.047 314.816 mo
566.047 314.816 li
567.124 314.816 568.082 315.776 568.082 316.856 cv
568.082 318.056 567.124 319.016 566.047 319.016 cv
564.85 319.016 563.892 318.056 563.892 316.856 cv
563.892 315.776 564.85 314.816 566.047 314.816 cv
cp
574.426 314.816 mo
574.426 314.816 li
575.623 314.816 576.461 315.776 576.461 316.856 cv
576.461 318.056 575.623 319.016 574.426 319.016 cv
573.229 319.016 572.271 318.056 572.271 316.856 cv
572.271 315.776 573.229 314.816 574.426 314.816 cv
cp
582.805 314.816 mo
582.805 314.816 li
584.002 314.816 584.839 315.776 584.839 316.856 cv
584.839 318.056 584.002 319.016 582.805 319.016 cv
581.608 319.016 580.65 318.056 580.65 316.856 cv
580.65 315.776 581.608 314.816 582.805 314.816 cv
cp
591.183 314.816 mo
591.183 314.816 li
592.38 314.816 593.218 315.776 593.218 316.856 cv
593.218 318.056 592.38 319.016 591.183 319.016 cv
589.986 319.016 589.029 318.056 589.029 316.856 cv
589.029 315.776 589.986 314.816 591.183 314.816 cv
cp
599.562 314.816 mo
599.562 314.816 li
600.759 314.816 601.597 315.776 601.597 316.856 cv
601.597 318.056 600.759 319.016 599.562 319.016 cv
598.365 319.016 597.408 318.056 597.408 316.856 cv
597.408 315.776 598.365 314.816 599.562 314.816 cv
cp
607.941 314.816 mo
607.941 314.816 li
609.138 314.816 610.095 315.776 610.095 316.856 cv
610.095 318.056 609.138 319.016 607.941 319.016 cv
606.744 319.016 605.786 318.056 605.786 316.856 cv
605.786 315.776 606.744 314.816 607.941 314.816 cv
cp
616.32 314.816 mo
616.32 314.816 li
617.517 314.816 618.474 315.776 618.474 316.856 cv
618.474 318.056 617.517 319.016 616.32 319.016 cv
615.123 319.016 614.285 318.056 614.285 316.856 cv
614.285 315.776 615.123 314.816 616.32 314.816 cv
cp
624.698 314.816 mo
624.698 314.816 li
625.895 314.816 626.853 315.776 626.853 316.856 cv
626.853 318.056 625.895 319.016 624.698 319.016 cv
623.502 319.016 622.664 318.056 622.664 316.856 cv
622.664 315.776 623.502 314.816 624.698 314.816 cv
cp
633.077 314.816 mo
633.077 314.816 li
634.274 314.816 635.232 315.776 635.232 316.856 cv
635.232 318.056 634.274 319.016 633.077 319.016 cv
631.88 319.016 631.042 318.056 631.042 316.856 cv
631.042 315.776 631.88 314.816 633.077 314.816 cv
cp
641.456 314.816 mo
641.456 314.816 li
642.653 314.816 643.611 315.776 643.611 316.856 cv
643.611 318.056 642.653 319.016 641.456 319.016 cv
640.259 319.016 639.421 318.056 639.421 316.856 cv
639.421 315.776 640.259 314.816 641.456 314.816 cv
cp
649.835 314.816 mo
649.835 314.816 li
651.032 314.816 651.989 315.776 651.989 316.856 cv
651.989 318.056 651.032 319.016 649.835 319.016 cv
648.638 319.016 647.8 318.056 647.8 316.856 cv
647.8 315.776 648.638 314.816 649.835 314.816 cv
cp
658.214 314.816 mo
658.214 314.816 li
659.411 314.816 660.368 315.776 660.368 316.856 cv
660.368 318.056 659.411 319.016 658.214 319.016 cv
657.136 319.016 656.179 318.056 656.179 316.856 cv
656.179 315.776 657.136 314.816 658.214 314.816 cv
cp
666.592 314.816 mo
666.592 314.816 li
667.789 314.816 668.747 315.776 668.747 316.856 cv
668.747 318.056 667.789 319.016 666.592 319.016 cv
665.515 319.016 664.558 318.056 664.558 316.856 cv
664.558 315.776 665.515 314.816 666.592 314.816 cv
cp
674.971 314.816 mo
674.971 314.816 li
676.168 314.816 677.126 315.776 677.126 316.856 cv
677.126 318.056 676.168 319.016 674.971 319.016 cv
673.894 319.016 672.936 318.056 672.936 316.856 cv
672.936 315.776 673.894 314.816 674.971 314.816 cv
cp
683.35 314.816 mo
683.35 314.816 li
684.547 314.816 685.505 315.776 685.505 316.856 cv
685.505 318.056 684.547 319.016 683.35 319.016 cv
682.273 319.016 681.315 318.056 681.315 316.856 cv
681.315 315.776 682.273 314.816 683.35 314.816 cv
cp
691.729 314.816 mo
691.729 314.816 li
692.926 314.816 693.883 315.776 693.883 316.856 cv
693.883 318.056 692.926 319.016 691.729 319.016 cv
690.651 319.016 689.694 318.056 689.694 316.856 cv
689.694 315.776 690.651 314.816 691.729 314.816 cv
cp
700.108 314.816 mo
700.108 314.816 li
701.305 314.816 702.262 315.776 702.262 316.856 cv
702.262 318.056 701.305 319.016 700.108 319.016 cv
699.03 319.016 698.073 318.056 698.073 316.856 cv
698.073 315.776 699.03 314.816 700.108 314.816 cv
cp
708.486 314.816 mo
708.486 314.816 li
709.683 314.816 710.641 315.776 710.641 316.856 cv
710.641 318.056 709.683 319.016 708.486 319.016 cv
707.409 319.016 706.451 318.056 706.451 316.856 cv
706.451 315.776 707.409 314.816 708.486 314.816 cv
cp
.391045 .393769 .400815 rgb
f
grestore
gsave
148.065 59.9355 mo
714.232 59.9355 li
714.232 319.016 li
148.065 319.016 li
cp
eclp
149.262 316.976 mo
154.768 305.696 li
160.394 293.936 li
166.02 282.776 li
171.645 271.016 li
177.152 260.216 li
182.777 248.936 li
188.403 236.816 li
193.909 226.376 li
199.535 216.056 li
205.161 205.736 li
210.667 194.096 li
216.292 181.976 li
216.292 181.856 216.292 181.856 216.412 181.736 cv
222.038 173.216 li
227.544 163.496 li
233.17 155.816 li
238.676 146.576 li
244.302 136.856 li
249.808 126.536 li
249.927 126.416 249.927 126.296 250.047 126.296 cv
255.673 119.216 li
261.179 110.456 li
266.805 103.256 li
266.924 103.016 267.044 102.896 267.283 102.776 cv
272.909 99.0555 li
278.535 95.3355 li
278.056 95.6955 li
283.682 89.0955 li
283.802 88.9755 283.921 88.8555 284.161 88.7355 cv
289.667 85.0155 li
288.948 85.6155 li
294.574 76.2555 li
294.933 75.7755 295.532 75.4155 296.25 75.2955 cv
301.876 74.8155 li
302.235 74.8155 302.594 74.8155 302.833 74.9355 cv
308.339 77.2155 li
308.579 77.3355 308.818 77.4555 309.058 77.6955 cv
314.683 83.3355 li
314.085 82.9755 li
319.711 85.8555 li
320.07 85.9755 320.429 86.3355 320.668 86.6955 cv
326.174 96.0555 li
324.977 95.0955 li
330.603 97.0155 li
330.842 97.1355 331.082 97.2555 331.321 97.3755 cv
336.947 102.056 li
337.067 102.176 337.186 102.296 337.306 102.416 cv
342.932 110.336 li
342.573 110.096 li
348.079 115.256 li
347.72 114.896 li
353.345 118.136 li
359.091 122.096 li
358.732 121.856 li
364.238 124.136 li
363.161 124.016 li
368.786 123.056 li
369.026 123.056 369.265 123.056 369.624 123.176 cv
375.25 124.616 li
375.37 124.616 375.609 124.736 375.729 124.736 cv
381.355 127.976 li
386.98 131.936 li
392.486 135.056 li
392.127 134.936 li
397.753 136.856 li
397.394 136.736 li
402.9 137.576 li
403.139 137.576 403.379 137.696 403.498 137.816 cv
409.124 140.696 li
408.167 140.456 li
413.792 140.456 li
414.152 140.456 414.511 140.576 414.75 140.696 cv
420.256 143.456 li
419.538 143.216 li
425.164 143.696 li
430.789 144.176 li
436.176 144.176 li
436.415 144.176 436.535 144.176 436.774 144.296 cv
442.28 145.736 li
447.786 146.936 li
447.547 146.936 li
453.173 147.416 li
458.439 147.416 li
464.065 147.416 li
464.185 147.416 464.305 147.416 464.424 147.416 cv
470.05 148.376 li
475.556 149.336 li
481.182 150.296 li
486.688 150.776 li
492.074 150.776 li
497.58 150.776 li
497.82 150.776 497.939 150.776 498.059 150.776 cv
503.685 152.096 li
503.445 152.096 li
509.071 152.576 li
514.577 153.056 li
519.964 153.056 li
525.589 153.056 li
531.095 153.056 li
536.721 153.056 li
542.227 152.576 li
542.347 152.576 542.586 152.576 542.706 152.576 cv
548.332 153.536 li
547.494 153.656 li
553 152.216 li
553.12 152.096 553.359 152.096 553.479 152.096 cv
559.105 152.096 li
564.611 151.736 li
570.236 151.736 li
575.742 151.256 li
581.368 150.776 li
581.488 150.776 581.608 150.776 581.727 150.776 cv
587.353 151.256 li
592.62 151.256 li
598.245 151.256 li
603.752 150.776 li
603.871 150.776 603.991 150.776 604.111 150.776 cv
609.617 151.256 li
615.242 151.736 li
620.629 151.736 li
626.135 151.736 li
632 152.096 li
637.386 152.096 li
643.252 152.576 li
648.518 152.576 li
654.144 152.576 li
659.77 152.576 li
665.515 153.056 li
670.901 153.056 li
676.767 153.536 li
682.033 153.536 li
682.153 153.536 682.273 153.536 682.392 153.536 cv
688.018 154.496 li
687.659 154.496 li
693.285 154.496 li
698.911 154.496 li
704.417 154.496 li
710.042 154.496 li
711.239 154.496 712.197 155.456 712.197 156.536 cv
712.197 157.736 711.239 158.696 710.042 158.696 cv
704.417 158.696 li
698.911 158.696 li
693.285 158.696 li
687.659 158.696 li
687.539 158.696 687.539 158.696 687.42 158.696 cv
681.794 157.736 li
682.033 157.736 li
676.408 157.736 li
670.901 157.256 li
665.156 157.256 li
659.77 156.776 li
654.144 156.776 li
648.518 156.776 li
642.892 156.776 li
637.386 156.296 li
631.641 156.296 li
626.135 155.936 li
620.629 155.936 li
614.883 155.936 li
609.258 155.456 li
603.752 154.976 li
604.111 154.976 li
598.245 155.456 li
592.62 155.456 li
586.994 155.456 li
581.368 154.976 li
581.727 154.976 li
576.102 155.456 li
570.236 155.936 li
564.97 155.936 li
559.105 156.296 li
553.479 156.296 li
554.077 156.176 li
548.571 157.616 li
548.212 157.736 547.973 157.736 547.733 157.736 cv
542.108 156.776 li
542.586 156.776 li
536.721 157.256 li
531.095 157.256 li
525.589 157.256 li
519.964 157.256 li
514.218 157.256 li
508.712 156.776 li
503.086 156.296 li
502.967 156.296 502.847 156.296 502.727 156.296 cv
497.102 154.976 li
497.58 154.976 li
492.074 154.976 li
486.329 154.976 li
480.583 154.496 li
474.838 153.536 li
469.452 152.576 li
463.826 151.616 li
464.065 151.616 li
458.439 151.616 li
452.814 151.616 li
447.188 151.136 li
447.068 151.136 446.948 151.136 446.829 151.136 cv
441.203 149.696 li
435.697 148.256 li
436.176 148.376 li
430.43 148.376 li
424.805 147.896 li
419.179 147.416 li
418.939 147.416 418.7 147.296 418.461 147.176 cv
412.955 144.416 li
413.792 144.656 li
408.167 144.656 li
407.927 144.656 407.568 144.536 407.329 144.416 cv
401.703 141.536 li
402.302 141.776 li
396.795 140.936 li
396.676 140.936 396.556 140.816 396.436 140.816 cv
390.811 138.896 li
390.691 138.896 390.571 138.776 390.452 138.776 cv
384.586 135.416 li
379.32 131.696 li
373.694 128.456 li
374.173 128.576 li
368.547 127.136 li
369.385 127.256 li
363.759 128.216 li
363.4 128.216 363.041 128.216 362.682 128.096 cv
357.176 125.816 li
357.056 125.696 356.936 125.696 356.817 125.576 cv
351.311 121.856 li
345.685 118.616 li
345.565 118.496 345.445 118.376 345.326 118.256 cv
339.82 113.096 li
339.7 112.976 339.58 112.976 339.461 112.856 cv
333.835 104.936 li
334.194 105.296 li
328.568 100.616 li
329.286 100.976 li
323.661 99.0555 li
323.182 98.9355 322.823 98.5755 322.464 98.0955 cv
316.958 88.7355 li
317.915 89.5755 li
312.289 86.6955 li
312.05 86.5755 311.811 86.4555 311.691 86.3355 cv
306.065 80.6955 li
306.783 81.1755 li
301.277 78.8955 li
302.235 79.0155 li
296.609 79.4955 li
298.165 78.5355 li
292.539 87.8955 li
292.42 88.1355 292.18 88.3755 291.941 88.4955 cv
286.435 92.2155 li
286.914 91.8555 li
281.288 98.4555 li
281.168 98.5755 280.929 98.6955 280.809 98.8155 cv
275.183 102.536 li
269.558 106.256 li
270.036 105.776 li
264.65 112.736 li
258.905 121.736 li
253.279 128.816 li
253.518 128.576 li
248.012 138.896 li
242.267 148.856 li
236.641 158.336 li
231.255 165.536 li
225.509 175.496 li
219.883 184.016 li
220.003 183.776 li
214.377 195.896 li
208.871 207.776 li
203.245 218.096 li
197.62 228.416 li
192.114 238.616 li
186.488 250.736 li
180.862 262.016 li
175.356 272.816 li
169.73 284.576 li
164.105 295.736 li
158.479 307.496 li
152.973 318.776 li
152.494 319.856 151.177 320.216 150.22 319.736 cv
149.142 319.256 148.783 317.936 149.262 316.976 cv
cp
.136538 .123054 .126659 rgb
f
grestore
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000a000a000a000a63767420687a0000000000ac0000051c6670
676d3e070000000005c80000091a676c796671a700000000342400001828
68656164f7c4000000000ee400000036686865611104000000000f1c0000
0024686d74785b0a000000000f40000000586c6f63610b64000000000f98
0000005c6d6178701381000000000ff4000000207072657052c400000000
101400002410676469720000000000000000000000000000079e0000fe93
0000000000000000000000000050006a0073008000800086008d009300bf
00db006200830093009900a000a600a900b000c100c900d7000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe79056d000c03b7000600130000fffaffedfea6
ffedfeb8050e000600130000fffaffedfe93050e00130420000600130000
fffaffedff10ffee050e00130420000600130000fffaffeefe93ff10feb8
0612000a050e0006000d02d2fffafff301fdfffa023f0006000dff36fffa
fff302870006000f0000fffafff1079efeaffea700000000000000000000
000000500051005a005b005c005d006000610062006400680069006a006b
006c006d006e00680069006e00600067006e00660068005f006100630064
00660068006a006b006c006d006e006f0070006f00720074007500760076
007000720073007400750076006f00700071007200730075007700770078
0079007a007b007c007d007b007c007d00770079007a007c0078007a007c
007d0078007d007e007f008000810082007e007f00810082007e007f0080
008100820083008400850086008700880089008300840085008600870088
0089008300840085008600870088008900890086008700880089008a008b
008c008d008e008f008a008b008c008d008e008f008a008b008c008d008e
008f008d008a008b008c008d008e008f0090009000910092009300940095
009600980099009b009c0090009100920093009400950096009700980099
009a009e009f00a60090009100950098009f009000910096009700bc00c6
00b500ae00af00b6006800690063006a006f00700071006f007000710072
0066006c006d00700079007c007f00830086008700880089008a00740075
00760077007a007b007c007d007e008200850086008a0088008900830078
007b00820083008600870088008900760079007a007c007d007e00830085
00880089008a0073007400750077007a007d00880089008a008b008c008d
008e00900094008b008c008d00910092009300940095008c008d00910095
008f009000910092009300940095008b008c008d008e008f009000910092
009300940095008b008c008d008e008f0090009100920093009600970098
0099009c0096009700980099009a009b009c00960099009a009c00960097
00980099009a009b009c009700980099009a009b009c009700980099009a
009b009c0096009d00a000a1009d009e009f00a000a100a2009d009f00a0
00a1009f00a2009d009e009f00a000a100a2009d009e00a000a1009d009e
00a000a2009d00a300a400a500a600a700a300a400a600a700a300a400a5
00a600a700a600a300a700a800a900aa00ab00ac00ac00a800a900aa00ab
00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae00ad00ae00af00b0
00b100b200b300b400b500b600b700b800ad00ae00ad00ae00af00b000b1
00b200b300b400b500b600b700b800ad00ae00af00b000b100b200b300b4
00b500b600b700b800b300ae00af00b000b200b500b600b700b800b900ba
00bb00bc00be00c000c100c200c200b900ba00bb00bc00bd00be00bf00c0
00c100c200c400ba00bb00be00bf00c000c200c300c400b900ba00bf00c0
00c200c600c700c900ca00cb00cc00cf00c500c700ce00c500c700c800cf
00d000d200d300d7010d00d000d100e900d000fd00d005e4000e00410000
05ba009c009c005e005e4047645f5e5d5c5b5a59585554535251504f4e4d
4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c2826
252423221f181411100f0d0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b0042651582320b00d44235921212d2c20204518684420b0016020
45b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b
2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045
b00325456164b050515845441b2121592d2c2045b0004360442d2c01b006
43b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d
2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0052510
23208af500b0016023edec2d2c01b005251023208af500b0016123edec2d
2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001610110
203c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2c4523456023456023456023766818b08062202d2cb00426b004
26b00425b0042545234520b003266062636820b0032661658a2344442d2c
2045b0005458b040442045b04061441b2121592d2c45b1302f4523456160
b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b003
2545695358441b2121591b2121592d2c45b01443b0006063b0016069442d
2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033
ffe0b134201bb3330034005944442d2cb0164358b00326458a586466b01f
601b64b020606620581b21b04059b001615923586559b02923442310b029
e01b2121212121592d2cb0164358b004254564b020606620581b21b04059
b0016123586559b0292344b00425b00725082058021b0359b0052510b004
252046b0042523423cb0072510b006252046b00425b0016023423c205801
1b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0072508
2058021b0359b00425b003254348b00625b00325b0016043481b21592121
21212121212d2cb0164358b004254564b020606620581b21b04059b00161
23581b6559b0292344b00525b00825082058021b0359b0042510b0052520
46b0042523423cb00425b0072508b0072510b006252046b00425b0016023
423c2058011b0059b0042510b00525b029e0b02920456544b0072510b006
25b029e0b00525b00825082058021b0359b00525b003254348b00425b007
2508b00625b00325b0016043481b2159212121212121212d2c02b0042520
2046b004252342b0052508b003254548212121212d2c02b0032520b00425
08b0022543482121212d2c452320451820b00050205823652359236820b0
40505821b04059235865598a60442d2c4b53234b515a5820458a60441b21
21592d2c4b545820458a60441b2121592d2c4b53234b515a58381b212159
2d2cb000214b5458381b2121592d2cb002435458b0462b1b21212121592d
2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121212159
2d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a582338
1b2121592d2c0020b200400325b0062649618b3812342d2c014623466023
466123201020468a61b8ff80628ab140408a704560683a2d2c208a234964
8a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1
020042b123018851b1400188535a58b910000020885458b2020102436042
59b12401885158b920000040885458b2020202436042b12401885458b202
2002436042004b014b5258b2020802436042591bb940000080885458b202
040243604259b94000008063b80100885458b202080243604259b9400001
0063b80200885458b202100243604259b94000020063b80400885458b202
400243604259595959592d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2c204569442d
0000000100000005bae11234afba5f0f3cf50019080000000000bbeb7ccc
00000000cf7409dbfbfafd8b09ec07b60000000900020001000000000001
00000600fe0001c40aa0fbfafaa009ec0001000000000000000000000000
00000016040e00000000000000000000040e0048040e0065040e00ae040e
0072040e0067040e0030040e0052040e006b040e0063040e005203e800ac
035d00ac03e6000f04ec00ac06d700ac03ad004703fc0024040e006b040e
005200000000000001420000014200000142000002a80000041200000580
000006c0000008a800000a3200000ba400000bb400000cf200000d020000
0dfa00000e9600000f640000103e000011980000133c00001480000015dc
000018280001000000160120001000c3000700020010002f006500001190
241000040001b2090320b80284b40918014a20b80283b40918014a20b802
82b40918014a20b80281b40918014a20b80280b40918014a20b8027fb409
18014a20b8027eb40918014a20b8027db40918014a20b8027cb40918014a
20b8027bb40918014a20b8027ab40918014a20b80279b40918014a20b802
78b40918014a20b80277b40918014a20b80276b40918014a20b80275b409
18014a20b80274b40918014a20b80273b40918014a20b80271b40918014a
20b80270b40918014a20b8026fb40918014a20b8026eb40918014a20b802
6db40918014a20b8026cb40918014a20b8026bb40918014a20b8026ab409
18014a20b80269b40918014a20b80268b40918014a20b80267b40918014a
20b80266b40918014a20b80265b40918014a20b80264b40918014a20b802
63b40918014a20b80262b40918014a20b80261b40918014a20b80260b409
18014a20b8025fb40918014a20b8025eb40918014a20b8025db40918014a
20b8025cb40918014a20b8025bb40918014a20b8025ab40918014a20b802
59b40918014a20b80258b40918014a20b80257b40918014a20b80256b409
18014a20b80255b40918014a20b80254b40918014a20b80253b40918014a
20b80252b40918014a20b80251b40918014a20b80250b40918014a20b802
4fb40918014a20b8024eb40918014a20b8024db40918014a20b8024cb409
18014a20b8024bb40918014a20b8024ab40918014a20b80249b40918014a
20b80248b40918014a20b80247b40918014a20b80246b40918014a20b802
45b40918014a20b80244b40918014a20b80243b40918014a20b80242b409
18014a20b80241b40918014a20b80240b40918014a20b8023fb40918014a
20b8023eb40918014a20b8023db40918014a20b8023cb40918014a20b802
3bb40918014a20b8023ab40918014a20b80239b40918014a20b80238b409
18014a20b80237b40918014a20b80236b40918014a20b80235b40918014a
20b80234b40918014a20b80233b40918014a20b80232b40918014a20b802
31b40918014a20b80230b40918014a20b8022fb40918014a20b8022eb409
18014a20b8022db40918014a20b8022cb40918014a20b8022bb40918014a
20b8022ab40918014a20b80229b40918014a20b80228b40918014a20b802
27b40918014a20b80226b40918014a20b80225b40918014a20b80224b409
18014a20b80223b40918014a20b80222b40918014a20b80221b40918014a
20b80220b40918014a20b8021fb40918014a20b8021eb40918014a20b802
1db40918014a20b8021cb40918014a20b8021bb40918014a20b8021ab409
18014a20b80219b40918014a20b80218b40918014a20b80217b40918014a
20b80216b40918014a20b80215b40918014a20b80214b40918014a20b802
13b40918014a20b80212b40918014a20b80211b40918014a20b80210b409
18014a20b8020fb40918014a20b8020eb40918014a20b8020db40918014a
20b8020cb40918014a20b8020bb40918014a20b8020ab40918014a20b802
09b40918014a20b80208b40918014a20b80207b40918014a20b80206b409
18014a20b80205b40918014a20b80204b40918014a20b80203b40918014a
20b80202b40918014a20b80201b40918014a20b80200b40918014a20b801
ffb40918014a20b801feb40918014a20b801fdb40918014a20b801fcb409
18014a20b801fbb40918014a20b801fab40918014a20b801f9b40918014a
20b801f8b40918014a20b801f7b40918014a20b801f6b40918014a20b801
f5b40918014a20b801f4b40918014a20b801f3b40918014a20b801f2b409
18014a20b801f1b40918014a20b801f0b40918014a20b801efb40918014a
20b801eeb40918014a20b801edb40918014a20b801ecb40918014a20b801
ebb40918014a20b801eab40918014a20b801e9b40918014a20b801e8b409
18014a20b801e7b40918014a20b801e6b40918014a20b801e5b40918014a
20b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20b801
e1b40918014a20b801e0b40918014a20b801dfb40918014a20b801deb409
18014a20b801ddb40918014a20b801dcb40918014a20b801dbb40918014a
20b801dab40918014a20b801d9b40918014a20b801d8b40918014a20b801
d7b40918014a20b801d6b40918014a20b801d5b40918014a20b801d4b409
18014a20b801d3b40918014a20b801d2b40918014a20b801d1b40918014a
20b801d0b40918014a20b801cfb40918014a20b801ceb40918014a20b801
cdb40918014a20b801ccb40918014a20b801cbb40918014a20b801cab409
18014a20b801c9b40918014a20b801c8b40918014a20b801c7b40918014a
20b801c6b40918014a20b801c5b40918014a20b801c4b40918014a20b801
c3b40918014a20b801c2b40918014a20b801c1b40918014a20b801c0b409
18014a20b801bfb40918014a20b801beb40918014a20b801bdb40918014a
20b801bcb40918014a20b801bbb40918014a20b801bab40918014a20b801
b9b40918014a20b801b8b40918014a20b801b7b40918014a20b801b6b409
18014a20b801b5b40918014a20b801b4b40918014a20b801b3b40918014a
20b801b2b40918014a20b801b1b40918014a20b801b0b40918014a20b801
afb40918014a20b801aeb40918014a20b801adb40918014a20b801acb409
18014a20b801abb40918014a20b801aab40918014a20b801a9b40918014a
20b801a8b40918014a20b801a7b40918014a20b801a6b40918014a20b801
a5b40918014a20b801a4b40918014a20b801a3b40918014a20b801a2b409
18014a20b801a1b40918014a20b801a0b40918014a20b8019fb40918014a
20b8019eb40918014a20b8019db40918014a20b8019cb40918014a20b801
9bb40918014a20b8019ab40918014a20b80199b40918014a20b80198b409
18014a20b80197b40918014a20b80196b40918014a20b80195b40918014a
20b80194b40918014a20b80193b40918014a20b80192b40918014a20b801
91b40918014a20b80190b40918014a20b8018fb40918014a20b8018eb409
18014a20b8018db40918014a20b8018cb40918014a20b8018bb40918014a
20b8018ab40918014a20b80189b40918014a20b80188b40918014a20b801
87b40918014a20b80186b40918014a20b80185b40918014a20b80184b409
18014a20b80183b40918014a20b80182b40918014a20b80181b40918014a
20b80180b40918014a20b8017fb40918014a20b8017eb40918014a20b801
7db40918014a20b8017cb40918014a20b8017bb40918014a20b8017ab409
18014a20b80179b40918014a20b80178b40918014a20b80177b40918014a
20b80176b40918014a20b80175b40918014a20b80174b40918014a20b801
73b40918014a20b80172b40918014a20b80171b40918014a20b80170b409
18014a20b8016fb40918014a20b8016eb40918014a20b8016db40918014a
20b8016cb40918014a20b8016bb40918014a20b8016ab40918014a20b801
69b40918014a20b80168b40918014a20b80167b40918014a20b80166b409
18014a20b80165b40918014a20b80164b40918014a20b80163b40918014a
20b80162b40918014a20b80161b40918014a20b80160b40918014a20b801
5fb40918014a20b8015eb40918014a20b8015db40918014a20b8015cb409
18014a20b8015bb40918014a20b8015ab40918014a20b80159b40918014a
20b80158b40918014a20b80157b40918014a20b80156b40918014a20b801
55b40918014a20b80154b40918014a20b80153b40918014a20b80152b409
18014a20b80150b40918014a20b8014fb40918014a20b8014eb40918014a
20b8014cb40918014a20b8014bb40918014a20b8014ab40918014a20b801
49b40918014a20b80148b40918014a20b80147b40918014a20b80146b409
18014a20b80145b40918014a20b80144b40918014a20b80143b30918014a
b80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb802
80b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb2
1e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d43
1fb80277b21d431fb80276b21d431fb80275b21d411fb80274b21d431fb8
0273b21d431fb80272b21d411fb80271b21d421fb80270b21d421fb8026f
b21d421fb8026eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c
451fb8026ab21c451fb80269b21c451fb80268b21c451fb80267b21c451f
b80266b21c441fb80265b21c451fb80264b21c451fb80263b21c451fb802
62b21c451fb80261b21c451fb80260b21c451fb8025fb21c451fb8025eb2
1c441fb8025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c45
1fb80259b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb8
0255b21c451fb80254b21c451fb80253b21c451fb80252b21c451fb80251
b21c451fb80250b21c451fb8024fb21c451fb8024eb21c451fb8024db21c
451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b491f
b80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb802
44b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b2
1b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b
1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb8
0237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb80233
b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b
4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1f
b8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb802
26b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b2
1b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c
1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb8
0219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215
b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a
4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1f
b8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb802
08b21a4f1fb80207b21a4f1fb80206b219501fb80205b219511fb80204b2
19511fb80203b219501fb80202b219511fb80201b219511fb80200b21951
1fb801ffb219511fb801feb219501fb801fdb219511fb801fcb219511fb8
01fbb219511fb801fab219501fb801f9b219511fb801f8b219511fb801f7
b219511fb801f6b219511fb801f5b218541fb801f4b218531fb801f3b218
541fb801f2b218541fb801f1b218541fb801f0b218531fb801efb218541f
b801eeb218541fb801edb218541fb801ecb218531fb801ebb218531fb801
eab218541fb801e9b218541fb801e8b218541fb801e7b218541fb801e6b2
18531fb801e5b218541fb801e4b218531fb801e3b218541fb801e2b21854
1fb801e1b218541fb801e0b218531fb801dfb218531fb801deb218541fb8
01ddb218541fb801dcb218541fb801dbb218541fb801dab218531fb801d9
b218541fb801d8b218541fb801d7b217571fb801d6b217561fb801d5b217
561fb801d4b217571fb801d3b217571fb801d2b217571fb801d1b217571f
b801d0b217561fb801cfb217561fb801ceb217571fb801cdb217571fb801
ccb217571fb801cbb217571fb801cab217561fb801c9b217561fb801c8b2
17571fb801c7b217571fb801c6b217571fb801c5b217571fb801c4b21757
1fb801c3b217561fb801c2b217571fb801c1b217571fb801c0b217571fb8
01bfb217561fb801beb217561fb801bdb217571fb801bcb217571fb801bb
b217571fb801bab217571fb801b9b217571fb801b8b217561fb801b7b217
571fb801b6b217571fb801b5b217571fb801b4b217571fb801b3b2163f1f
b801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801
aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2
163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b
1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb8
01a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019d
b2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b216
5b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1f
b80194b2163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb801
90b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2
163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b
1fb80187b2165b1fb80186b215611fb80185b215621fb80184b215621fb8
0183b215661fb80182b215661fb80181b215551fb80180b215451fb8017f
b215361fb8017eb215361fb8017db215611fb8017cb215621fb8017bb215
621fb8017ab215641fb80179b215661fb80178b215661fb80177b215661f
b80176b215661fb80175b215661fb80174b215661fb80173b215451fb801
72b215621fb80171b215621fb80170b215631fb8016fb215641fb8016eb2
15661fb8016db215661fb8016cb215661fb8016bb215661fb8016ab21566
1fb80169b215621fb80168b215621fb80167b215611fb80166b215641fb8
0165b215641fb80164b215661fb80163b215661fb80162b215661fb80161
b215661fb80160b215661fb8015fb215661fb8015eb215551fb8015db215
451fb8015cb215451fb8015bb215361fb8015ab215611fb80159b215621f
b80158b215621fb80157b215631fb80156b215641fb80155b215661fb801
54b215661fb80153b215661fb80152b215661fb80151b214401fb80150b2
14551fb8014fb214561fb8014eb214831fb8014db2142d1fb8014cb21440
1fb8014bb214401fb8014ab214411fb80149b214401fb80148b214401fb8
0147b214411fb80146b2147e1fb80145b214871fb80144b2147f1fb80143
b214801fb80142b212461fb80141b212461fb80140b212461fb8013fb212
461fb8013eb212441fb8013db212461fb8013cb211591fb8013bb211591f
b8013ab2115b1fb80139b2115b1fb80138b211471fb80137b211581fb801
36b2115a1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb80132b2
11471fb80131b211551fb80130b211571fb8012fb211571fb8012eb21158
1fb8012db211591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb8
0129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb80125
b211561fb80124b211561fb80123b211571fb80122b211581fb80121b211
591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1f
b8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb801
18b2105e1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2
105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f
1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8
010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107
b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f1fb80103b210
5f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f
631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641f
f60f641ff50f641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f
641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641f
e70f641fe60e671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e
681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681f
d80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d
2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1f
c90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d
311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c
731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c731f
b30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b
7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1f
a40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b
7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f
950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a
671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255805581ab8055
7f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a
557bab7a557955775578ab7755ba028600660285403c5576ab7555047514
75747503f47501ab750144750130750102007510752075030c7455725573
ab7255007250728072b072043bb072e072020072010ab8ffc0b3721b1e46
b8ffc0407c720d104671556f5570ab6f556e666d556a03251f6938675568
ab67556638645565ab645563386255613860555f385d555eab5d555c385a
555bab5a55593858555703251f5638545555ab54555338515552ab51554f
384e554e03251f4d384b554cab4b554a38485549ab485547384655450338
1f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b
04001bb01bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f
18cf18024018292c460f17cf17df17ef1704134017292e46001610162016
0315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc040
4d162326460f15010f151f1502451f15010011e011f0110315bf10cf1002
0f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e313746
0f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f
0b02553f0b4f0b02400b3f4346400b2d3046000301200101000110012001
0308b8ffc0b301151f46b80100b316010501b80190b154532b2b4bb80800
524bb008505bb00188b02553b00188b040515ab00688b000555a5b58b101
018e59b101024354b0144b515a58b101018e59858d8d00421d4bb01d5358
b0a01d594bb0805358b0401d594bb0ff5358b0001db1160042592b5e7375
732b2b745e732b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e
732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e73
5f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064
02830064028200640281006402800064027f0064027e0064027d0064027c
0064027b0064027a00640279006402780064027700640276006402750064
02740064027300640271006402700064026f0064026e0064026d0064026c
0064026b0064026a00640269006402680064026700640266006402650064
0264006402630064026200640261006402600064025f0064025e0064025d
0064025c0064025b0064025a006402590064025800640257006402560064
025500640254006402530064025200640251006402500064024f0064024e
0064024d0064024c0064024b0064024a0064024900640248006402470064
02460064024500640244006402430064024200640241006402400064023f
0064023e0064023d0064023c0064023b0064023a00640239006402380064
023700640236006402350064023400640233006402320064023100640230
0064022f0064022e0064022d0064022c0064022b0064022a006402290064
022800640227006402260064022500640224006402230064022200640221
006402200064021f0064021e0064021d0064021c0064021b0064021a0064
021900640218006402170064021600640215006402140064021300640212
00640211006402100064020f0064020e0064020d0064020c0064020b0064
020a00640209006402080064020700640206006402050064020441ff0064
0203006402020064020100640200006401ff006401fe006401fd006401fc
006401fb006401fa006401f9006401f8006401f7006401f6006401f50064
01f4006401f3006401f2006401f1006401f0006401ef006401ee006401ed
006401ec006401eb006401ea006401e9006401e8006401e7006401e60064
01e5006401e4006401e3006401e2006401e1006401e0006401df006401de
006401dd006401dc006401db006401da006401d9006401d8006401d70064
01d6006401d5006401d4006401d3006401d2006401d1006401d0006401cf
006401ce006401cd006401cc006401cb006401ca006401c9006401c80064
01c7006401c6006401c5006401c4006401c3006401c2006401c1006401c0
006401bf006401be006401bd006401bc006401bb006401ba006401b90064
01b8006401b7006401b6006401b5006401b4006401b3006401b2006401b1
006401b0006401af006401ae006401ad006401ac006401ab006401aa0064
01a9006401a8006401a7006401a6006401a5006401a4006401a3006401a2
006401a1006401a00064019f0064019e0064019d0064019c0064019b0064
019a00640199006401980064019700640196006401950064019400640193
0064019200640191006401900064018f0064018e0064018d0064018c0064
018b0064018a006401890064018800640187006401860064018500644180
0184006401830064018200640181006401800064017f0064017e0064017d
0064017c0064017b0064017a006401790064017800640177006401760064
017500640174006401730064017200640171006401700064016f0064016e
0064016d0064016c0064016b0064016a0064016900640168006401670064
01660064016500640164006401630064016200640161006401600064015f
0064015e0064015d0064015c0064015b0064015a00640159006401580064
01570064015600640155006401540064015300640152006401500064014f
0064014e0064014c0064014b0064014a0064014900640148006401470064
014600640145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[6185 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 322 3 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
1 680 4 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>PBAAAA+Calibri AddT42Char 
1 1042 5 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
1 1408 6 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
1 1728 7 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
1 2216 8 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
1 2610 9 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>PBAAAA+Calibri AddT42Char 
1 5248 20 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>PBAAAA+Calibri AddT42Char 
1 2980 10 <ffff006bffed03bd0520020600140000>PBAAAA+Calibri AddT42Char 
1 2996 11 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>PBAAAA+Calibri AddT42Char 
1 5596 21 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>PBAAAA+Calibri AddT42Char 
1 3314 12 <ffff0052ffed03ba0521020600150000>PBAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
/g8 8 def
/g9 9 def
/g10 10 def
/g11 11 def
/g12 12 def
end
PBAAAA+Calibri /Encoding get
dup 32 /g3 put
dup 33 /g4 put
dup 34 /g5 put
dup 35 /g6 put
dup 36 /g7 put
dup 37 /g8 put
dup 38 /g9 put
dup 39 /g10 put
dup 40 /g11 put
dup 41 /g12 put
pop
end
%ADOEndSubsetFont
/FHPXXF+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/FHPXXF+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g11 /g12 214{/.notdef}rp]
FHPXXF+Calibri nf
FHPXXF+Calibri*1 [18.7009 0 0 -18.7482 0 0 ]msf
121.466 323.158 mo
( )sh
111.947 299.721 mo
(! )
[9.46259 0 ]xsh
102.427 276.284 mo
("  )
[9.46259 9.68888 0 ]xsh
102.427 252.848 mo
("! )
[9.46259 9.68888 0 ]xsh
102.427 229.411 mo
(#  )
[9.46259 9.68888 0 ]xsh
102.427 205.975 mo
(#! )
[9.46259 9.68888 0 ]xsh
102.427 182.538 mo
($  )
[9.46259 9.68888 0 ]xsh
102.427 159.101 mo
($! )
[9.46259 9.68888 0 ]xsh
102.427 135.665 mo
(%  )
[9.46259 9.68888 0 ]xsh
102.427 112.228 mo
(%! )
[9.46259 9.68888 0 ]xsh
102.427 88.7912 mo
(!  )
[9.46259 9.68888 0 ]xsh
102.427 65.3552 mo
(!! )
[9.46259 9.68888 0 ]xsh
146.437 347.629 mo
( )sh
174.388 347.629 mo
(!)sh
197.579 347.629 mo
(" )
[9.46259 0 ]xsh
225.53 347.629 mo
("!)
[9.46259 0 ]xsh
253.481 347.629 mo
(# )
[9.46257 0 ]xsh
281.432 347.629 mo
(#!)
[9.46259 0 ]xsh
309.383 347.629 mo
($ )
[9.46259 0 ]xsh
337.334 347.629 mo
($!)
[9.46259 0 ]xsh
365.285 347.629 mo
(% )
[9.46259 0 ]xsh
393.236 347.629 mo
(%!)
[9.46259 0 ]xsh
421.187 347.629 mo
(%&)
[9.46259 0 ]xsh
449.137 347.629 mo
(!%)
[9.46259 0 ]xsh
477.088 347.629 mo
(!&)
[9.46259 0 ]xsh
505.039 347.629 mo
('%)
[9.46259 0 ]xsh
532.99 347.629 mo
('&)
[9.46259 0 ]xsh
560.941 347.629 mo
(\(%)
[9.46259 0 ]xsh
588.892 347.629 mo
(\(&)
[9.46259 0 ]xsh
616.843 347.629 mo
(\)%)
[9.46259 0 ]xsh
644.794 347.629 mo
(\)&)
[9.46259 0 ]xsh
672.745 347.629 mo
(&%)
[9.46259 0 ]xsh
700.695 347.629 mo
(&&)
[9.46259 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri-Bold
Type42DictBegin
[<00010000000a000a000a000a6376742016df0000000000ac000006086670
676de7920000000006b400000913676c7966fc9200000000266c000010e4
68656164f7b6000000000fc8000000366868656110c50000000010000000
0024686d74783bad000000001024000000446c6f63610783000000001068
000000486d6178700ec10000000010b000000020707265701f3800000000
10d00000159c676469720000000000000000000000000000079e0000fe93
0000000000000000000000810081009c00ab00b500ba00c100ca00d300f3
010a0060008500bf00e300ea00f200fb010001070115011c012900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe83056d000d03c0000600170000fffaffe9fea9
ffe90000050e000600170000fffaffe9fe93050e00170426000600170000
fffaffe9ff12ffed050e00170426000600170000fffaffe9fe93feb8fece
060b0010050e0006001002cbfffafff001edfffa023f00060010ff36fffa
fff00287000600100000fffafff0079efeaffe9f00000000000000000000
000000700072007500780079007a007b007d007e007f0083008600870088
00890085007f0086008b008c008d008e008f009000910092009300940095
0096009700980099009a009b009c009d009e009f009200930094009b009c
009e009e00960099009a009d009e00a200a600a900ac00a200a300a400a5
00a700a800a900aa00ab00ac00ae00a300a500a700a800aa00ab00ac00ad
00ae00a000a100a300a600a700a900aa00ac00ad00af00af00b000b100b2
00b300b400b500af00af00b000b200b300b400b500b800c000b600b700b8
00b900ba00bb00bc00bd00be00bf00c000c100c200b900ba00bc00bd00bf
00c000c100c200b600b700b800b900ba00bb00bc00bd00be00bf00c000c1
00c200c000c100c200c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf
00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00c500c8
00c900ca00cb00ce00cf00d000d100d200d300d400d500d600d700d900db
00de00df00e000e200e300ec00d000d100d200d300d400d500d600d700d8
00d900da00db00dd00de00df00e000e100e300e500e900ec00ed00d100d3
00d400d500d800d900da00dc00e000e100e800d000d100d400d600e000e4
010800f5010200fb00ff0108008f00900096009200930099009000910097
0098009a009d00a400a600a700a800a900af009a00a200a300a700a900aa
00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a00aa00ac00ad00ae
00af00b100b900bb00bc00bd00be00c100c200c300c400c500c600c700c8
00c900ca00cb00ce00b300b400b500b600b700b800bc00c200c500c800ca
00cb00cd00ce00cf00d000c700b700b800b900bb00bc00be00c600c700c8
00c900cb00cf00d000b200b600b700c200c400c500c600c700cb00cc00cd
00ce00cf00d000d100d400d500d700d800d900da00db00dc00de00df00e0
00e200e300e500e600d100d300d600d700d800da00db00dc00dd00de00df
00e000e100e200e300e400e500d100d200d400d500da00db00dd00de00df
00e000e100e200e600d200d300d400d700d800dd00de00e000e100e200e3
00e400e500e600d200da00e100e900ea00ec00e800e900ea00eb00ec00ed
00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed00ee00ef00f500ee
00ef00f000f100f200f300f400f500f600ee00f000f200ef00f000f100f2
00f300f400f500f600ee00ef00f000f100f200f300f400f500f600f700f7
00f800f900fa00fb00fc00fd00f700f800f900fa00fb00fd00f700f800f9
00fa00fb00fc00fd00fd00fe00ff010001010102010300fe010001010102
010300fe00ff010001010102010301020103010401050106010701080109
010a010c010d010e010f01100107010401050106010701080109010a010b
010d010e010f01100111010401050106010701080109010a010b010c010d
010e010f0110011101040105010601070109010e010f0112011301140115
01170118011a011b011c011d011e011f0121012201120113011401150117
0119011b011c011d011e0120012101230124012501130114011501160117
01180119011a011b011c011d011f01200117011c011d011e012001210129
013001770129012b012e012f013001310134013501370139012b012d0130
01320134013a012e01300134013a014200500062006c00fa05e802cc0114
011400a000b140465f5e5d5c5b5a59585554535251504f4e4d4c4b4a4948
47464544434241403f3e3d3c3b3a39383736352f2e2d2c2826252423221f
181411100f0d0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b004
2651582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b028
2370b101283e01b0282370b10228453ab10200080d2d2c2045b003254561
64b050515845441b2121592d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c
234445b02b23442d2c4b525845441b2121592d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b08051580c
6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648b
b81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2c
4523456023456023456023766818b08062202d2cb00426b00426b00425b0
042545234520b003266062636820b0032661658a2344442d2c2045b00054
58b040442045b04061441b2121592d2c45b1302f4523456160b001606944
2d2c4b5158b02f2370b01423421b2121592d2c4b515820b0032545695358
441b2121591b2121592d2c45b01443b0006063b0016069442d2cb02f4544
2d2c452320458a60442d2c45234560442d2c4b235158b90033ffe0b13420
1bb3330034005944442d2cb0164358b00326458a586466b01f601b64b020
606620581b21b04059b001615923586559b02923442310b029e01b212121
2121592d2cb0164358b004254564b020606620581b21b04059b001612358
6559b0292344b00425b00725082058021b0359b0052510b004252046b004
2523423cb0072510b006252046b00425b0016023423c2058011b0059b005
2510b00425b029e0b0072510b00625b029e0b00425b00725082058021b03
59b00425b003254348b00625b00325b0016043481b215921212121212121
2d2cb0164358b004254564b020606620581b21b04059b0016123581b6559
b0292344b00525b00825082058021b0359b0042510b005252046b0042523
423cb00425b0072508b0072510b006252046b00425b0016023423c205801
1b0059b0042510b00525b029e0b02920456544b0072510b00625b029e0b0
0525b00825082058021b0359b00525b003254348b00425b0072508b00625
b00325b0016043481b2159212121212121212d2c02b00425202046b00425
2342b0052508b003254548212121212d2c02b0032520b0042508b0022543
482121212d2c452320451820b00050205823652359236820b040505821b0
4059235865598a60442d2c4b53234b515a5820458a60441b2121592d2c4b
545820458a60441b2121592d2c4b53234b515a58381b2121592d2cb00021
4b5458381b2121592d2cb002435458b0462b1b21212121592d2cb0024354
58b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb00243
5458b0492b1b212121592d2c208a08234b538a4b515a5823381b2121592d
2c0020b200400325b0062649618b3812342d2c0146234660234661232010
20468a61b8ff80628ab140408a704560683a2d2c208a2349648a2353583c
1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123
018851b1400188535a58b910000020885458b202010243604259b1240188
5158b920000040885458b2020202436042b12401885458b2022002436042
004b014b5258b2020802436042591bb940000080885458b2020402436042
59b94000008063b80100885458b202080243604259b94000010063b80200
885458b202100243604259b94000020063b80400885458b2024002436042
59595959592d2c451868234b51582320452064b04050587c59688a605944
2d2cb00016b00225b0022501b001233e00b002233eb10102060cb00a2365
42b00b234201b001233f00b002233fb10102060cb006236542b0072342b0
0116012d2c20b82000628a6023622d2cb0072558001b0159b0042510b003
25b0022520b8ffff545821cd1bed5921b006255cb006255a58b0092b5920
b005254ab0042547b004254760b0062547b0806361b00225b0005558b003
25b00725496359b0082558001b0159b00425b0062549b009255cb009255a
58b0092b59b0072546b0806361b0032520b0005558631b2159612320b000
5558b080631b21b08059b0592bb006255c586959b00425202010b0004823
3ab0062658001b0159b0052658b003252f598a12233221212d2cb00625b0
0a2587b00625b009254ab0005358b00625b00a251bb00925b0072559b002
25b00225070cb005256323b00625636020b94000040063535821b00426b0
0426b00a1bb94000040063655158b0042665b0042665b00a1bb00426b004
26b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525
b0052507595920b0005558b00525b0052587b00725b007250bb0092510b0
0b25b0092620b8ffff545821cd1bed59b00525b0052507b00825b00b2549
23b00625b0062587b00a2510b00b25c15920b00051b800522378b00161b0
0225b00725b0072507b00a25b00d254961b08062b00525b005250bb00a25
2338b00625b0062587b00825b008250bb00a2510b00b25c4b00625b00625
07b00925b00c2549b0032554b8ffa723792121212121212121212121212d
2c23b0005458b9400000001bb900004000598ab0005458b9400000001bb9
0000400059b05b2b2d2c08b0005458b9400000001bb900004000590db05b
2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb0
0426b00426080db00426b00426080db05b2b2d00000100000005bae151da
afba5f0f3cf50019080000000000bbeb7ccc00000000cf7409dbfbdafd8d
09ec07c5000100090002000100000000000100000600fe0001c40aa0fbda
fa8609ec000100000000000000000000000000000011040e000000000000
0000000001cf000003c8003f03f30047044b004b0407004a01f7006b01f7
007e044b007e044d00480331004903c9001603fc001c03f6000c0682007e
000000000000013c0000013c0000013c0000013c000002b40000048c0000
05c40000075c000008060000088a0000099800000a7e00000c2400000d04
00000ea200000f60000010e40001000000110120001000bd000700020010
002f006000000c63159c00040001b10903b802f9b21e1d1fb802f8b21e2b
1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb8
02f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb802ef
b21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e
2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1f
b802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3b21e2c1fb802
e2b21e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d2f1fb802deb2
1d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191fb802dab21d2f
1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb8
02d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1
b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d121fb802cdb21d
121fb802ccb21d121fb802cbb21d121fb802cab21d191fb802c9b21d2f1f
b802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802
c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b2
1d2f1fb802bfb21d121fb802beb21d121fb802bdb21d2f1fb802bcb21d2f
1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb8
02b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3
b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c321fb802afb21c
331fb802aeb21c331fb802adb21c331fb802acb21c331fb802abb21c331f
b802aab21c311fb802a9b21c311fb802a8b21c321fb802a7b21c321fb802
a6b21c321fb802a5b21c321fb802a4b21c321fb802a3b21c321fb802a2b2
1c331fb802a1b21c331fb802a0b21c331fb8029fb21c331fb8029eb21c33
1fb8029db21c331fb8029cb21c311fb8029bb21c311fb8029ab21c321fb8
0299b21c321fb80298b21c321fb80297b21c321fb80296b21c321fb80295
b21c331fb80294b21c331fb80293b21c331fb80292b21c331fb80291b21c
331fb80290b21c331fb8028fb21c331fb8028eb21c311fb8028db21c321f
b8028cb21c321fb8028bb21c321fb8028ab21c321fb80289b21c321fb802
88b21c331fb80287b21c331fb80286b21c331fb80285b21c331fb80284b2
1c331fb80283b21c331fb80282b21b341fb80281b21b341fb80280b21b34
1fb8027fb21b341fb8027eb21b341fb8027db21b341fb8027cb21b341fb8
027bb21b341fb8027ab21b341fb80279b21b341fb80278b21b341fb80277
b21b341fb80276b21b341fb80275b21b341fb80274b21b341fb80273b21b
341fb80272b21b341fb80271b21b341fb80270b21b341fb8026fb21a351f
b8026eb21a351fb8026db21a351fb8026cb21a351fb8026bb21a351fb802
6ab21a351fb80269b21a351fb80268b21a351fb80267b21a351fb80266b2
1a351fb80265b21a351fb80264b21a351fb80263b21a351fb80262b21a35
1fb80261b21a351fb80260b21a351fb8025fb21a351fb8025eb21a351fb8
025db21a351fb8025cb21a351fb8025bb21a351fb8025ab21a351fb80259
b219371fb80258b219371fb80257b219371fb80256b219371fb80255b219
371fb80254b219371fb80253b219371fb80252b219371fb80251b219371f
b80250b219371fb8024fb219371fb8024eb219371fb8024db219371fb802
4cb219371fb8024bb219371fb8024ab219371fb80249b219371fb80248b2
19371fb80247b219371fb80246b219371fb80245b219371fb80244b21937
1fb80243b219371fb80242b219371fb80241b219371fb80240b219371fb8
023fb219371fb8023eb219371fb8023db219371fb8023cb219371fb8023b
b219371fb8023ab219371fb80239b218391fb80238b218391fb80237b218
391fb80236b218391fb80235b218391fb80234b218391fb80233b218391f
b80232b218391fb80231b218391fb80230b218391fb80301b2182e1fb802
2fb218391fb8022eb218391fb8022db218391fb8022cb218391fb8022bb2
18391fb8022ab218391fb80229b218391fb80228b218391fb80227b21839
1fb80226b218391fb80225b2173b1fb80224b2173b1fb80223b217321fb8
0222b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2173b1fb8021e
b2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b1fb8021ab217
3b1fb80219b2173b1fb80218b2173b1fb80217b2173b1fb80216b2173b1f
b80215b217321fb80214b2173a1fb80213b2173b1fb80212b2173b1fb802
11b2173b1fb80210b2173b1fb8020fb2173b1fb8020eb2173b1fb8020db2
173b1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1fb80209b21732
1fb80208b217321fb80207b2173b1fb80206b2173b1fb80205b2173b1fb8
0204b2173b1fb80203b2173b1fb80202b2173b1fb80201b2173b1fb80200
b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b1fb801fcb217
3b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b1fb801f8b2173b1f
b801f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4b2173b1fb801
f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0b2173b1fb801efb2
173b1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1fb801ebb2173b
1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1fb801e7b217321fb8
01e6b216231fb801e5b216231fb801e4b216371fb801e3b216371fb801e2
b216381fb801e1b216381fb801e0b216431fb801dfb216441fb801deb216
441fb801ddb216441fb801dcb216451fb801dbb216461fb801dab216461f
b801d9b216461fb801d8b216231fb801d7b216231fb801d6b216381fb801
d5b216431fb801d4b216431fb801d3b216431fb801d2b216441fb801d1b2
16461fb801d0b216461fb801cfb216461fb801ceb216461fb801cdb21646
1fb801ccb216461fb801cbb216431fb801cab216231fb801c9b216231fb8
01c8b216371fb801c7b216371fb801c6b216381fb801c5b216421fb801c4
b216431fb801c3b216441fb801c2b216451fb801c1b216461fb801c0b216
461fb801bfb216461fb801beb216461fb801bdb216461fb801bcb216461f
b801bbb216461fb801bab216371fb801b9b216381fb801b8b216421fb801
b7b216431fb801b6b216431fb801b5b216431fb801b4b216441fb801b3b2
16441fb801b2b216441fb801b1b216451fb801b0b216451fb801afb21645
1fb801aeb216461fb801adb216461fb801acb216461fb801abb216461fb8
01aab216461fb801a9b215341fb801a8b215411fb801a7b215411fb801a6
b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b215521fb801a2b215
401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8019eb215521f
b8019db2154d1fb8019cb215401fb8019bb2154d1fb8019ab2154e1fb801
99b2154e1fb80198b2154f1fb80197b2154f1fb80196b215501fb80195b2
15521fb80194b215521fb80193b215521fb80192b215411fb80191b2154f
1fb80190b215501fb8018fb215501fb8018eb215511fb8018db215521fb8
018cb215521fb8018bb215521fb8018ab214581fb80189b214591fb80188
b2145c1fb80187b2145d1fb80186b2144a1fb80185b2145b1fb80184b214
5c1fb80183b214591fb80182b2145d1fb8018140af145d1ff00f451fef0e
481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b561f
b00b561faf0b561fae0b561fad0b561fac0b561fab0b561faa0b561fa90b
561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b561fa20b561f
a10b561fa00b561f9f0b561f9e0a681f9a0a681f990a681f980a681f970a
681f960a681f950a681f940a681f930a681f920a681f910a681f9009681f
8f09681f8e09681f8d09681f8c09681f410902fc02fa0056001f02fb02fa
0068001f017fb213321fb8017eb212371fb80174b212371fb80173b21142
1fb80172b211421fb80171b211421fb80170b211421fb8016fb211421fb8
016eb211421fb8016db211421fb8016cb211421fb8016bb211421fb8016a
b211421fb8013cb211421fb8013bb210421fb8013ab210421fb80139b210
421fb80138b210421fb80137b210421fb80136b210421fb80135b210421f
b80134b210421fb80133b210421fb80132b20f451fb80131b20f451fb801
30b20f451fb80112b20f451fb80111b20f451fb80110b20f451fb8010fb2
0f451fb8010eb20f451fb8010db20e481fb8010cb20e481fb8010bb20e48
1fb8010ab20e481fb80109b20e481fb80108b20e481fb80107b20d4a1fb8
0106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e
1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd8
0b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba0b561f9d0a68
1f9c0a681fb80180b213321fb8017ab211401fb80179b211421fb80178b2
11421fb80177b211421fb80176b211421fb80175b211421fb80143b21142
1fb80142b210421fb80141b210421fb80140b210421fb8013fb210421fb8
013eb210421fb8013db20f451fb80115b20f451fb80114b20f451fb80113
b20f451fb903030302b2401fa4be030200b4030200c4030200030300b213
321fb8017bb213321fb80153b212371fb80152b211401fb80151b211401f
b80150b211401fb8014fb211401fb8014eb211401fb8014db211401fb801
4cb211401fb8014bb211401fb8014ab211401fb80149b211401fb80148b2
11401fb80147b211401fb80146b211401fb80145b211401fb80144b21140
1fb80122b211401fb80121b210421fb80120b210421fb8011fb210421fb8
011eb210421fb8011db210421fb8011cb210421fb8011bb210421fb8011a
b210421fb80119b210421fb80118b20f451fb80117b20f451fb80116409b
0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff80e481ff70e48
1ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe6
0d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e
1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc4
0c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb40b561fb30b56
1f9b0a681fb802fdb212371fb8017db212371fb8017cb212371fb80169b2
112e1fb80168b2112e1fb80167b211401fb80166b211401fb80165b21140
1fb80164b211401fb80163b211401fb80162b211401fb80161b211401fb8
0160b211401fb8015fb211401fb8015eb211401fb8015db211401fb8015c
b211401fb8015bb211401fb8015ab211401fb80159b211401fb80158b211
401fb80157b211401fb80156b211401fb80155b211401fb80154b211401f
b8012fb211401fb8012eb210421fb8012db210421fb8012cb210421fb801
2bb210421fb8012ab210421fb80129b210421fb80128b210421fb80127b2
10421fb80126b210421fb80125b20f451fb80124b20f451fb80123b20f45
1fb80105b20f451fb80104b20f451fb80103b20f451fb80102b20f451fb8
0101b20e481fb8010040a20e481fff0e481ffe0e481fe80c4e1fd60c4e1f
d50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b
561fb90b561f8503251f84032e1f83012e1f8248805581ab80557f487d55
7eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab
7a55047a147a020a7948775578ab77550b77010c764875555475e475f475
0314755475647574759475d475e47507a475b475c47503b8ffc040127538
3b46807590750214757475020075010fb8ffc04021750b0e467448725573
ab725504723472023bf47201e07201023072015072607202b8ffc0b37224
2846b8ffc0403572161a461072307240720371486f5570ab6f554f6f6f6f
7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e486d55df6d0100
bc02ff001002ff00c002ffb2030a6fbb02fe000100ef02fe40ff016b032e
1f6a03251f692e675568ab6755662e645565ab6455632e6255612e60555f
2e5d555eab5d555c2e5a555bab5a55592e58555703251f562e545555ab54
55532e515552ab51554f2e4e554e03251f4d2e4b554cab4b554a2e485549
ab4855504801472e46554503361f001f01001e01001e701e801ef01e040b
601d701d02701de01df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f
1a020f1a8f1a020f191f198f199f19af19050f198f199f19030c70128012
02701180110230114011d011e011040011a011020f8f0f9f0faf0f034f0f
5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e
0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e
3246400d2427463f0c4f0c5f0c039f0c01400c262946ef0aff0a02400a24
2746ef09ff0902ff09010003012001010001100120010308b8ffc0b30115
1f46b80100b316010501b80190b154532b2b4bb807ff524bb008505bb001
88b02553b00188b040515ab00688b000555a5b58b101018e59b101024354
b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb08053
58b0401d594bb0ff5358b0001db1160042592b5e73757373742b732b7374
2b2b73745e732b5e7374757374755e73747573015e737473747575747374
5e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b73745e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373
732b7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[4325 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 3332 14 <0002001cfffa03df05140059005d0097b61e5b5a4904481fb801d2b7292a
34353d04293eb801d3b74811070656045512b801d3b71c1d5c5d4a041c4b
b801d3402d553929481c550b0b551c48293906002e5052563d49d35a3506
5a34075bd41e2a111e5a1e5a1e24435224551755003f3f3f1239392f2f11
333310ed323211333310ed32323f012fc417392f2f2f2f2f2f10ed111739
10ed11173910ed11173910ed111739313001140e0223230333321615140e
022323030e0323222e02371323030e0323222e02371323222635343e0233
3313232226353436333313343e0233321e02150333133e0333321e020703
3332160503331303df060a0f087222621115060a0f087725010917271e20
2714070126e02501091627201f26150702245f1115060a0e097422651115
161178240a18281f1f26140525e022010a1728201f2614050123601115fd
c022df23037618211409fee3272e18221409fec7090d0a04040a0d090139
fec7080e0a04040a0d090139262f18221409011d262f30260124090d0a05
050a0d08fedb0124080e0a05050a0d08fedb2784fee3011d>HIBBAA+Calibri-Bold AddT42Char 
1 3108 13 <00010016fffa03b303c6002c0055b10102435558b210211fb80284b64015
2120062123b8025d400c400020212849210b1a490b4c00183f3f12393f01
192f1a18dd1a4ded12391a10dd1aed123931301bb72849210b1a490b4c00
183f3f12393f31305901140e0207010e0323222e0227012e0235343e0233
321e0217131737133e0333321e0203b301030504fef40511274336354326
1105fef40607010b1c312529321d0c04cb0606c8030d1c2f26252f1a0a03
9f050e11160efcd911150c04050c1510032714200e060a0f0a040509110c
fd711919028f0c110905040a0f00>HIBBAA+Calibri-Bold AddT42Char 
1 692 5 <00020047ffe9037603d7003300400129b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f
5f5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed32393130
1b400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e
412ab80118401be02201037d228d2202402250226022030f221f22020c04
2222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe840091001
4d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f5f5e5d5d5d5f5ded
1112392f2b5d71ed5d7131305925140606232226263535060623222e0235
343e02333335342e0223220e0223222e0235343e0433321e02150723220e
02151416333236370376142b2a2d2911378d56477757303d79b477571127
41303f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35
592e1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a
26171f241d231e132955865cda122433213840363400>HIBBAA+Calibri-Bold AddT42Char 
1 2054 9 <0001007efffa017a05700015003fb10102435558400f0d15010b0b010b0a
010d00010b0400b80260b5400a1046054c00183f3f012f1a4ded31305f5e
5d5d5d5d1bb31046054c00183f3f31305925140e0223222e023511343e02
33321e0215017a0c1d302525301d0c0c1d302525301d0c220a0f0a05050a
0f0a05230a100b06060b100a>HIBBAA+Calibri-Bold AddT42Char 
1 1884 8 <0002006bfffa018d054e001500210045b10102435558bf001602bf001c00
150260000a001f017bb540191049054c00183f3fd61a4ded012fedd4ed31
301bb9001f017bb540191049054c00183f3fd61a4ded31305925140e0223
222e023511343e0233321e0215131406232226353436333216017a0c1d30
2525301d0c0c1d302525301d0c133e54553b3d55543c220a0f0a05050a0f
0a037a0a0f0b06060b0f0a01304c3a38494c3b39>HIBBAA+Calibri-Bold AddT42Char 
1 1164 6 <0002004bffe903cc056d002600390095b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1a4ded2b3fed2b
1217393f012fedd4ed323931301b400921460b39271b040e2ab8ffe8b40b
0f014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f
3f1a4ded2b3fed2b1217393f31305925140e0223222e023535060623222e
0235343e023332161711343e0233321e021503262623220e0215141e0233
323e023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d
302525301c0cfa36633631472b15122944341a31333620220b0f0a04040a
0f0b634a524f86b36377be86483d3b01e30a100b06060b100afd34444831
526535386a53320f22372800>HIBBAA+Calibri-Bold AddT42Char 

1 0 3 <> HIBBAA+Calibri-Bold AddT42Char 
1 316 4 <0001003fffe9038c0525004900bbb10102435558b900410297b524322432
0c1bb8029cb2000c2ebb012d0037000a012db61137113711163cb8ffe8b4
0b0f014c3cb8012d400c411b05295316180b0f014c16b80158b240055600
183f1a4ded2b3f123939ed2b1139392f2f10ed10ed012fd4ed1239392f2f
ed31301bbc002e012d0037000a012db61137113711163cb8ffe8b40b0f01
4c3cb8012d400c411b05295316180b0f014c16b80158b240055600183f1a
4ded2b3f123939ed2b1139392f2f10ed10ed31305901140e0223222e0435
343e0233321e0233323e0235342e0635343e0233321e0615140e0223222e
0223220e0215141e06038c4c82ae634373583b1a0b04090f0a0e33506f49
304c351c304d6268624d3045759f592e5c503e1407050203070d0b0b3046
5c372b402b152f4f6468644e300184669a6734161f221a312e1f2a1a0b21
2821172a3e262c3f312b303d5574515d8d5d2e0e181e140e17231a1d281a
0c1c211b1525341d2b3f312b303d5573>HIBBAA+Calibri-Bold AddT42Char 
1 1476 7 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>HIBBAA+Calibri-Bold AddT42Char 
1 2686 12 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>HIBBAA+Calibri-Bold AddT42Char 
1 2456 11 <00020048ffe9040403d7001300270071b10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fe
fd1532533f3854361b1631543e3954361a01e972bc884a427eb87672bd87
4a417eb881426f522e294f6f47426f522d294e6f>HIBBAA+Calibri-Bold AddT42Char 
1 2186 10 <0001007efffa03d203d700320081b10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1a4ded2b2b012fd4ed10ed3931
301bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a
192449194c054c00183f3f3f12393f1a4ded2b2b31305925140e0223222e
023511342e022322060711140e0223222e023511343e0233321e02151536
3633321e021503d20c1c312425311c0c132439263062350c1d302525301d
0c0a1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a35
1d4643fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61
>HIBBAA+Calibri-Bold AddT42Char 
1 3746 15 <0001000cfffa03ea050e00220055b10102435558b10006b80294b3181106
12b8ffe8b40b0f014c12b8015bb4401d510c5500183f3f1a4ded2b32012f
c4fdcd31301bb10612b8ffe8b40b0f014c12b8015bb4401d510c5500183f
3f1a4ded2b3231305901140e02232111140e0223222e02351121222e0235
343e023321321e0203ea050a0f09febc0d1e332626331e0dfebc0a0e0a05
050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a100a04130c19
291d1e2a190b0b192a00>HIBBAA+Calibri-Bold AddT42Char 
1 3936 16 <0001007efffa060903d7005000abb10102435558b14613b8025fb31e1e32
0ab8025fb2503e27bb026000320010ffe8b40b0f014c10b8014db24b4a24
b8ffe8b40b0f014c24b8014d400e40414a3e462d38492d4c194c054c0018
3f3f3f3f1239393f1a4ded2b3fed2b012fed39d4ed11392fed3931301bb9
0010ffe8b40b0f014c10b8014db24b4a24b8ffe8b40b0f014c24b8014d40
0e40414a3e462d38492d4c194c054c00183f3f3f3f1239393f1a4ded2b3f
ed2b31305925140e0223222e023511342e022322060711140e0223222e02
3511342e022322060711140e0223222e023511343e0233321e0215153636
33321e02173e0333321e021506090c1c302526301d0b112335252d5c360c
1d302425301d0c112236242e5c350c1d302525301d0c0a1a291f202a170a
4a93503758453211284d4b4b27597a4b20220a0f0a05050a0f0a02112d4a
351d4643fdaf0a0f0a05050a0f0a02112d4a351d4643fdaf0a0f0a05050a
0f0a037c0a0f0a05050a0f0a675050172b3c252b3e27133c678a4d00>HIBBAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>HIBBAA+Calibri-Bold AddT42Char 
HIBBAA+Calibri-Bold /CharStrings get begin
/g14 14 def
/g13 13 def
/g5 5 def
/g9 9 def
/g8 8 def
/g6 6 def
/g3 3 def
/g4 4 def
/g7 7 def
/g12 12 def
/g11 11 def
/g10 10 def
/g15 15 def
/g16 16 def
end
HIBBAA+Calibri-Bold /Encoding get
dup 32 /g14 put
dup 33 /g13 put
dup 34 /g5 put
dup 35 /g9 put
dup 36 /g8 put
dup 37 /g6 put
dup 38 /g3 put
dup 39 /g4 put
dup 40 /g7 put
dup 41 /g12 put
dup 42 /g11 put
dup 43 /g10 put
dup 44 /g15 put
dup 45 /g16 put
pop
end
%ADOEndSubsetFont
/FHPXXG+Calibri-Bold /HIBBAA+Calibri-Bold findfont ct_VMDictPut
/FHPXXG+Calibri-Bold*1 
[32{/.notdef}rp /g14 /g13 /g5 /g9 /g8 /g6 /g3 
/g4 /g7 /g12 /g11 /g10 /g15 /g16 210{/.notdef}rp]
FHPXXG+Calibri-Bold nf
FHPXXG+Calibri-Bold*1 [0 -18.7482 -18.7009 0 0 0 ]msf
91.678 247.191 mo
( !"#$%&'\(\)\)$*+\))
[-9.26166 -8.80997 -9.26169 -4.51826 -4.51825 -10.1651 -4.51826 -8.80968 -9.48682 -7.45425 -7.45425 -4.51826 
-10.1654 -10.1651 0 ]ysh
FHPXXG+Calibri-Bold*1 [18.7009 0 0 -18.7482 0 0 ]msf
411.343 376.25 mo
(,$-\()
[9.23801 4.50687 15.3217 0 ]xsh
211.983 19.9755 mo
224.552 19.9755 li
225.748 19.9755 226.706 20.9355 226.706 22.0155 cv
226.706 23.2155 225.748 24.1755 224.552 24.1755 cv
211.983 24.1755 li
210.906 24.1755 209.948 23.2155 209.948 22.0155 cv
209.948 20.9355 210.906 19.9755 211.983 19.9755 cv
cp
241.309 19.9755 mo
253.877 19.9755 li
255.074 19.9755 256.032 20.9355 256.032 22.0155 cv
256.032 23.2155 255.074 24.1755 253.877 24.1755 cv
241.309 24.1755 li
240.232 24.1755 239.274 23.2155 239.274 22.0155 cv
239.274 20.9355 240.232 19.9755 241.309 19.9755 cv
cp
.577668 .58323 .597478 rgb
f
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 3578 14 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>PBAAAA+Calibri AddT42Char 
1 3734 15 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>PBAAAA+Calibri AddT42Char 
1 3330 13 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g14 14 def
/g15 15 def
/g13 13 def
end
PBAAAA+Calibri /Encoding get
dup 42 /g14 put
dup 43 /g15 put
dup 44 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FHPXXF+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g11 /g12 /g14 /g15 /g13 211{/.notdef}rp]
FHPXXF+Calibri nf
FHPXXF+Calibri*1 [18.7009 0 0 -18.7482 0 0 ]msf
264.707 27.4362 mo
(*+,)
[7.88599 9.23831 0 ]xsh
314.683 19.9755 mo
314.803 19.9755 li
315.88 19.9755 316.838 20.9355 316.838 22.0155 cv
316.838 23.2155 315.88 24.1755 314.803 24.1755 cv
314.683 24.1755 li
313.606 24.1755 312.648 23.2155 312.648 22.0155 cv
312.648 20.9355 313.606 19.9755 314.683 19.9755 cv
cp
323.182 19.9755 mo
323.182 19.9755 li
324.259 19.9755 325.217 20.9355 325.217 22.0155 cv
325.217 23.2155 324.259 24.1755 323.182 24.1755 cv
321.985 24.1755 321.027 23.2155 321.027 22.0155 cv
321.027 20.9355 321.985 19.9755 323.182 19.9755 cv
cp
331.561 19.9755 mo
331.561 19.9755 li
332.638 19.9755 333.595 20.9355 333.595 22.0155 cv
333.595 23.2155 332.638 24.1755 331.561 24.1755 cv
330.364 24.1755 329.406 23.2155 329.406 22.0155 cv
329.406 20.9355 330.364 19.9755 331.561 19.9755 cv
cp
339.939 19.9755 mo
339.939 19.9755 li
341.017 19.9755 341.974 20.9355 341.974 22.0155 cv
341.974 23.2155 341.017 24.1755 339.939 24.1755 cv
338.742 24.1755 337.785 23.2155 337.785 22.0155 cv
337.785 20.9355 338.742 19.9755 339.939 19.9755 cv
cp
348.318 19.9755 mo
348.318 19.9755 li
349.395 19.9755 350.353 20.9355 350.353 22.0155 cv
350.353 23.2155 349.395 24.1755 348.318 24.1755 cv
347.121 24.1755 346.164 23.2155 346.164 22.0155 cv
346.164 20.9355 347.121 19.9755 348.318 19.9755 cv
cp
356.697 19.9755 mo
356.697 19.9755 li
357.774 19.9755 358.732 20.9355 358.732 22.0155 cv
358.732 23.2155 357.774 24.1755 356.697 24.1755 cv
355.5 24.1755 354.542 23.2155 354.542 22.0155 cv
354.542 20.9355 355.5 19.9755 356.697 19.9755 cv
cp
.391045 .393769 .400815 rgb
f
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
1 4504 18 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>PBAAAA+Calibri AddT42Char 
1 3940 16 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>PBAAAA+Calibri AddT42Char 
1 4158 17 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>PBAAAA+Calibri AddT42Char 
1 4924 19 <00020024fffa03d705140059005d0039401d5052563d49df5a35065a3407
5bdf1e2a111e5a1e5a1e24435224551755003f3f3f1239392f2f11333310
ed323211333310ed32323f313001140e0223230333321615140e02232303
0e0323222e02371321030e0323222e02371323222635343e023333132322
263534363333133e0333321e02150321133e0333321e0207033332160503
211303d705090d078328740f1306080d07852a0106101c17171e1006012a
feea2a02050f1c17181e10060129740f1306080c088629790f13130f8829
0107111e17181c0f042a0116270108101e18171d0e050128730f13fdb128
01152a037611180f07feb41e2211180f07feaa070b070303070b070156fe
aa070b070303070b0701561d2211180f08014c1e20231e0141070b070404
070b06febe0141070b070404070b06febe1f60feb4014c00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g18 18 def
/g16 16 def
/g17 17 def
/g19 19 def
end
PBAAAA+Calibri /Encoding get
dup 45 /g18 put
dup 46 /g16 put
dup 47 /g17 put
dup 48 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FHPXXF+Calibri*1 
[32{/.notdef}rp /g3 /g4 /g5 /g6 /g7 /g8 /g9 
/g10 /g11 /g12 /g14 /g15 /g13 /g18 /g16 
/g17 /g19 207{/.notdef}rp]
FHPXXF+Calibri nf
FHPXXF+Calibri*1 [18.7009 0 0 -18.7482 0 0 ]msf
367.371 27.4362 mo
(-.//0")
[8.56116 11.7163 15.9969 15.9969 9.46259 0 ]xsh
462.27 19.9755 mo
509.55 19.9755 li
510.747 19.9755 511.705 20.9355 511.705 22.0155 cv
511.705 23.2155 510.747 24.1755 509.55 24.1755 cv
462.27 24.1755 li
461.192 24.1755 460.235 23.2155 460.235 22.0155 cv
460.235 20.9355 461.192 19.9755 462.27 19.9755 cv
cp
f
FHPXXF+Calibri*1 [18.7009 0 0 -18.7482 0 0 ]msf
514.964 27.4362 mo
(-.//0#)
[8.56116 11.7163 15.9969 15.9969 9.46259 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FHPXXG+Calibri-Bold*1 uf
/FHPXXG+Calibri-Bold uf
/HIBBAA+Calibri-Bold uf
/FHPXXF+Calibri*1 uf
/FHPXXF+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
